
lab_5_GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000641  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  000007f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ef  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Reg_Map.h"
#include <util/delay.h>

int main(void)
{
    DDRC=0XFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
    while (1) 
    {
		int i,j;
		for (i=0;i<10;i++)
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	50 e0       	ldi	r21, 0x00	; 0
  74:	28 c0       	rjmp	.+80     	; 0xc6 <main+0x5a>
		{
			for (j=0;j<10;j++)
			{
				PORTC = 0b1000 | (i<<4);
  76:	ca 01       	movw	r24, r20
  78:	82 95       	swap	r24
  7a:	92 95       	swap	r25
  7c:	90 7f       	andi	r25, 0xF0	; 240
  7e:	98 27       	eor	r25, r24
  80:	80 7f       	andi	r24, 0xF0	; 240
  82:	98 27       	eor	r25, r24
  84:	98 2f       	mov	r25, r24
  86:	98 60       	ori	r25, 0x08	; 8
  88:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	6f e7       	ldi	r22, 0x7F	; 127
  8c:	78 e3       	ldi	r23, 0x38	; 56
  8e:	e1 e0       	ldi	r30, 0x01	; 1
  90:	61 50       	subi	r22, 0x01	; 1
  92:	70 40       	sbci	r23, 0x00	; 0
  94:	e0 40       	sbci	r30, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
				_delay_ms(50);
				PORTC = 0b0100 | (i<<4);
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	6f e7       	ldi	r22, 0x7F	; 127
  a2:	78 e3       	ldi	r23, 0x38	; 56
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	61 50       	subi	r22, 0x01	; 1
  a8:	70 40       	sbci	r23, 0x00	; 0
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
    while (1) 
    {
		int i,j;
		for (i=0;i<10;i++)
		{
			for (j=0;j<10;j++)
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x50>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	2a 30       	cpi	r18, 0x0A	; 10
  be:	31 05       	cpc	r19, r1
  c0:	d4 f2       	brlt	.-76     	; 0x76 <main+0xa>
{
    DDRC=0XFF;
    while (1) 
    {
		int i,j;
		for (i=0;i<10;i++)
  c2:	4f 5f       	subi	r20, 0xFF	; 255
  c4:	5f 4f       	sbci	r21, 0xFF	; 255
  c6:	4a 30       	cpi	r20, 0x0A	; 10
  c8:	51 05       	cpc	r21, r1
  ca:	b4 f3       	brlt	.-20     	; 0xb8 <main+0x4c>
  cc:	d1 cf       	rjmp	.-94     	; 0x70 <main+0x4>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
