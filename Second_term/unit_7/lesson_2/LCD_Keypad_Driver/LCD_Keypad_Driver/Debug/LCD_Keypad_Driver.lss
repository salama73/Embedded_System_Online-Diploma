
LCD_Keypad_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000260  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ca0  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071c  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000532  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d2  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000049d  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000262f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  7a:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
int Keypad_Row[]={R0,R1,R2,R3};
int Keypad_Col[]={C0,C1,C2,C3};
	
void keypad_init(void)
{
	Keypad_port_DDR=0xf0;  // pin{0,1,2,3} connected with row as input , pin{4,5,6,7} connected whit columns as output
  82:	80 ef       	ldi	r24, 0xF0	; 240
  84:	81 bb       	out	0x11, r24	; 17
	Keypad_port=0xff ;      // pull_up active with  input and output pins is high
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	82 bb       	out	0x12, r24	; 18
  8a:	08 95       	ret

0000008c <keypad_getkey>:
}

char keypad_getkey(void)
{
	int i,j;
	for(i=0;i<4;i++)
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	43 c0       	rjmp	.+134    	; 0x118 <keypad_getkey+0x8c>
	{
		Keypad_port |=(0b1111<<4);// set all columns as high signal
  92:	82 b3       	in	r24, 0x12	; 18
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	82 bb       	out	0x12, r24	; 18
		Keypad_port &=~(1<<Keypad_Col[i]);// set a column number i as low signal
  98:	22 b3       	in	r18, 0x12	; 18
  9a:	fa 01       	movw	r30, r20
  9c:	ee 0f       	add	r30, r30
  9e:	ff 1f       	adc	r31, r31
  a0:	e0 5a       	subi	r30, 0xA0	; 160
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	00 80       	ld	r0, Z
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <keypad_getkey+0x24>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <keypad_getkey+0x20>
  b4:	80 95       	com	r24
  b6:	82 23       	and	r24, r18
  b8:	82 bb       	out	0x12, r24	; 18
		for(j=0;j<4;j++)
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	27 c0       	rjmp	.+78     	; 0x10e <keypad_getkey+0x82>
		{
			if(!(Keypad_pin & (1<<Keypad_Row[j])))
  c0:	80 b3       	in	r24, 0x10	; 16
  c2:	f9 01       	movw	r30, r18
  c4:	ee 0f       	add	r30, r30
  c6:	ff 1f       	adc	r31, r31
  c8:	e8 59       	subi	r30, 0x98	; 152
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	60 81       	ld	r22, Z
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	06 2e       	mov	r0, r22
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <keypad_getkey+0x4c>
  d4:	95 95       	asr	r25
  d6:	87 95       	ror	r24
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <keypad_getkey+0x48>
  dc:	80 fd       	sbrc	r24, 0
  de:	15 c0       	rjmp	.+42     	; 0x10a <keypad_getkey+0x7e>
			{
				while(!(Keypad_pin & (1<<Keypad_Row[j])));
  e0:	80 b3       	in	r24, 0x10	; 16
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	06 2e       	mov	r0, r22
  e6:	02 c0       	rjmp	.+4      	; 0xec <keypad_getkey+0x60>
  e8:	95 95       	asr	r25
  ea:	87 95       	ror	r24
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <keypad_getkey+0x5c>
  f0:	80 ff       	sbrs	r24, 0
  f2:	f6 cf       	rjmp	.-20     	; 0xe0 <keypad_getkey+0x54>
				return keypad[j][i];
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	20 59       	subi	r18, 0x90	; 144
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	f9 01       	movw	r30, r18
 102:	e4 0f       	add	r30, r20
 104:	f5 1f       	adc	r31, r21
 106:	80 81       	ld	r24, Z
 108:	08 95       	ret
	int i,j;
	for(i=0;i<4;i++)
	{
		Keypad_port |=(0b1111<<4);// set all columns as high signal
		Keypad_port &=~(1<<Keypad_Col[i]);// set a column number i as low signal
		for(j=0;j<4;j++)
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	24 30       	cpi	r18, 0x04	; 4
 110:	31 05       	cpc	r19, r1
 112:	b4 f2       	brlt	.-84     	; 0xc0 <keypad_getkey+0x34>
}

char keypad_getkey(void)
{
	int i,j;
	for(i=0;i<4;i++)
 114:	4f 5f       	subi	r20, 0xFF	; 255
 116:	5f 4f       	sbci	r21, 0xFF	; 255
 118:	44 30       	cpi	r20, 0x04	; 4
 11a:	51 05       	cpc	r21, r1
 11c:	0c f4       	brge	.+2      	; 0x120 <keypad_getkey+0x94>
 11e:	b9 cf       	rjmp	.-142    	; 0x92 <keypad_getkey+0x6>
				while(!(Keypad_pin & (1<<Keypad_Row[j])));
				return keypad[j][i];
			}
		}
	}
	return 'n';
 120:	8e e6       	ldi	r24, 0x6E	; 110
 122:	08 95       	ret

00000124 <LCD_cmd>:
			LCD_cmd(0X80+posision);
	}
	else if (line==1)
	{
		if(posision>=0 && posision<16)
			LCD_cmd(0XC0+posision);
 124:	9b b3       	in	r25, 0x1b	; 27
 126:	9f 70       	andi	r25, 0x0F	; 15
 128:	28 2f       	mov	r18, r24
 12a:	20 7f       	andi	r18, 0xF0	; 240
 12c:	92 2b       	or	r25, r18
 12e:	9b bb       	out	0x1b, r25	; 27
 130:	98 b3       	in	r25, 0x18	; 24
 132:	97 7f       	andi	r25, 0xF7	; 247
 134:	98 bb       	out	0x18, r25	; 24
 136:	98 b3       	in	r25, 0x18	; 24
 138:	9d 7f       	andi	r25, 0xFD	; 253
 13a:	98 bb       	out	0x18, r25	; 24
 13c:	98 b3       	in	r25, 0x18	; 24
 13e:	94 60       	ori	r25, 0x04	; 4
 140:	98 bb       	out	0x18, r25	; 24
 142:	00 00       	nop
 144:	98 b3       	in	r25, 0x18	; 24
 146:	9b 7f       	andi	r25, 0xFB	; 251
 148:	98 bb       	out	0x18, r25	; 24
 14a:	32 e4       	ldi	r19, 0x42	; 66
 14c:	3a 95       	dec	r19
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_cmd+0x28>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_cmd+0x2e>
 152:	2b b3       	in	r18, 0x1b	; 27
 154:	30 e1       	ldi	r19, 0x10	; 16
 156:	83 9f       	mul	r24, r19
 158:	c0 01       	movw	r24, r0
 15a:	11 24       	eor	r1, r1
 15c:	92 2f       	mov	r25, r18
 15e:	9f 70       	andi	r25, 0x0F	; 15
 160:	89 2b       	or	r24, r25
 162:	8b bb       	out	0x1b, r24	; 27
 164:	88 b3       	in	r24, 0x18	; 24
 166:	84 60       	ori	r24, 0x04	; 4
 168:	88 bb       	out	0x18, r24	; 24
 16a:	00 00       	nop
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	88 bb       	out	0x18, r24	; 24
 172:	83 ef       	ldi	r24, 0xF3	; 243
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_cmd+0x52>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_cmd+0x58>
 17c:	00 00       	nop
 17e:	08 95       	ret

00000180 <LCD_init>:
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	87 bb       	out	0x17, r24	; 23
 184:	8a bb       	out	0x1a, r24	; 26
 186:	87 e8       	ldi	r24, 0x87	; 135
 188:	93 e1       	ldi	r25, 0x13	; 19
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_init+0xa>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_init+0x10>
 190:	00 00       	nop
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 92 00 	call	0x124	; 0x124 <LCD_cmd>
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	0e 94 92 00 	call	0x124	; 0x124 <LCD_cmd>
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	0e 94 92 00 	call	0x124	; 0x124 <LCD_cmd>
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	0e 94 92 00 	call	0x124	; 0x124 <LCD_cmd>
 1aa:	8f e0       	ldi	r24, 0x0F	; 15
 1ac:	0e 94 92 00 	call	0x124	; 0x124 <LCD_cmd>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 92 00 	call	0x124	; 0x124 <LCD_cmd>
 1b6:	83 ef       	ldi	r24, 0xF3	; 243
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_init+0x3a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_init+0x40>
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <lcd_Clear>:
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 92 00 	call	0x124	; 0x124 <LCD_cmd>
 1ca:	83 ef       	ldi	r24, 0xF3	; 243
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_Clear+0xa>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_Clear+0x10>
 1d4:	00 00       	nop
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	0e 94 92 00 	call	0x124	; 0x124 <LCD_cmd>
 1dc:	08 95       	ret

000001de <LCD_Character>:
	_delay_us(1);
	lcd_control_Port &= ~ (1<<en);							  // give low pulse to enable pin
	_delay_us(200);
#endif
#ifdef _4_bit_mode
	lcd_Data_Port = (lcd_Data_Port & 0x0F) | (character & 0xF0);			// send upper nibble of character
 1de:	9b b3       	in	r25, 0x1b	; 27
 1e0:	9f 70       	andi	r25, 0x0F	; 15
 1e2:	28 2f       	mov	r18, r24
 1e4:	20 7f       	andi	r18, 0xF0	; 240
 1e6:	92 2b       	or	r25, r18
 1e8:	9b bb       	out	0x1b, r25	; 27
	lcd_control_Port &= ~ (1<<RW);							 // R/W=0 i.e MODE Write
 1ea:	98 b3       	in	r25, 0x18	; 24
 1ec:	97 7f       	andi	r25, 0xF7	; 247
 1ee:	98 bb       	out	0x18, r25	; 24
	lcd_control_Port |= (1<<rs);										   //  set rs to select data register
 1f0:	98 b3       	in	r25, 0x18	; 24
 1f2:	92 60       	ori	r25, 0x02	; 2
 1f4:	98 bb       	out	0x18, r25	; 24
	lcd_control_Port|= (1<<en);										  // set enable pin
 1f6:	98 b3       	in	r25, 0x18	; 24
 1f8:	94 60       	ori	r25, 0x04	; 4
 1fa:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	00 00       	nop
	_delay_us(1);
	lcd_control_Port &= ~ (1<<en);									// reset enable pin
 1fe:	98 b3       	in	r25, 0x18	; 24
 200:	9b 7f       	andi	r25, 0xFB	; 251
 202:	98 bb       	out	0x18, r25	; 24
 204:	32 e4       	ldi	r19, 0x42	; 66
 206:	3a 95       	dec	r19
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_Character+0x28>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_Character+0x2e>
	_delay_us(200);
	lcd_Data_Port = (lcd_Data_Port & 0x0F) | (character << 4);         //send lower nibble
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	30 e1       	ldi	r19, 0x10	; 16
 210:	83 9f       	mul	r24, r19
 212:	c0 01       	movw	r24, r0
 214:	11 24       	eor	r1, r1
 216:	92 2f       	mov	r25, r18
 218:	9f 70       	andi	r25, 0x0F	; 15
 21a:	89 2b       	or	r24, r25
 21c:	8b bb       	out	0x1b, r24	; 27
	lcd_control_Port |= (1<<en);                                   // set enable pin
 21e:	88 b3       	in	r24, 0x18	; 24
 220:	84 60       	ori	r24, 0x04	; 4
 222:	88 bb       	out	0x18, r24	; 24
 224:	00 00       	nop
	_delay_us(1);
	lcd_control_Port &= ~ (1<<en);                               // reset enable pin
 226:	88 b3       	in	r24, 0x18	; 24
 228:	8b 7f       	andi	r24, 0xFB	; 251
 22a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	83 ef       	ldi	r24, 0xF3	; 243
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_Character+0x52>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_Character+0x58>
 236:	00 00       	nop
 238:	08 95       	ret

0000023a <main>:
#include "LCD.h"
#include "Keypad.h"
int main(void)
{
	char key_pressed;
    LCD_init();
 23a:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_init>
	keypad_init();
 23e:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>
    while (1) 
    {
		key_pressed=keypad_getkey();
 242:	0e 94 46 00 	call	0x8c	; 0x8c <keypad_getkey>
		switch(key_pressed)
 246:	83 36       	cpi	r24, 0x63	; 99
 248:	19 f0       	breq	.+6      	; 0x250 <main+0x16>
 24a:	8e 36       	cpi	r24, 0x6E	; 110
 24c:	d1 f3       	breq	.-12     	; 0x242 <main+0x8>
 24e:	03 c0       	rjmp	.+6      	; 0x256 <main+0x1c>
		{
			case 'c':
				lcd_Clear();
 250:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_Clear>
				break;
 254:	f6 cf       	rjmp	.-20     	; 0x242 <main+0x8>
			case 'n':
				break;
			default:
				LCD_Character(key_pressed);
 256:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_Character>
				break;
 25a:	f3 cf       	rjmp	.-26     	; 0x242 <main+0x8>

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
