
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c68  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000d98  08000d98  00010d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dbc  08000dbc  00010dc4  2**0
                  CONTENTS
  4 .ARM          00000000  08000dbc  08000dbc  00010dc4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dbc  08000dc4  00010dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dc0  08000dc0  00010dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000dc4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000dc4  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dc4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003307  00000000  00000000  00010ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000831  00000000  00000000  000140f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000096c  00000000  00000000  00014925  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000190  00000000  00000000  00015298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000148  00000000  00000000  00015428  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000be5  00000000  00000000  00015570  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001aac  00000000  00000000  00016155  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000093b4  00000000  00000000  00017c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00020fb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004f0  00000000  00000000  00021030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d80 	.word	0x08000d80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d80 	.word	0x08000d80

08000170 <_delay_ms>:
//#define _4_bit_mode
#define _8_bit_mode


void _delay_ms(int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<=x;i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <_delay_ms+0x26>
		for(j=0;j<255;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <_delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <_delay_ms+0x14>
	for(i=0;i<=x;i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	68fa      	ldr	r2, [r7, #12]
 800019a:	429a      	cmp	r2, r3
 800019c:	d9ef      	bls.n	800017e <_delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_init>:

void LCD_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	GPIO_Pinconfig_t pincfg_LCD;
	// lcd_Data_Direction-->>Output
	pincfg_LCD.pinNumber=GPIO_PIN_0;
 80001ae:	2301      	movs	r3, #1
 80001b0:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin0 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001b2:	2304      	movs	r3, #4
 80001b4:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin0 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 80001b6:	2301      	movs	r3, #1
 80001b8:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	4845      	ldr	r0, [pc, #276]	; (80002d4 <LCD_init+0x12c>)
 80001c0:	f000 fd15 	bl	8000bee <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=GPIO_PIN_1;
 80001c4:	2302      	movs	r3, #2
 80001c6:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin1 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001c8:	2304      	movs	r3, #4
 80001ca:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin1 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	483f      	ldr	r0, [pc, #252]	; (80002d4 <LCD_init+0x12c>)
 80001d6:	f000 fd0a 	bl	8000bee <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=GPIO_PIN_2;
 80001da:	2304      	movs	r3, #4
 80001dc:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin2 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001de:	2304      	movs	r3, #4
 80001e0:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin2 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 80001e2:	2301      	movs	r3, #1
 80001e4:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4619      	mov	r1, r3
 80001ea:	483a      	ldr	r0, [pc, #232]	; (80002d4 <LCD_init+0x12c>)
 80001ec:	f000 fcff 	bl	8000bee <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=GPIO_PIN_3;
 80001f0:	2308      	movs	r3, #8
 80001f2:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin3 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001f4:	2304      	movs	r3, #4
 80001f6:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin3 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 80001f8:	2301      	movs	r3, #1
 80001fa:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4619      	mov	r1, r3
 8000200:	4834      	ldr	r0, [pc, #208]	; (80002d4 <LCD_init+0x12c>)
 8000202:	f000 fcf4 	bl	8000bee <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=GPIO_PIN_4;
 8000206:	2310      	movs	r3, #16
 8000208:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin4 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800020a:	2304      	movs	r3, #4
 800020c:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin4 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 800020e:	2301      	movs	r3, #1
 8000210:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4619      	mov	r1, r3
 8000216:	482f      	ldr	r0, [pc, #188]	; (80002d4 <LCD_init+0x12c>)
 8000218:	f000 fce9 	bl	8000bee <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=GPIO_PIN_5;
 800021c:	2320      	movs	r3, #32
 800021e:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin5 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000220:	2304      	movs	r3, #4
 8000222:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin5 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000224:	2301      	movs	r3, #1
 8000226:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	4619      	mov	r1, r3
 800022c:	4829      	ldr	r0, [pc, #164]	; (80002d4 <LCD_init+0x12c>)
 800022e:	f000 fcde 	bl	8000bee <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=GPIO_PIN_6;
 8000232:	2340      	movs	r3, #64	; 0x40
 8000234:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin6 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000236:	2304      	movs	r3, #4
 8000238:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin6 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 800023a:	2301      	movs	r3, #1
 800023c:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4824      	ldr	r0, [pc, #144]	; (80002d4 <LCD_init+0x12c>)
 8000244:	f000 fcd3 	bl	8000bee <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=GPIO_PIN_7;
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin7 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800024c:	2304      	movs	r3, #4
 800024e:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin7 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000250:	2301      	movs	r3, #1
 8000252:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4619      	mov	r1, r3
 8000258:	481e      	ldr	r0, [pc, #120]	; (80002d4 <LCD_init+0x12c>)
 800025a:	f000 fcc8 	bl	8000bee <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=rs;
 800025e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000262:	80bb      	strh	r3, [r7, #4]
	//PORTB Pin1 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000264:	2304      	movs	r3, #4
 8000266:	71bb      	strb	r3, [r7, #6]
	//PORTB Pin1 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000268:	2301      	movs	r3, #1
 800026a:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(lcd_control_Direction,&pincfg_LCD);
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4619      	mov	r1, r3
 8000270:	4818      	ldr	r0, [pc, #96]	; (80002d4 <LCD_init+0x12c>)
 8000272:	f000 fcbc 	bl	8000bee <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=RW;
 8000276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800027a:	80bb      	strh	r3, [r7, #4]
	//PORTB Pin2 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800027c:	2304      	movs	r3, #4
 800027e:	71bb      	strb	r3, [r7, #6]
	//PORTB Pin2 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000280:	2301      	movs	r3, #1
 8000282:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(lcd_control_Direction,&pincfg_LCD);
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	4619      	mov	r1, r3
 8000288:	4812      	ldr	r0, [pc, #72]	; (80002d4 <LCD_init+0x12c>)
 800028a:	f000 fcb0 	bl	8000bee <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=en;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	80bb      	strh	r3, [r7, #4]
	//PORTB Pin3 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000294:	2304      	movs	r3, #4
 8000296:	71bb      	strb	r3, [r7, #6]
	//PORTB Pin3 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000298:	2301      	movs	r3, #1
 800029a:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(lcd_control_Direction,&pincfg_LCD);
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <LCD_init+0x12c>)
 80002a2:	f000 fca4 	bl	8000bee <MCAL_GPIO_Init>
	_delay_ms(2);
 80002a6:	2002      	movs	r0, #2
 80002a8:	f7ff ff62 	bl	8000170 <_delay_ms>

#ifdef _8_bit_mode
	LCD_cmd(_2L_8b);                              // 2 line 5*7 matrix in 4-bit mode
 80002ac:	2038      	movs	r0, #56	; 0x38
 80002ae:	f000 f813 	bl	80002d8 <LCD_cmd>
	LCD_cmd(Display_on_Cursor_off);              // Display on cursor off
 80002b2:	200c      	movs	r0, #12
 80002b4:	f000 f810 	bl	80002d8 <LCD_cmd>
	LCD_cmd(Entry_Mode);                        // take cursor to next position "shift cursor to right"
 80002b8:	2006      	movs	r0, #6
 80002ba:	f000 f80d 	bl	80002d8 <LCD_cmd>
	LCD_cmd(Clear_Display);                    // Clear display screen
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 f80a 	bl	80002d8 <LCD_cmd>
	_delay_ms(2);
 80002c4:	2002      	movs	r0, #2
 80002c6:	f7ff ff53 	bl	8000170 <_delay_ms>
	LCD_cmd(beginning_of_the_first_line);
	LCD_cmd(Display_on_Cursor_blinking);              // Display on cursor off
	LCD_cmd(Clear_Display);                    // Clear display screen
	_delay_ms(2);
#endif
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40010800 	.word	0x40010800

080002d8 <LCD_cmd>:

void LCD_cmd( unsigned char cmd )
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
#ifdef _8_bit_mode
	MCAL_GPIO_WritePort(lcd_Data_Port, cmd);                                 // send command
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	4812      	ldr	r0, [pc, #72]	; (8000334 <LCD_cmd+0x5c>)
 80002ea:	f000 fd16 	bl	8000d1a <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);					// rs=0 i.e select command reg
 80002ee:	2200      	movs	r2, #0
 80002f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f4:	480f      	ldr	r0, [pc, #60]	; (8000334 <LCD_cmd+0x5c>)
 80002f6:	f000 fcf9 	bl	8000cec <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);				   // R/W=0 i.e MODE Write
 80002fa:	2200      	movs	r2, #0
 80002fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <LCD_cmd+0x5c>)
 8000302:	f000 fcf3 	bl	8000cec <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);				  // give high pulse to enable pin
 8000306:	2201      	movs	r2, #1
 8000308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <LCD_cmd+0x5c>)
 800030e:	f000 fced 	bl	8000cec <MCAL_GPIO_WritePin>
	_delay_ms(30);
 8000312:	201e      	movs	r0, #30
 8000314:	f7ff ff2c 	bl	8000170 <_delay_ms>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <LCD_cmd+0x5c>)
 8000320:	f000 fce4 	bl	8000cec <MCAL_GPIO_WritePin>
	_delay_ms(2);
 8000324:	2002      	movs	r0, #2
 8000326:	f7ff ff23 	bl	8000170 <_delay_ms>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
	_delay_ms(10);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
	_delay_ms(2);
#endif
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010800 	.word	0x40010800

08000338 <lcd_Clear>:

void lcd_Clear()
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	LCD_cmd (0x01);                   // send hex 01 to Clear display
 800033c:	2001      	movs	r0, #1
 800033e:	f7ff ffcb 	bl	80002d8 <LCD_cmd>
	_delay_ms(2);
 8000342:	2002      	movs	r0, #2
 8000344:	f7ff ff14 	bl	8000170 <_delay_ms>
	LCD_cmd(0x80);                   // send hex 80 to Force Cursor to beginning of 1st line
 8000348:	2080      	movs	r0, #128	; 0x80
 800034a:	f7ff ffc5 	bl	80002d8 <LCD_cmd>
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}

08000352 <GOTO_XY>:

void GOTO_XY(unsigned char line , unsigned char posision)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b082      	sub	sp, #8
 8000356:	af00      	add	r7, sp, #0
 8000358:	4603      	mov	r3, r0
 800035a:	460a      	mov	r2, r1
 800035c:	71fb      	strb	r3, [r7, #7]
 800035e:	4613      	mov	r3, r2
 8000360:	71bb      	strb	r3, [r7, #6]
	if (line==0)
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d109      	bne.n	800037c <GOTO_XY+0x2a>
	{
		if(posision>=0 && posision<16)
 8000368:	79bb      	ldrb	r3, [r7, #6]
 800036a:	2b0f      	cmp	r3, #15
 800036c:	d812      	bhi.n	8000394 <GOTO_XY+0x42>
			LCD_cmd(0X80+posision);
 800036e:	79bb      	ldrb	r3, [r7, #6]
 8000370:	3b80      	subs	r3, #128	; 0x80
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ffaf 	bl	80002d8 <LCD_cmd>
	else if (line==1)
	{
		if(posision>=0 && posision<16)
			LCD_cmd(0XC0+posision);
	}
}
 800037a:	e00b      	b.n	8000394 <GOTO_XY+0x42>
	else if (line==1)
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d108      	bne.n	8000394 <GOTO_XY+0x42>
		if(posision>=0 && posision<16)
 8000382:	79bb      	ldrb	r3, [r7, #6]
 8000384:	2b0f      	cmp	r3, #15
 8000386:	d805      	bhi.n	8000394 <GOTO_XY+0x42>
			LCD_cmd(0XC0+posision);
 8000388:	79bb      	ldrb	r3, [r7, #6]
 800038a:	3b40      	subs	r3, #64	; 0x40
 800038c:	b2db      	uxtb	r3, r3
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ffa2 	bl	80002d8 <LCD_cmd>
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <LCD_Character>:

void LCD_Character( unsigned char character )
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
#ifdef _8_bit_mode
	MCAL_GPIO_WritePort(lcd_Data_Port, character);                           // send command
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	4619      	mov	r1, r3
 80003ac:	4812      	ldr	r0, [pc, #72]	; (80003f8 <LCD_Character+0x5c>)
 80003ae:	f000 fcb4 	bl	8000d1a <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_SET);					//  set rs to select data register
 80003b2:	2201      	movs	r2, #1
 80003b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b8:	480f      	ldr	r0, [pc, #60]	; (80003f8 <LCD_Character+0x5c>)
 80003ba:	f000 fc97 	bl	8000cec <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);				   // R/W=0 i.e MODE Write
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <LCD_Character+0x5c>)
 80003c6:	f000 fc91 	bl	8000cec <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);				  // give high pulse to enable pin
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d0:	4809      	ldr	r0, [pc, #36]	; (80003f8 <LCD_Character+0x5c>)
 80003d2:	f000 fc8b 	bl	8000cec <MCAL_GPIO_WritePin>
	_delay_ms(30);
 80003d6:	201e      	movs	r0, #30
 80003d8:	f7ff feca 	bl	8000170 <_delay_ms>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <LCD_Character+0x5c>)
 80003e4:	f000 fc82 	bl	8000cec <MCAL_GPIO_WritePin>
	_delay_ms(2);
 80003e8:	2002      	movs	r0, #2
 80003ea:	f7ff fec1 	bl	8000170 <_delay_ms>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);			   // give high pulse to enable pin
	_delay_ms(10);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);			 // give low pulse to enable pin
	_delay_ms(2);
#endif
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010800 	.word	0x40010800

080003fc <LCD_String>:

void LCD_String (char *string)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	int count=0;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
	while(*string)
 8000408:	e020      	b.n	800044c <LCD_String+0x50>
	{
		count++;
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	3301      	adds	r3, #1
 800040e:	60fb      	str	r3, [r7, #12]
		LCD_Character(*string++);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ffbf 	bl	800039c <LCD_Character>
		if (count==16)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	2b10      	cmp	r3, #16
 8000422:	d104      	bne.n	800042e <LCD_String+0x32>
		{
			GOTO_XY(1,0);
 8000424:	2100      	movs	r1, #0
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff ff93 	bl	8000352 <GOTO_XY>
 800042c:	e00e      	b.n	800044c <LCD_String+0x50>
		}
		else if(count==32)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b20      	cmp	r3, #32
 8000432:	d10b      	bne.n	800044c <LCD_String+0x50>
		{
			_delay_ms(500);
 8000434:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000438:	f7ff fe9a 	bl	8000170 <_delay_ms>
			lcd_Clear();
 800043c:	f7ff ff7c 	bl	8000338 <lcd_Clear>
			GOTO_XY(0,0);
 8000440:	2100      	movs	r1, #0
 8000442:	2000      	movs	r0, #0
 8000444:	f7ff ff85 	bl	8000352 <GOTO_XY>
			count=0;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
	while(*string)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d1da      	bne.n	800040a <LCD_String+0xe>
		}
	}
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <delay>:
#include "Keypad.h"

uint8_t flag=0;

void delay(int x)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<=x;i++)
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e00b      	b.n	8000482 <delay+0x26>
		for(j=0;j<255;j++);
 800046a:	2300      	movs	r3, #0
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	e002      	b.n	8000476 <delay+0x1a>
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	3301      	adds	r3, #1
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	2bfe      	cmp	r3, #254	; 0xfe
 800047a:	d9f9      	bls.n	8000470 <delay+0x14>
	for(i=0;i<=x;i++)
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3301      	adds	r3, #1
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	429a      	cmp	r2, r3
 8000488:	d9ef      	bls.n	800046a <delay+0xe>
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <Clock_INIT>:

void Clock_INIT(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
	//set on the clock for PORTA
	RCC_GPIOA_CLK_EN();
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <Clock_INIT+0x30>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <Clock_INIT+0x30>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
	//set on the clock for PORTB
	RCC_GPIOB_CLK_EN();
 80004a4:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <Clock_INIT+0x30>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <Clock_INIT+0x30>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
	//set on the clock for AFIO
	RCC_AFIO_CLK_EN();
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <Clock_INIT+0x30>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <Clock_INIT+0x30>)
 80004b6:	f043 0301 	orr.w	r3, r3, #1
 80004ba:	6193      	str	r3, [r2, #24]
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000

080004c8 <EXTI_9>:

void EXTI_9 (void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	flag=1;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <EXTI_9+0x1c>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
	LCD_String("IRQ EXTI9 is happened");
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <EXTI_9+0x20>)
 80004d4:	f7ff ff92 	bl	80003fc <LCD_String>
	delay(1000);
 80004d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004dc:	f7ff ffbe 	bl	800045c <delay>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	2000001c 	.word	0x2000001c
 80004e8:	08000d98 	.word	0x08000d98

080004ec <main>:

int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
	Clock_INIT();
 80004f2:	f7ff ffcf 	bl	8000494 <Clock_INIT>
	LCD_init();
 80004f6:	f7ff fe57 	bl	80001a8 <LCD_init>

	EXTI_PinConfig_t Config;
	Config.EXTI_Pin = EXTI9_PB9;
 80004fa:	4a0c      	ldr	r2, [pc, #48]	; (800052c <main+0x40>)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000500:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Config.Trigger_case = EXTI_Trigger_Falling;
 8000504:	2301      	movs	r3, #1
 8000506:	743b      	strb	r3, [r7, #16]
	Config.P_IRQ_CALL = EXTI_9;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <main+0x44>)
 800050a:	617b      	str	r3, [r7, #20]
	Config.IRQ_EN = EXTI_IRQ_Enable ;
 800050c:	2301      	movs	r3, #1
 800050e:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&Config);
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f9ec 	bl	80008f0 <MCAL_EXTI_GPIO_Init>



	while (1)
	{
		if(flag==1)
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <main+0x48>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d1fb      	bne.n	8000518 <main+0x2c>
		{
			lcd_Clear();
 8000520:	f7ff ff0a 	bl	8000338 <lcd_Clear>
			flag=0;
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <main+0x48>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
		if(flag==1)
 800052a:	e7f5      	b.n	8000518 <main+0x2c>
 800052c:	08000db0 	.word	0x08000db0
 8000530:	080004c9 	.word	0x080004c9
 8000534:	2000001c 	.word	0x2000001c

08000538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800053c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490d      	ldr	r1, [pc, #52]	; (8000578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0a      	ldr	r4, [pc, #40]	; (8000584 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000566:	f000 fbe7 	bl	8000d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff ffbf 	bl	80004ec <main>

0800056e <LoopForever>:

LoopForever:
    b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   r0, =_estack
 8000570:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800057c:	08000dc4 	.word	0x08000dc4
  ldr r2, =_sbss
 8000580:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000584:	2000005c 	.word	0x2000005c

08000588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC1_2_IRQHandler>
	...

0800058c <Enable_NVIC>:
 *
 * ===============================================================
 */

void Enable_NVIC (uint16_t IRQ_Line)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
	switch(IRQ_Line)
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d854      	bhi.n	8000646 <Enable_NVIC+0xba>
 800059c:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <Enable_NVIC+0x18>)
 800059e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	080005e5 	.word	0x080005e5
 80005a8:	080005f3 	.word	0x080005f3
 80005ac:	08000601 	.word	0x08000601
 80005b0:	0800060f 	.word	0x0800060f
 80005b4:	0800061d 	.word	0x0800061d
 80005b8:	0800062b 	.word	0x0800062b
 80005bc:	0800062b 	.word	0x0800062b
 80005c0:	0800062b 	.word	0x0800062b
 80005c4:	0800062b 	.word	0x0800062b
 80005c8:	0800062b 	.word	0x0800062b
 80005cc:	08000639 	.word	0x08000639
 80005d0:	08000639 	.word	0x08000639
 80005d4:	08000639 	.word	0x08000639
 80005d8:	08000639 	.word	0x08000639
 80005dc:	08000639 	.word	0x08000639
 80005e0:	08000639 	.word	0x08000639
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable();
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <Enable_NVIC+0xc4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a19      	ldr	r2, [pc, #100]	; (8000650 <Enable_NVIC+0xc4>)
 80005ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ee:	6013      	str	r3, [r2, #0]
		break;
 80005f0:	e029      	b.n	8000646 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable();
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <Enable_NVIC+0xc4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <Enable_NVIC+0xc4>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005fc:	6013      	str	r3, [r2, #0]
		break;
 80005fe:	e022      	b.n	8000646 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable();
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <Enable_NVIC+0xc4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <Enable_NVIC+0xc4>)
 8000606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060a:	6013      	str	r3, [r2, #0]
		break;
 800060c:	e01b      	b.n	8000646 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable();
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <Enable_NVIC+0xc4>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <Enable_NVIC+0xc4>)
 8000614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000618:	6013      	str	r3, [r2, #0]
		break;
 800061a:	e014      	b.n	8000646 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable();
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <Enable_NVIC+0xc4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <Enable_NVIC+0xc4>)
 8000622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000626:	6013      	str	r3, [r2, #0]
		break;
 8000628:	e00d      	b.n	8000646 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_to_EXTI9_Enable();
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <Enable_NVIC+0xc4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a08      	ldr	r2, [pc, #32]	; (8000650 <Enable_NVIC+0xc4>)
 8000630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000634:	6013      	str	r3, [r2, #0]
		break;
 8000636:	e006      	b.n	8000646 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_to_EXTI15_Enable();
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <Enable_NVIC+0xc8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <Enable_NVIC+0xc8>)
 800063e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000642:	6013      	str	r3, [r2, #0]
		break;
 8000644:	bf00      	nop
	}
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000e104 	.word	0xe000e104

08000658 <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ_Line)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
	switch(IRQ_Line)
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d854      	bhi.n	8000712 <Disable_NVIC+0xba>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <Disable_NVIC+0x18>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080006b1 	.word	0x080006b1
 8000674:	080006bf 	.word	0x080006bf
 8000678:	080006cd 	.word	0x080006cd
 800067c:	080006db 	.word	0x080006db
 8000680:	080006e9 	.word	0x080006e9
 8000684:	080006f7 	.word	0x080006f7
 8000688:	080006f7 	.word	0x080006f7
 800068c:	080006f7 	.word	0x080006f7
 8000690:	080006f7 	.word	0x080006f7
 8000694:	080006f7 	.word	0x080006f7
 8000698:	08000705 	.word	0x08000705
 800069c:	08000705 	.word	0x08000705
 80006a0:	08000705 	.word	0x08000705
 80006a4:	08000705 	.word	0x08000705
 80006a8:	08000705 	.word	0x08000705
 80006ac:	08000705 	.word	0x08000705
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable();
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <Disable_NVIC+0xc4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <Disable_NVIC+0xc4>)
 80006b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ba:	6013      	str	r3, [r2, #0]
		break;
 80006bc:	e029      	b.n	8000712 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable();
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <Disable_NVIC+0xc4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <Disable_NVIC+0xc4>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6013      	str	r3, [r2, #0]
		break;
 80006ca:	e022      	b.n	8000712 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable();
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <Disable_NVIC+0xc4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <Disable_NVIC+0xc4>)
 80006d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d6:	6013      	str	r3, [r2, #0]
		break;
 80006d8:	e01b      	b.n	8000712 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable();
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <Disable_NVIC+0xc4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a0f      	ldr	r2, [pc, #60]	; (800071c <Disable_NVIC+0xc4>)
 80006e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e4:	6013      	str	r3, [r2, #0]
		break;
 80006e6:	e014      	b.n	8000712 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable();
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <Disable_NVIC+0xc4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0b      	ldr	r2, [pc, #44]	; (800071c <Disable_NVIC+0xc4>)
 80006ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006f2:	6013      	str	r3, [r2, #0]
		break;
 80006f4:	e00d      	b.n	8000712 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_to_EXTI9_Disable();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <Disable_NVIC+0xc4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <Disable_NVIC+0xc4>)
 80006fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000700:	6013      	str	r3, [r2, #0]
		break;
 8000702:	e006      	b.n	8000712 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_to_EXTI15_Disable();
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <Disable_NVIC+0xc8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a05      	ldr	r2, [pc, #20]	; (8000720 <Disable_NVIC+0xc8>)
 800070a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800070e:	6013      	str	r3, [r2, #0]
		break;
 8000710:	bf00      	nop
	}
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	e000e180 	.word	0xe000e180
 8000720:	e000e184 	.word	0xe000e184

08000724 <Configuration_EXTI>:




void Configuration_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	//1 GPIO_Init
	GPIO_Pinconfig_t pinconfig;
	pinconfig.pinNumber=EXTI_Config->EXTI_Pin.GPIO_Pin;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	891b      	ldrh	r3, [r3, #8]
 8000730:	813b      	strh	r3, [r7, #8]
	pinconfig.GPIO_MODE=GPIO_MODE_INPUT_AF;
 8000732:	2308      	movs	r3, #8
 8000734:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_PORT, &pinconfig);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f107 0208 	add.w	r2, r7, #8
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fa54 	bl	8000bee <MCAL_GPIO_Init>

	//2 INIT AFIO
	uint8_t posation   = EXTI_Config->EXTI_Pin.ETI_LineNumber / 4;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	089b      	lsrs	r3, r3, #2
 800074c:	b29b      	uxth	r3, r3
 800074e:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_shift  = (EXTI_Config->EXTI_Pin.ETI_LineNumber % 4) * 4;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f003 0303 	and.w	r3, r3, #3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	73bb      	strb	r3, [r7, #14]
	//Clear bits
	AFIO->EXTICR[posation] &=~(0XF<<bit_shift);
 8000760:	4a5d      	ldr	r2, [pc, #372]	; (80008d8 <Configuration_EXTI+0x1b4>)
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	3302      	adds	r3, #2
 8000766:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	210f      	movs	r1, #15
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	4618      	mov	r0, r3
 8000776:	4958      	ldr	r1, [pc, #352]	; (80008d8 <Configuration_EXTI+0x1b4>)
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	4002      	ands	r2, r0
 800077c:	3302      	adds	r3, #2
 800077e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Clear bits
	AFIO->EXTICR[posation] |= (AFIO_GPIO_MAP(EXTI_Config->EXTI_Pin.GPIO_PORT) << bit_shift);
 8000782:	4a55      	ldr	r2, [pc, #340]	; (80008d8 <Configuration_EXTI+0x1b4>)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3302      	adds	r3, #2
 8000788:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	4952      	ldr	r1, [pc, #328]	; (80008dc <Configuration_EXTI+0x1b8>)
 8000792:	428b      	cmp	r3, r1
 8000794:	d016      	beq.n	80007c4 <Configuration_EXTI+0xa0>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	4951      	ldr	r1, [pc, #324]	; (80008e0 <Configuration_EXTI+0x1bc>)
 800079c:	428b      	cmp	r3, r1
 800079e:	d00f      	beq.n	80007c0 <Configuration_EXTI+0x9c>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	494f      	ldr	r1, [pc, #316]	; (80008e4 <Configuration_EXTI+0x1c0>)
 80007a6:	428b      	cmp	r3, r1
 80007a8:	d008      	beq.n	80007bc <Configuration_EXTI+0x98>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	494b      	ldr	r1, [pc, #300]	; (80008dc <Configuration_EXTI+0x1b8>)
 80007b0:	428b      	cmp	r3, r1
 80007b2:	d101      	bne.n	80007b8 <Configuration_EXTI+0x94>
 80007b4:	2303      	movs	r3, #3
 80007b6:	e006      	b.n	80007c6 <Configuration_EXTI+0xa2>
 80007b8:	2300      	movs	r3, #0
 80007ba:	e004      	b.n	80007c6 <Configuration_EXTI+0xa2>
 80007bc:	2302      	movs	r3, #2
 80007be:	e002      	b.n	80007c6 <Configuration_EXTI+0xa2>
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <Configuration_EXTI+0xa2>
 80007c4:	2300      	movs	r3, #0
 80007c6:	7bb9      	ldrb	r1, [r7, #14]
 80007c8:	408b      	lsls	r3, r1
 80007ca:	4618      	mov	r0, r3
 80007cc:	4942      	ldr	r1, [pc, #264]	; (80008d8 <Configuration_EXTI+0x1b4>)
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4302      	orrs	r2, r0
 80007d2:	3302      	adds	r3, #2
 80007d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// 3 Set Rising and Falling
	//Clear bits
	EXTI->RTSR &=~(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 80007d8:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <Configuration_EXTI+0x1c4>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	8812      	ldrh	r2, [r2, #0]
 80007e0:	4611      	mov	r1, r2
 80007e2:	2201      	movs	r2, #1
 80007e4:	408a      	lsls	r2, r1
 80007e6:	43d2      	mvns	r2, r2
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a3f      	ldr	r2, [pc, #252]	; (80008e8 <Configuration_EXTI+0x1c4>)
 80007ec:	400b      	ands	r3, r1
 80007ee:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 80007f0:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <Configuration_EXTI+0x1c4>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	8812      	ldrh	r2, [r2, #0]
 80007f8:	4611      	mov	r1, r2
 80007fa:	2201      	movs	r2, #1
 80007fc:	408a      	lsls	r2, r1
 80007fe:	43d2      	mvns	r2, r2
 8000800:	4611      	mov	r1, r2
 8000802:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <Configuration_EXTI+0x1c4>)
 8000804:	400b      	ands	r3, r1
 8000806:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_case == EXTI_Trigger_Rising )
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7b1b      	ldrb	r3, [r3, #12]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d10b      	bne.n	8000828 <Configuration_EXTI+0x104>
	{
		EXTI->RTSR |=(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 8000810:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <Configuration_EXTI+0x1c4>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	8812      	ldrh	r2, [r2, #0]
 8000818:	4611      	mov	r1, r2
 800081a:	2201      	movs	r2, #1
 800081c:	408a      	lsls	r2, r1
 800081e:	4611      	mov	r1, r2
 8000820:	4a31      	ldr	r2, [pc, #196]	; (80008e8 <Configuration_EXTI+0x1c4>)
 8000822:	430b      	orrs	r3, r1
 8000824:	6093      	str	r3, [r2, #8]
 8000826:	e025      	b.n	8000874 <Configuration_EXTI+0x150>
	}
	else if ( EXTI_Config->Trigger_case == EXTI_Trigger_Falling )
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7b1b      	ldrb	r3, [r3, #12]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d10b      	bne.n	8000848 <Configuration_EXTI+0x124>
	{
		EXTI->FTSR |=(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <Configuration_EXTI+0x1c4>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	8812      	ldrh	r2, [r2, #0]
 8000838:	4611      	mov	r1, r2
 800083a:	2201      	movs	r2, #1
 800083c:	408a      	lsls	r2, r1
 800083e:	4611      	mov	r1, r2
 8000840:	4a29      	ldr	r2, [pc, #164]	; (80008e8 <Configuration_EXTI+0x1c4>)
 8000842:	430b      	orrs	r3, r1
 8000844:	60d3      	str	r3, [r2, #12]
 8000846:	e015      	b.n	8000874 <Configuration_EXTI+0x150>
	}
	else
	{
		EXTI->RTSR |=(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <Configuration_EXTI+0x1c4>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	8812      	ldrh	r2, [r2, #0]
 8000850:	4611      	mov	r1, r2
 8000852:	2201      	movs	r2, #1
 8000854:	408a      	lsls	r2, r1
 8000856:	4611      	mov	r1, r2
 8000858:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <Configuration_EXTI+0x1c4>)
 800085a:	430b      	orrs	r3, r1
 800085c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |=(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <Configuration_EXTI+0x1c4>)
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	8812      	ldrh	r2, [r2, #0]
 8000866:	4611      	mov	r1, r2
 8000868:	2201      	movs	r2, #1
 800086a:	408a      	lsls	r2, r1
 800086c:	4611      	mov	r1, r2
 800086e:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <Configuration_EXTI+0x1c4>)
 8000870:	430b      	orrs	r3, r1
 8000872:	60d3      	str	r3, [r2, #12]
	}

	//4 IRQ Function Coll
	GP_IRQ_CALL[EXTI_Config->EXTI_Pin.ETI_LineNumber] = EXTI_Config->P_IRQ_CALL ;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <Configuration_EXTI+0x1c8>)
 8000880:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//5 Enable VNIC and MASK

	if( EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7b5b      	ldrb	r3, [r3, #13]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d110      	bne.n	80008ae <Configuration_EXTI+0x18a>
	{
		EXTI->IMR |=( 1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <Configuration_EXTI+0x1c4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	8812      	ldrh	r2, [r2, #0]
 8000894:	4611      	mov	r1, r2
 8000896:	2201      	movs	r2, #1
 8000898:	408a      	lsls	r2, r1
 800089a:	4611      	mov	r1, r2
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <Configuration_EXTI+0x1c4>)
 800089e:	430b      	orrs	r3, r1
 80008a0:	6013      	str	r3, [r2, #0]
		Enable_NVIC( EXTI_Config->EXTI_Pin.ETI_LineNumber );
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe70 	bl	800058c <Enable_NVIC>
		EXTI->IMR &=~( 1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
		Disable_NVIC( EXTI_Config->EXTI_Pin.ETI_LineNumber );
	}


}
 80008ac:	e010      	b.n	80008d0 <Configuration_EXTI+0x1ac>
		EXTI->IMR &=~( 1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <Configuration_EXTI+0x1c4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	4611      	mov	r1, r2
 80008b8:	2201      	movs	r2, #1
 80008ba:	408a      	lsls	r2, r1
 80008bc:	43d2      	mvns	r2, r2
 80008be:	4611      	mov	r1, r2
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <Configuration_EXTI+0x1c4>)
 80008c2:	400b      	ands	r3, r1
 80008c4:	6013      	str	r3, [r2, #0]
		Disable_NVIC( EXTI_Config->EXTI_Pin.ETI_LineNumber );
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fec4 	bl	8000658 <Disable_NVIC>
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40010000 	.word	0x40010000
 80008dc:	40010800 	.word	0x40010800
 80008e0:	40010c00 	.word	0x40010c00
 80008e4:	40011000 	.word	0x40011000
 80008e8:	40010400 	.word	0x40010400
 80008ec:	20000020 	.word	0x20000020

080008f0 <MCAL_EXTI_GPIO_Init>:
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

	Configuration_EXTI(EXTI_Config);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff13 	bl	8000724 <Configuration_EXTI>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <EXTI0_IRQHandler+0x1c>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <EXTI0_IRQHandler+0x1c>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <EXTI0_IRQHandler+0x20>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4798      	blx	r3
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010400 	.word	0x40010400
 8000928:	20000020 	.word	0x20000020

0800092c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <EXTI1_IRQHandler+0x1c>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <EXTI1_IRQHandler+0x1c>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <EXTI1_IRQHandler+0x20>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	4798      	blx	r3
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40010400 	.word	0x40010400
 800094c:	20000020 	.word	0x20000020

08000950 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <EXTI2_IRQHandler+0x1c>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <EXTI2_IRQHandler+0x1c>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <EXTI2_IRQHandler+0x20>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4798      	blx	r3
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010400 	.word	0x40010400
 8000970:	20000020 	.word	0x20000020

08000974 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <EXTI3_IRQHandler+0x1c>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <EXTI3_IRQHandler+0x1c>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <EXTI3_IRQHandler+0x20>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4798      	blx	r3
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010400 	.word	0x40010400
 8000994:	20000020 	.word	0x20000020

08000998 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <EXTI4_IRQHandler+0x1c>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <EXTI4_IRQHandler+0x1c>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <EXTI4_IRQHandler+0x20>)
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	4798      	blx	r3
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40010400 	.word	0x40010400
 80009b8:	20000020 	.word	0x20000020

080009bc <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <EXTI9_5_IRQHandler+0x22>
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009d2:	f043 0320 	orr.w	r3, r3, #32
 80009d6:	6153      	str	r3, [r2, #20]
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <EXTI9_5_IRQHandler+0xa4>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d008      	beq.n	80009fc <EXTI9_5_IRQHandler+0x40>
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <EXTI9_5_IRQHandler+0xa4>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d008      	beq.n	8000a1a <EXTI9_5_IRQHandler+0x5e>
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a12:	6153      	str	r3, [r2, #20]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <EXTI9_5_IRQHandler+0xa4>)
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d008      	beq.n	8000a38 <EXTI9_5_IRQHandler+0x7c>
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <EXTI9_5_IRQHandler+0xa4>)
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d008      	beq.n	8000a56 <EXTI9_5_IRQHandler+0x9a>
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4e:	6153      	str	r3, [r2, #20]
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <EXTI9_5_IRQHandler+0xa4>)
 8000a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a54:	4798      	blx	r3
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010400 	.word	0x40010400
 8000a60:	20000020 	.word	0x20000020

08000a64 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 8000a68:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d008      	beq.n	8000a86 <EXTI15_10_IRQHandler+0x22>
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	4a29      	ldr	r2, [pc, #164]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7e:	6153      	str	r3, [r2, #20]
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a84:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d008      	beq.n	8000aa4 <EXTI15_10_IRQHandler+0x40>
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa2:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d008      	beq.n	8000ac2 <EXTI15_10_IRQHandler+0x5e>
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	4a1a      	ldr	r2, [pc, #104]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aba:	6153      	str	r3, [r2, #20]
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d008      	beq.n	8000ae0 <EXTI15_10_IRQHandler+0x7c>
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ad4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d008      	beq.n	8000afe <EXTI15_10_IRQHandler+0x9a>
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af6:	6153      	str	r3, [r2, #20]
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000afc:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d008      	beq.n	8000b1c <EXTI15_10_IRQHandler+0xb8>
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b14:	6153      	str	r3, [r2, #20]
 8000b16:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1a:	4798      	blx	r3
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40010400 	.word	0x40010400
 8000b24:	20000020 	.word	0x20000020

08000b28 <get_position>:
 */

#include"stm32_f103c6_GPIO.h"

uint8_t get_position(uint16_t pinNumber)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	2b80      	cmp	r3, #128	; 0x80
 8000b36:	d042      	beq.n	8000bbe <get_position+0x96>
 8000b38:	2b80      	cmp	r3, #128	; 0x80
 8000b3a:	dc11      	bgt.n	8000b60 <get_position+0x38>
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	d036      	beq.n	8000bae <get_position+0x86>
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	dc06      	bgt.n	8000b52 <get_position+0x2a>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d02e      	beq.n	8000ba6 <get_position+0x7e>
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	d02e      	beq.n	8000baa <get_position+0x82>
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d028      	beq.n	8000ba2 <get_position+0x7a>
 8000b50:	e047      	b.n	8000be2 <get_position+0xba>
 8000b52:	2b20      	cmp	r3, #32
 8000b54:	d02f      	beq.n	8000bb6 <get_position+0x8e>
 8000b56:	2b40      	cmp	r3, #64	; 0x40
 8000b58:	d02f      	beq.n	8000bba <get_position+0x92>
 8000b5a:	2b10      	cmp	r3, #16
 8000b5c:	d029      	beq.n	8000bb2 <get_position+0x8a>
 8000b5e:	e040      	b.n	8000be2 <get_position+0xba>
 8000b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b64:	d033      	beq.n	8000bce <get_position+0xa6>
 8000b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b6a:	dc09      	bgt.n	8000b80 <get_position+0x58>
 8000b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b70:	d029      	beq.n	8000bc6 <get_position+0x9e>
 8000b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b76:	d028      	beq.n	8000bca <get_position+0xa2>
 8000b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b7c:	d021      	beq.n	8000bc2 <get_position+0x9a>
 8000b7e:	e030      	b.n	8000be2 <get_position+0xba>
 8000b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b84:	d027      	beq.n	8000bd6 <get_position+0xae>
 8000b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8a:	dc03      	bgt.n	8000b94 <get_position+0x6c>
 8000b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b90:	d01f      	beq.n	8000bd2 <get_position+0xaa>
 8000b92:	e026      	b.n	8000be2 <get_position+0xba>
 8000b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b98:	d01f      	beq.n	8000bda <get_position+0xb2>
 8000b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b9e:	d01e      	beq.n	8000bde <get_position+0xb6>
 8000ba0:	e01f      	b.n	8000be2 <get_position+0xba>
	{
	case GPIO_PIN_0 :
		return 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e01e      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	e01c      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 8000baa:	2308      	movs	r3, #8
 8000bac:	e01a      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	e018      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	e016      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 8000bb6:	2314      	movs	r3, #20
 8000bb8:	e014      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 8000bba:	2318      	movs	r3, #24
 8000bbc:	e012      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 8000bbe:	231c      	movs	r3, #28
 8000bc0:	e010      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_8 :
		return 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e00e      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	e00c      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 8000bca:	2308      	movs	r3, #8
 8000bcc:	e00a      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 8000bce:	230c      	movs	r3, #12
 8000bd0:	e008      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	e006      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 8000bd6:	2314      	movs	r3, #20
 8000bd8:	e004      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 8000bda:	2318      	movs	r3, #24
 8000bdc:	e002      	b.n	8000be4 <get_position+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 8000bde:	231c      	movs	r3, #28
 8000be0:	e000      	b.n	8000be4 <get_position+0xbc>
		break;
	default:
		return 0;
 8000be2:	2300      	movs	r3, #0
	}
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <MCAL_GPIO_Init>:
* @param [in] 		-configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 8000bee:	b590      	push	{r4, r7, lr}
 8000bf0:	b085      	sub	sp, #20
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	2bff      	cmp	r3, #255	; 0xff
 8000c06:	d801      	bhi.n	8000c0c <MCAL_GPIO_Init+0x1e>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	e001      	b.n	8000c10 <MCAL_GPIO_Init+0x22>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff86 	bl	8000b28 <get_position>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	230f      	movs	r3, #15
 8000c22:	4093      	lsls	r3, r2
 8000c24:	43da      	mvns	r2, r3
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	789b      	ldrb	r3, [r3, #2]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d00b      	beq.n	8000c50 <MCAL_GPIO_Init+0x62>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	2b06      	cmp	r3, #6
 8000c3e:	d007      	beq.n	8000c50 <MCAL_GPIO_Init+0x62>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	789b      	ldrb	r3, [r3, #2]
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	d003      	beq.n	8000c50 <MCAL_GPIO_Init+0x62>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d10e      	bne.n	8000c6e <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	789b      	ldrb	r3, [r3, #2]
 8000c54:	3b04      	subs	r3, #4
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	b25a      	sxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	78db      	ldrb	r3, [r3, #3]
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e02c      	b.n	8000cc8 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	789b      	ldrb	r3, [r3, #2]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d003      	beq.n	8000c7e <MCAL_GPIO_Init+0x90>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	789b      	ldrb	r3, [r3, #2]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d107      	bne.n	8000c8e <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	789b      	ldrb	r3, [r3, #2]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e01c      	b.n	8000cc8 <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	789b      	ldrb	r3, [r3, #2]
 8000c92:	2b08      	cmp	r3, #8
 8000c94:	d102      	bne.n	8000c9c <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 8000c96:	2304      	movs	r3, #4
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e015      	b.n	8000cc8 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	789b      	ldrb	r3, [r3, #2]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d107      	bne.n	8000cb8 <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	8812      	ldrh	r2, [r2, #0]
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	e007      	b.n	8000cc8 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	8812      	ldrh	r2, [r2, #0]
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 8000cc8:	7bfc      	ldrb	r4, [r7, #15]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff2a 	bl	8000b28 <get_position>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	fa04 f203 	lsl.w	r2, r4, r3
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd90      	pop	{r4, r7, pc}

08000cec <MCAL_GPIO_WritePin>:
* @param [in] 		-value: pin value
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber ,uint8_t value)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	707b      	strb	r3, [r7, #1]
	if (value != GPIO_PIN_RESET)
 8000cfc:	787b      	ldrb	r3, [r7, #1]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <MCAL_GPIO_WritePin+0x1e>
		 Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit
		 */
		GPIOx->BSRR= (uint32_t) pinNumber;
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	611a      	str	r2, [r3, #16]
		0: No action on the corresponding ODRx bit
		1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR= (uint32_t) pinNumber;
	}
}
 8000d08:	e002      	b.n	8000d10 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR= (uint32_t) pinNumber;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	615a      	str	r2, [r3, #20]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <MCAL_GPIO_WritePort>:
* @param [in] 		-value: port value
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx ,uint16_t value)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	460b      	mov	r3, r1
 8000d24:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR= (uint32_t) value;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	60da      	str	r2, [r3, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <__libc_init_array>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	2500      	movs	r5, #0
 8000d3c:	4e0c      	ldr	r6, [pc, #48]	; (8000d70 <__libc_init_array+0x38>)
 8000d3e:	4c0d      	ldr	r4, [pc, #52]	; (8000d74 <__libc_init_array+0x3c>)
 8000d40:	1ba4      	subs	r4, r4, r6
 8000d42:	10a4      	asrs	r4, r4, #2
 8000d44:	42a5      	cmp	r5, r4
 8000d46:	d109      	bne.n	8000d5c <__libc_init_array+0x24>
 8000d48:	f000 f81a 	bl	8000d80 <_init>
 8000d4c:	2500      	movs	r5, #0
 8000d4e:	4e0a      	ldr	r6, [pc, #40]	; (8000d78 <__libc_init_array+0x40>)
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <__libc_init_array+0x44>)
 8000d52:	1ba4      	subs	r4, r4, r6
 8000d54:	10a4      	asrs	r4, r4, #2
 8000d56:	42a5      	cmp	r5, r4
 8000d58:	d105      	bne.n	8000d66 <__libc_init_array+0x2e>
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
 8000d5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d60:	4798      	blx	r3
 8000d62:	3501      	adds	r5, #1
 8000d64:	e7ee      	b.n	8000d44 <__libc_init_array+0xc>
 8000d66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d6a:	4798      	blx	r3
 8000d6c:	3501      	adds	r5, #1
 8000d6e:	e7f2      	b.n	8000d56 <__libc_init_array+0x1e>
 8000d70:	08000dbc 	.word	0x08000dbc
 8000d74:	08000dbc 	.word	0x08000dbc
 8000d78:	08000dbc 	.word	0x08000dbc
 8000d7c:	08000dc0 	.word	0x08000dc0

08000d80 <_init>:
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d82:	bf00      	nop
 8000d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d86:	bc08      	pop	{r3}
 8000d88:	469e      	mov	lr, r3
 8000d8a:	4770      	bx	lr

08000d8c <_fini>:
 8000d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8e:	bf00      	nop
 8000d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d92:	bc08      	pop	{r3}
 8000d94:	469e      	mov	lr, r3
 8000d96:	4770      	bx	lr
