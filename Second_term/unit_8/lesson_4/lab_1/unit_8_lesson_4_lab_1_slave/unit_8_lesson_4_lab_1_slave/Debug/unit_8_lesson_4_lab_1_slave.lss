
unit_8_lesson_4_lab_1_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065f  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  00001403  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000148a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_slave_init>:
#define SCK		7

void SPI_slave_init (void)
{
	// Set MISO to output
	DDRB |=(1<<MISO);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 bb       	out	0x17, r24	; 23
	//Set MOSI , SS , and SCK input
	DDRB &=~(1<<SS) & ~(1<<SCK) & ~(1<<MOSI) ;
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8f 74       	andi	r24, 0x4F	; 79
  76:	87 bb       	out	0x17, r24	; 23
	// Enable SPI
	SPCR |= (1<<SPE);
  78:	8d b1       	in	r24, 0x0d	; 13
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	8d b9       	out	0x0d, r24	; 13
  7e:	08 95       	ret

00000080 <SPI_slave_ReceiveData>:
}

unsigned char SPI_slave_ReceiveData(unsigned char DATA)
{
	SPDR = DATA ; // send data to master
  80:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <SPI_slave_ReceiveData+0x2>
	return SPDR ;
  86:	8f b1       	in	r24, 0x0f	; 15
}
  88:	08 95       	ret

0000008a <main>:

int main(void)
{
    DDRA = 0XFF ;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a bb       	out	0x1a, r24	; 26
	unsigned char DATA  ;
	SPI_slave_init();
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_slave_init>
	while(1)
	{
		for(DATA=255 ; DATA >0 ; DATA--)
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	0e c0       	rjmp	.+28     	; 0xb2 <main+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f e3       	ldi	r18, 0x3F	; 63
  98:	8d e0       	ldi	r24, 0x0D	; 13
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x12>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x1c>
  a6:	00 00       	nop
		{
			_delay_ms(1000);
			PORTA= SPI_slave_ReceiveData(DATA);
  a8:	8c 2f       	mov	r24, r28
  aa:	0e 94 40 00 	call	0x80	; 0x80 <SPI_slave_ReceiveData>
  ae:	8b bb       	out	0x1b, r24	; 27
    DDRA = 0XFF ;
	unsigned char DATA  ;
	SPI_slave_init();
	while(1)
	{
		for(DATA=255 ; DATA >0 ; DATA--)
  b0:	c1 50       	subi	r28, 0x01	; 1
  b2:	c1 11       	cpse	r28, r1
  b4:	f0 cf       	rjmp	.-32     	; 0x96 <main+0xc>
  b6:	ed cf       	rjmp	.-38     	; 0x92 <main+0x8>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
