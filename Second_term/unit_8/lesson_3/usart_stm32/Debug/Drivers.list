
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b2c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000c5c  08000c5c  00010c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c64  08000c64  00010c6c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c64  08000c64  00010c6c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c64  08000c6c  00010c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c64  08000c64  00010c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c68  08000c68  00010c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000c6c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000c6c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010c6c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004103  00000000  00000000  00010c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a2d  00000000  00000000  00014d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000af4  00000000  00000000  000157c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e0  00000000  00000000  000162c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  000164a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000dbe  00000000  00000000  00016628  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000020cb  00000000  00000000  000173e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009fba  00000000  00000000  000194b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002346b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005d8  00000000  00000000  000234e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c44 	.word	0x08000c44

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c44 	.word	0x08000c44

08000170 <Clock_INIT>:

unsigned char DATA  ;
unsigned char DATA2[100] ="s#";
uint16_t DATA1 = 300;
void Clock_INIT(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//set on the clock for PORTA
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <Clock_INIT+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Clock_INIT+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//set on the clock for PORTB
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <Clock_INIT+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <Clock_INIT+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	//set on the clock for AFIO
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <Clock_INIT+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <Clock_INIT+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <USART1_IRQ_Call>:
 void USART1_IRQ_Call (void)
 {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	MCAL_USART_Receive_String(USART1, &DATA, Enable);
 80001a8:	2200      	movs	r2, #0
 80001aa:	4905      	ldr	r1, [pc, #20]	; (80001c0 <USART1_IRQ_Call+0x1c>)
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <USART1_IRQ_Call+0x20>)
 80001ae:	f000 fc0b 	bl	80009c8 <MCAL_USART_Receive_String>
	MCAL_USART_Send_String(USART1, &DATA, Enable);
 80001b2:	2200      	movs	r2, #0
 80001b4:	4902      	ldr	r1, [pc, #8]	; (80001c0 <USART1_IRQ_Call+0x1c>)
 80001b6:	4803      	ldr	r0, [pc, #12]	; (80001c4 <USART1_IRQ_Call+0x20>)
 80001b8:	f000 fbae 	bl	8000918 <MCAL_USART_Send_String>
 }
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	40013800 	.word	0x40013800

080001c8 <main>:

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	Clock_INIT();
 80001ce:	f7ff ffcf 	bl	8000170 <Clock_INIT>

	USART_config_t Config;
	Config.BAUDRATE=USART_BAUDRATE_115200 ;
 80001d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001d6:	607b      	str	r3, [r7, #4]
	Config.HWFLOWCTL=USART_HWFLOWCTL_Disable;
 80001d8:	2300      	movs	r3, #0
 80001da:	727b      	strb	r3, [r7, #9]
	Config.IRQ_EN=USART_IRQ_ENABLE_RXNE;
 80001dc:	2320      	movs	r3, #32
 80001de:	72bb      	strb	r3, [r7, #10]
	Config.MODE=USART_MODE_TX_RX;
 80001e0:	230c      	movs	r3, #12
 80001e2:	703b      	strb	r3, [r7, #0]
	Config.NUM_DATA_BIT=USART_NUM_DATA_BIT_8;
 80001e4:	2300      	movs	r3, #0
 80001e6:	707b      	strb	r3, [r7, #1]
	Config.NUM_STOP_BIT=USART_NUM_STOP_BIT_1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	70bb      	strb	r3, [r7, #2]
	Config.PARITY=USART_PARITY_Disable;
 80001ec:	2300      	movs	r3, #0
 80001ee:	723b      	strb	r3, [r7, #8]
	Config.P_IRQ_CALL=USART1_IRQ_Call;
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <main+0x40>)
 80001f2:	60fb      	str	r3, [r7, #12]
	MCAL_USART_Init(USART1, &Config);
 80001f4:	463b      	mov	r3, r7
 80001f6:	4619      	mov	r1, r3
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <main+0x44>)
 80001fa:	f000 fa65 	bl	80006c8 <MCAL_USART_Init>
	MCAL_USART_Set_Pin(USART1);
 80001fe:	4803      	ldr	r0, [pc, #12]	; (800020c <main+0x44>)
 8000200:	f000 fb26 	bl	8000850 <MCAL_USART_Set_Pin>



	while (1)
 8000204:	e7fe      	b.n	8000204 <main+0x3c>
 8000206:	bf00      	nop
 8000208:	080001a5 	.word	0x080001a5
 800020c:	40013800 	.word	0x40013800

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 fcdd 	bl	8000bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ffc1 	bl	80001c8 <main>

08000246 <LoopForever>:

LoopForever:
    b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	08000c6c 	.word	0x08000c6c
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	20000068 	.word	0x20000068

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>
	...

08000264 <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <EXTI0_IRQHandler+0x1c>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a04      	ldr	r2, [pc, #16]	; (8000280 <EXTI0_IRQHandler+0x1c>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <EXTI0_IRQHandler+0x20>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4798      	blx	r3
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40010400 	.word	0x40010400
 8000284:	2000002c 	.word	0x2000002c

08000288 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <EXTI1_IRQHandler+0x1c>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <EXTI1_IRQHandler+0x1c>)
 8000292:	f043 0302 	orr.w	r3, r3, #2
 8000296:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <EXTI1_IRQHandler+0x20>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4798      	blx	r3
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40010400 	.word	0x40010400
 80002a8:	2000002c 	.word	0x2000002c

080002ac <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI2_IRQHandler+0x1c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <EXTI2_IRQHandler+0x1c>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI2_IRQHandler+0x20>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4798      	blx	r3
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400
 80002cc:	2000002c 	.word	0x2000002c

080002d0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI3_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI3_IRQHandler+0x1c>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI3_IRQHandler+0x20>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4798      	blx	r3
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	2000002c 	.word	0x2000002c

080002f4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI4_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI4_IRQHandler+0x1c>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI4_IRQHandler+0x20>)
 8000306:	691b      	ldr	r3, [r3, #16]
 8000308:	4798      	blx	r3
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	2000002c 	.word	0x2000002c

08000318 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	2b00      	cmp	r3, #0
 8000326:	d008      	beq.n	800033a <EXTI9_5_IRQHandler+0x22>
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a22      	ldr	r2, [pc, #136]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6153      	str	r3, [r2, #20]
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <EXTI9_5_IRQHandler+0xa4>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 800033a:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000342:	2b00      	cmp	r3, #0
 8000344:	d008      	beq.n	8000358 <EXTI9_5_IRQHandler+0x40>
 8000346:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a1b      	ldr	r2, [pc, #108]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800034c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <EXTI9_5_IRQHandler+0xa4>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000360:	2b00      	cmp	r3, #0
 8000362:	d008      	beq.n	8000376 <EXTI9_5_IRQHandler+0x5e>
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a13      	ldr	r2, [pc, #76]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036e:	6153      	str	r3, [r2, #20]
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <EXTI9_5_IRQHandler+0xa4>)
 8000372:	69db      	ldr	r3, [r3, #28]
 8000374:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800037e:	2b00      	cmp	r3, #0
 8000380:	d008      	beq.n	8000394 <EXTI9_5_IRQHandler+0x7c>
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <EXTI9_5_IRQHandler+0xa4>)
 8000390:	6a1b      	ldr	r3, [r3, #32]
 8000392:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800039c:	2b00      	cmp	r3, #0
 800039e:	d008      	beq.n	80003b2 <EXTI9_5_IRQHandler+0x9a>
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003aa:	6153      	str	r3, [r2, #20]
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <EXTI9_5_IRQHandler+0xa4>)
 80003ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b0:	4798      	blx	r3
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010400 	.word	0x40010400
 80003bc:	2000002c 	.word	0x2000002c

080003c0 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d008      	beq.n	80003e2 <EXTI15_10_IRQHandler+0x22>
 80003d0:	4b2a      	ldr	r3, [pc, #168]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	4a29      	ldr	r2, [pc, #164]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003da:	6153      	str	r3, [r2, #20]
 80003dc:	4b28      	ldr	r3, [pc, #160]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 80003de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e0:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 80003e2:	4b26      	ldr	r3, [pc, #152]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d008      	beq.n	8000400 <EXTI15_10_IRQHandler+0x40>
 80003ee:	4b23      	ldr	r3, [pc, #140]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a22      	ldr	r2, [pc, #136]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 80003f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 80003fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fe:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d008      	beq.n	800041e <EXTI15_10_IRQHandler+0x5e>
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	4a1a      	ldr	r2, [pc, #104]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 8000412:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000416:	6153      	str	r3, [r2, #20]
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000426:	2b00      	cmp	r3, #0
 8000428:	d008      	beq.n	800043c <EXTI15_10_IRQHandler+0x7c>
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a13      	ldr	r2, [pc, #76]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 8000430:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 8000438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043a:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000444:	2b00      	cmp	r3, #0
 8000446:	d008      	beq.n	800045a <EXTI15_10_IRQHandler+0x9a>
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a0b      	ldr	r2, [pc, #44]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800044e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000452:	6153      	str	r3, [r2, #20]
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 8000456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000458:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <EXTI15_10_IRQHandler+0xb8>
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a04      	ldr	r2, [pc, #16]	; (800047c <EXTI15_10_IRQHandler+0xbc>)
 800046c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b03      	ldr	r3, [pc, #12]	; (8000480 <EXTI15_10_IRQHandler+0xc0>)
 8000474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000476:	4798      	blx	r3
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40010400 	.word	0x40010400
 8000480:	2000002c 	.word	0x2000002c

08000484 <get_position>:

#include"stm32_f103c6_GPIO.h"


uint8_t get_position(uint16_t pinNumber)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	2b80      	cmp	r3, #128	; 0x80
 8000492:	d042      	beq.n	800051a <get_position+0x96>
 8000494:	2b80      	cmp	r3, #128	; 0x80
 8000496:	dc11      	bgt.n	80004bc <get_position+0x38>
 8000498:	2b08      	cmp	r3, #8
 800049a:	d036      	beq.n	800050a <get_position+0x86>
 800049c:	2b08      	cmp	r3, #8
 800049e:	dc06      	bgt.n	80004ae <get_position+0x2a>
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	d02e      	beq.n	8000502 <get_position+0x7e>
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	d02e      	beq.n	8000506 <get_position+0x82>
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d028      	beq.n	80004fe <get_position+0x7a>
 80004ac:	e047      	b.n	800053e <get_position+0xba>
 80004ae:	2b20      	cmp	r3, #32
 80004b0:	d02f      	beq.n	8000512 <get_position+0x8e>
 80004b2:	2b40      	cmp	r3, #64	; 0x40
 80004b4:	d02f      	beq.n	8000516 <get_position+0x92>
 80004b6:	2b10      	cmp	r3, #16
 80004b8:	d029      	beq.n	800050e <get_position+0x8a>
 80004ba:	e040      	b.n	800053e <get_position+0xba>
 80004bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004c0:	d033      	beq.n	800052a <get_position+0xa6>
 80004c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004c6:	dc09      	bgt.n	80004dc <get_position+0x58>
 80004c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004cc:	d029      	beq.n	8000522 <get_position+0x9e>
 80004ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004d2:	d028      	beq.n	8000526 <get_position+0xa2>
 80004d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004d8:	d021      	beq.n	800051e <get_position+0x9a>
 80004da:	e030      	b.n	800053e <get_position+0xba>
 80004dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e0:	d027      	beq.n	8000532 <get_position+0xae>
 80004e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e6:	dc03      	bgt.n	80004f0 <get_position+0x6c>
 80004e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004ec:	d01f      	beq.n	800052e <get_position+0xaa>
 80004ee:	e026      	b.n	800053e <get_position+0xba>
 80004f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004f4:	d01f      	beq.n	8000536 <get_position+0xb2>
 80004f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004fa:	d01e      	beq.n	800053a <get_position+0xb6>
 80004fc:	e01f      	b.n	800053e <get_position+0xba>
	{
	case GPIO_PIN_0 :
		return 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	e01e      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 8000502:	2304      	movs	r3, #4
 8000504:	e01c      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 8000506:	2308      	movs	r3, #8
 8000508:	e01a      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 800050a:	230c      	movs	r3, #12
 800050c:	e018      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 800050e:	2310      	movs	r3, #16
 8000510:	e016      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 8000512:	2314      	movs	r3, #20
 8000514:	e014      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 8000516:	2318      	movs	r3, #24
 8000518:	e012      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 800051a:	231c      	movs	r3, #28
 800051c:	e010      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_8 :
		return 0;
 800051e:	2300      	movs	r3, #0
 8000520:	e00e      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000522:	2304      	movs	r3, #4
 8000524:	e00c      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 8000526:	2308      	movs	r3, #8
 8000528:	e00a      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 800052a:	230c      	movs	r3, #12
 800052c:	e008      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 800052e:	2310      	movs	r3, #16
 8000530:	e006      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 8000532:	2314      	movs	r3, #20
 8000534:	e004      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 8000536:	2318      	movs	r3, #24
 8000538:	e002      	b.n	8000540 <get_position+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 800053a:	231c      	movs	r3, #28
 800053c:	e000      	b.n	8000540 <get_position+0xbc>
		break;
	default:
		return 0;
 800053e:	2300      	movs	r3, #0
	}
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <MCAL_GPIO_Init>:
* @param [in] 		-pinconfig: configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 800054a:	b590      	push	{r4, r7, lr}
 800054c:	b085      	sub	sp, #20
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	2bff      	cmp	r3, #255	; 0xff
 8000562:	d801      	bhi.n	8000568 <MCAL_GPIO_Init+0x1e>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	e001      	b.n	800056c <MCAL_GPIO_Init+0x22>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3304      	adds	r3, #4
 800056c:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff86 	bl	8000484 <get_position>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	230f      	movs	r3, #15
 800057e:	4093      	lsls	r3, r2
 8000580:	43da      	mvns	r2, r3
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	401a      	ands	r2, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	789b      	ldrb	r3, [r3, #2]
 8000590:	2b07      	cmp	r3, #7
 8000592:	d00b      	beq.n	80005ac <MCAL_GPIO_Init+0x62>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	2b06      	cmp	r3, #6
 800059a:	d007      	beq.n	80005ac <MCAL_GPIO_Init+0x62>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	789b      	ldrb	r3, [r3, #2]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d003      	beq.n	80005ac <MCAL_GPIO_Init+0x62>
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d10e      	bne.n	80005ca <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	3b04      	subs	r3, #4
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	b25a      	sxtb	r2, r3
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	78db      	ldrb	r3, [r3, #3]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e02c      	b.n	8000624 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d003      	beq.n	80005da <MCAL_GPIO_Init+0x90>
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d107      	bne.n	80005ea <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	789b      	ldrb	r3, [r3, #2]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 030f 	and.w	r3, r3, #15
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	e01c      	b.n	8000624 <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	2b08      	cmp	r3, #8
 80005f0:	d102      	bne.n	80005f8 <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 80005f2:	2304      	movs	r3, #4
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	e015      	b.n	8000624 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 80005f8:	2308      	movs	r3, #8
 80005fa:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	789b      	ldrb	r3, [r3, #2]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d107      	bne.n	8000614 <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	8812      	ldrh	r2, [r2, #0]
 800060c:	431a      	orrs	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	e007      	b.n	8000624 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	8812      	ldrh	r2, [r2, #0]
 800061c:	43d2      	mvns	r2, r2
 800061e:	401a      	ands	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 8000624:	7bfc      	ldrb	r4, [r7, #15]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff2a 	bl	8000484 <get_position>
 8000630:	4603      	mov	r3, r0
 8000632:	fa04 f203 	lsl.w	r2, r4, r3
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	431a      	orrs	r2, r3
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <MCAL_Get_SYSCLC_FREQ>:
110: HCLK divided by 8
111: HCLK divided by 16
*/

uint32_t MCAL_Get_SYSCLC_FREQ(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	//00: HSI oscillator used as system clock
	//01: HSE oscillator used as system clock
	//10: PLL used as system clock
	//11: Not applicable

	switch(RCC->CFGR >> 2)
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MCAL_Get_SYSCLC_FREQ+0x24>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <MCAL_Get_SYSCLC_FREQ+0x14>
 8000656:	2b01      	cmp	r3, #1
 8000658:	d002      	beq.n	8000660 <MCAL_Get_SYSCLC_FREQ+0x18>
 800065a:	e003      	b.n	8000664 <MCAL_Get_SYSCLC_FREQ+0x1c>
	{
	case 0:
		return HSI_oscillator_clock ;
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <MCAL_Get_SYSCLC_FREQ+0x28>)
 800065e:	e001      	b.n	8000664 <MCAL_Get_SYSCLC_FREQ+0x1c>
		break;
	case 1:
		return HSE_oscillator_clock ;
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <MCAL_Get_SYSCLC_FREQ+0x2c>)
 8000662:	e7ff      	b.n	8000664 <MCAL_Get_SYSCLC_FREQ+0x1c>
		break;
	}
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000
 8000670:	007a1200 	.word	0x007a1200
 8000674:	00f42400 	.word	0x00f42400

08000678 <MCAL_Get_PCLC1_FREQ>:
{
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return ( MCAL_Get_SYSCLC_FREQ() >> HPRE_table[ ( RCC->CFGR >> 4 ) & 0XF ] ) ;
}
uint32_t MCAL_Get_PCLC1_FREQ(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return ( MCAL_Get_SYSCLC_FREQ() >> PPRE1_table[ ( RCC->CFGR >> 8 ) & 0X11 ] ) ;
 800067c:	f7ff ffe4 	bl	8000648 <MCAL_Get_SYSCLC_FREQ>
 8000680:	4601      	mov	r1, r0
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <MCAL_Get_PCLC1_FREQ+0x20>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	f003 0311 	and.w	r3, r3, #17
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <MCAL_Get_PCLC1_FREQ+0x24>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000694:	4618      	mov	r0, r3
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	08000c5c 	.word	0x08000c5c

080006a0 <MCAL_Get_PCLC2_FREQ>:
uint32_t MCAL_Get_PCLC2_FREQ(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return ( MCAL_Get_SYSCLC_FREQ() >> PPRE1_table[ ( RCC->CFGR >> 11 ) & 0X11 ] ) ;
 80006a4:	f7ff ffd0 	bl	8000648 <MCAL_Get_SYSCLC_FREQ>
 80006a8:	4601      	mov	r1, r0
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <MCAL_Get_PCLC2_FREQ+0x20>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	0adb      	lsrs	r3, r3, #11
 80006b0:	f003 0311 	and.w	r3, r3, #17
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <MCAL_Get_PCLC2_FREQ+0x24>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	08000c5c 	.word	0x08000c5c

080006c8 <MCAL_USART_Init>:
* @param [in] 		-USARTx:  specified USARTx x=[ 1 : 3 ]
* @retval 			-none
* Note				-stm32f103c6 has USART (1---3 )
*/
void MCAL_USART_Init( USART_TypeDef* USARTx , USART_config_t* USART_Config )
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	uint32_t PCLK , BRR ;

	// Enable clock for usartx
	 if ( USARTx == USART1 )
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a58      	ldr	r2, [pc, #352]	; (8000838 <MCAL_USART_Init+0x170>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d109      	bne.n	80006ee <MCAL_USART_Init+0x26>
	 {
		 g_USART_Config[0] = USART_Config ;// configuration the USART1
 80006da:	4a58      	ldr	r2, [pc, #352]	; (800083c <MCAL_USART_Init+0x174>)
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	6013      	str	r3, [r2, #0]
		 RCC_USART1_CLK_Enable() ;
 80006e0:	4b57      	ldr	r3, [pc, #348]	; (8000840 <MCAL_USART_Init+0x178>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a56      	ldr	r2, [pc, #344]	; (8000840 <MCAL_USART_Init+0x178>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	e01a      	b.n	8000724 <MCAL_USART_Init+0x5c>
	 }
	 else if ( USARTx == USART2 )
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a54      	ldr	r2, [pc, #336]	; (8000844 <MCAL_USART_Init+0x17c>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d109      	bne.n	800070a <MCAL_USART_Init+0x42>
	 {
		 g_USART_Config[1] = USART_Config ;// configuration the USART2
 80006f6:	4a51      	ldr	r2, [pc, #324]	; (800083c <MCAL_USART_Init+0x174>)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	6053      	str	r3, [r2, #4]
		 RCC_USART2_CLK_Enable() ;
 80006fc:	4b50      	ldr	r3, [pc, #320]	; (8000840 <MCAL_USART_Init+0x178>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4a4f      	ldr	r2, [pc, #316]	; (8000840 <MCAL_USART_Init+0x178>)
 8000702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000706:	61d3      	str	r3, [r2, #28]
 8000708:	e00c      	b.n	8000724 <MCAL_USART_Init+0x5c>
	 }
	 else if ( USARTx == USART3 )
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a4e      	ldr	r2, [pc, #312]	; (8000848 <MCAL_USART_Init+0x180>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d108      	bne.n	8000724 <MCAL_USART_Init+0x5c>
	 {
		 g_USART_Config[2] = USART_Config ;// configuration the USART3
 8000712:	4a4a      	ldr	r2, [pc, #296]	; (800083c <MCAL_USART_Init+0x174>)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	6093      	str	r3, [r2, #8]
		 RCC_USART3_CLK_Enable() ;
 8000718:	4b49      	ldr	r3, [pc, #292]	; (8000840 <MCAL_USART_Init+0x178>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	4a48      	ldr	r2, [pc, #288]	; (8000840 <MCAL_USART_Init+0x178>)
 800071e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000722:	61d3      	str	r3, [r2, #28]
	 }

	 // Enable USARTx
	 USARTx->CR1 |= 1 << 13 ;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	60da      	str	r2, [r3, #12]

	 //Enable mode
	 USARTx->CR1 |= USART_Config->MODE ;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	60da      	str	r2, [r3, #12]

	 // number of data bit
	 USARTx->CR1 |= USART_Config->NUM_DATA_BIT ;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	7852      	ldrb	r2, [r2, #1]
 8000746:	431a      	orrs	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60da      	str	r2, [r3, #12]

	 //set parity
	 USARTx->CR1 |= USART_Config->PARITY ;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	7a12      	ldrb	r2, [r2, #8]
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	60da      	str	r2, [r3, #12]

	 // number of  stop bit
	 USARTx->CR2 |= USART_Config->NUM_STOP_BIT ;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	683a      	ldr	r2, [r7, #0]
 8000760:	7892      	ldrb	r2, [r2, #2]
 8000762:	431a      	orrs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	611a      	str	r2, [r3, #16]

	 // hardware flow control
	 USARTx->CR3 |= USART_Config->HWFLOWCTL ;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	7a52      	ldrb	r2, [r2, #9]
 8000770:	431a      	orrs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	615a      	str	r2, [r3, #20]

	 // baudrate
	 if ( USARTx == USART1 )
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a2f      	ldr	r2, [pc, #188]	; (8000838 <MCAL_USART_Init+0x170>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d103      	bne.n	8000786 <MCAL_USART_Init+0xbe>
	 {
		 PCLK = MCAL_Get_PCLC2_FREQ() ;
 800077e:	f7ff ff8f 	bl	80006a0 <MCAL_Get_PCLC2_FREQ>
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	e002      	b.n	800078c <MCAL_USART_Init+0xc4>
	 }
	 else
	 {
		 PCLK = MCAL_Get_PCLC1_FREQ() ;
 8000786:	f7ff ff77 	bl	8000678 <MCAL_Get_PCLC1_FREQ>
 800078a:	60f8      	str	r0, [r7, #12]
	 }
	 BRR =  USART_BRR_Reg( PCLK , USART_Config->BAUDRATE ) ;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	fbb2 f3f3 	udiv	r3, r2, r3
 8000798:	0119      	lsls	r1, r3, #4
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	009a      	lsls	r2, r3, #2
 80007a4:	441a      	add	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80007bc:	2064      	movs	r0, #100	; 0x64
 80007be:	fb00 f303 	mul.w	r3, r0, r3
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	2264      	movs	r2, #100	; 0x64
 80007c6:	fb02 f303 	mul.w	r3, r2, r3
 80007ca:	f003 030c 	and.w	r3, r3, #12
 80007ce:	430b      	orrs	r3, r1
 80007d0:	60bb      	str	r3, [r7, #8]
	 USARTx->BRR = BRR ;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	609a      	str	r2, [r3, #8]

	 // Enable or Disable interrupt
	 if ( USART_Config->IRQ_EN != USART_IRQ_ENABLE_Disable )
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	7a9b      	ldrb	r3, [r3, #10]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d026      	beq.n	800082e <MCAL_USART_Init+0x166>
	 {
		 USARTx->CR1 |= USART_Config->IRQ_EN ;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	7a92      	ldrb	r2, [r2, #10]
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60da      	str	r2, [r3, #12]

		 // en NVIC
		 if ( USARTx == USART1 )
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a11      	ldr	r2, [pc, #68]	; (8000838 <MCAL_USART_Init+0x170>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d106      	bne.n	8000804 <MCAL_USART_Init+0x13c>
		 {
			 NVIC_IRQ37_USART1_Enable() ;
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MCAL_USART_Init+0x184>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <MCAL_USART_Init+0x184>)
 80007fc:	f043 0320 	orr.w	r3, r3, #32
 8000800:	6013      	str	r3, [r2, #0]
		 else if ( USARTx == USART3 )
		 {
			 NVIC_IRQ39_USART3_Enable() ;
		 }
	 }
}
 8000802:	e014      	b.n	800082e <MCAL_USART_Init+0x166>
		 else if ( USARTx == USART2 )
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <MCAL_USART_Init+0x17c>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d106      	bne.n	800081a <MCAL_USART_Init+0x152>
			 NVIC_IRQ38_USART2_Enable() ;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MCAL_USART_Init+0x184>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <MCAL_USART_Init+0x184>)
 8000812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	e009      	b.n	800082e <MCAL_USART_Init+0x166>
		 else if ( USARTx == USART3 )
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <MCAL_USART_Init+0x180>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d105      	bne.n	800082e <MCAL_USART_Init+0x166>
			 NVIC_IRQ39_USART3_Enable() ;
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MCAL_USART_Init+0x184>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a09      	ldr	r2, [pc, #36]	; (800084c <MCAL_USART_Init+0x184>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6013      	str	r3, [r2, #0]
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40013800 	.word	0x40013800
 800083c:	2000001c 	.word	0x2000001c
 8000840:	40021000 	.word	0x40021000
 8000844:	40004400 	.word	0x40004400
 8000848:	40004800 	.word	0x40004800
 800084c:	e000e104 	.word	0xe000e104

08000850 <MCAL_USART_Set_Pin>:
* @param [in] 		-USARTx:  specified USARTx x=[ 1 : 3 ]
* @retval 			-none
* Note				-none
*/
void MCAL_USART_Set_Pin( USART_TypeDef* USARTx )
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	GPIO_Pinconfig_t pinconfig ;
	if( USARTx == USART1 )
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <MCAL_USART_Set_Pin+0xb4>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d117      	bne.n	8000890 <MCAL_USART_Set_Pin+0x40>
	{
		//PA9--->TX
		//PA10-->RX
		//PA11-->CTS
		//PA12-->RTS
		pinconfig.pinNumber = GPIO_PIN_9 ;
 8000860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000864:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8000866:	2306      	movs	r3, #6
 8000868:	73bb      	strb	r3, [r7, #14]
		pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	4824      	ldr	r0, [pc, #144]	; (8000908 <MCAL_USART_Set_Pin+0xb8>)
 8000876:	f7ff fe68 	bl	800054a <MCAL_GPIO_Init>

		pinconfig.pinNumber = GPIO_PIN_10 ;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_INPUT_AF  ;
 8000880:	2308      	movs	r3, #8
 8000882:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	481f      	ldr	r0, [pc, #124]	; (8000908 <MCAL_USART_Set_Pin+0xb8>)
 800088c:	f7ff fe5d 	bl	800054a <MCAL_GPIO_Init>
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
		}
	}

	if( USARTx == USART2 )
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <MCAL_USART_Set_Pin+0xbc>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d115      	bne.n	80008c4 <MCAL_USART_Set_Pin+0x74>
	{
		//PA2--->TX
		//PA3-->RX
		//PA0-->CTS
		//PA1-->RTS
		pinconfig.pinNumber = GPIO_PIN_2 ;
 8000898:	2304      	movs	r3, #4
 800089a:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 800089c:	2306      	movs	r3, #6
 800089e:	73bb      	strb	r3, [r7, #14]
		pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	4817      	ldr	r0, [pc, #92]	; (8000908 <MCAL_USART_Set_Pin+0xb8>)
 80008ac:	f7ff fe4d 	bl	800054a <MCAL_GPIO_Init>

		pinconfig.pinNumber = GPIO_PIN_3 ;
 80008b0:	2308      	movs	r3, #8
 80008b2:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_INPUT_AF  ;
 80008b4:	2308      	movs	r3, #8
 80008b6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <MCAL_USART_Set_Pin+0xb8>)
 80008c0:	f7ff fe43 	bl	800054a <MCAL_GPIO_Init>
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
		}
	}

	if( USARTx == USART3 )
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MCAL_USART_Set_Pin+0xc0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d117      	bne.n	80008fc <MCAL_USART_Set_Pin+0xac>
	{
		//PB10--->TX
		//PB11-->RX
		//PB13-->CTS
		//PB14-->RTS
		pinconfig.pinNumber = GPIO_PIN_10 ;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 80008d2:	2306      	movs	r3, #6
 80008d4:	73bb      	strb	r3, [r7, #14]
		pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <MCAL_USART_Set_Pin+0xc4>)
 80008e2:	f7ff fe32 	bl	800054a <MCAL_GPIO_Init>

		pinconfig.pinNumber = GPIO_PIN_11 ;
 80008e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008ea:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_INPUT_AF  ;
 80008ec:	2308      	movs	r3, #8
 80008ee:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <MCAL_USART_Set_Pin+0xc4>)
 80008f8:	f7ff fe27 	bl	800054a <MCAL_GPIO_Init>
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
		}
	}
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40013800 	.word	0x40013800
 8000908:	40010800 	.word	0x40010800
 800090c:	40004400 	.word	0x40004400
 8000910:	40004800 	.word	0x40004800
 8000914:	40010c00 	.word	0x40010c00

08000918 <MCAL_USART_Send_String>:
* @param [in] 		-PTXBuffer: pointer to buffer to send data
* @retval 			-none
* Note				-to finish the sending process you must send #
*/
void MCAL_USART_Send_String( USART_TypeDef* USARTx , uint8_t* PTXBuffer , enum polling_mechanism polling_EN)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	4613      	mov	r3, r2
 8000924:	71fb      	strb	r3, [r7, #7]
	//usart1
	if(  USARTx == USART1 )
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <MCAL_USART_Send_String+0xa0>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d112      	bne.n	8000954 <MCAL_USART_Send_String+0x3c>
	{

		if (g_USART_Config[0]->NUM_DATA_BIT == USART_NUM_DATA_BIT_8 )
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MCAL_USART_Send_String+0xa4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10d      	bne.n	8000954 <MCAL_USART_Send_String+0x3c>
		{
			while( *PTXBuffer != '#' )
 8000938:	e008      	b.n	800094c <MCAL_USART_Send_String+0x34>
			{
				MCAL_USART_SendData(USARTx,(uint16_t*)PTXBuffer, polling_EN);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	461a      	mov	r2, r3
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f000 f89b 	bl	8000a7c <MCAL_USART_SendData>
				PTXBuffer++;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	3301      	adds	r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
			while( *PTXBuffer != '#' )
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b23      	cmp	r3, #35	; 0x23
 8000952:	d1f2      	bne.n	800093a <MCAL_USART_Send_String+0x22>
			}
		}
	}
	//usart2
	if(  USARTx == USART2 )
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4a1a      	ldr	r2, [pc, #104]	; (80009c0 <MCAL_USART_Send_String+0xa8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d112      	bne.n	8000982 <MCAL_USART_Send_String+0x6a>
	{

		if (g_USART_Config[1]->NUM_DATA_BIT == USART_NUM_DATA_BIT_8 )
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MCAL_USART_Send_String+0xa4>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	785b      	ldrb	r3, [r3, #1]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d10d      	bne.n	8000982 <MCAL_USART_Send_String+0x6a>
		{
			while( *PTXBuffer != '#' )
 8000966:	e008      	b.n	800097a <MCAL_USART_Send_String+0x62>
			{
				MCAL_USART_SendData(USARTx, (uint16_t*)PTXBuffer, polling_EN);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	461a      	mov	r2, r3
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f000 f884 	bl	8000a7c <MCAL_USART_SendData>
				PTXBuffer++;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	3301      	adds	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
			while( *PTXBuffer != '#' )
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b23      	cmp	r3, #35	; 0x23
 8000980:	d1f2      	bne.n	8000968 <MCAL_USART_Send_String+0x50>
			}
		}
	}
	//usart3
	if(  USARTx == USART3 )
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <MCAL_USART_Send_String+0xac>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d112      	bne.n	80009b0 <MCAL_USART_Send_String+0x98>
	{

		if (g_USART_Config[2]->NUM_DATA_BIT == USART_NUM_DATA_BIT_8 )
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MCAL_USART_Send_String+0xa4>)
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	785b      	ldrb	r3, [r3, #1]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10d      	bne.n	80009b0 <MCAL_USART_Send_String+0x98>
		{
			while( *PTXBuffer != '#' )
 8000994:	e008      	b.n	80009a8 <MCAL_USART_Send_String+0x90>
			{
				MCAL_USART_SendData(USARTx, (uint16_t*)PTXBuffer, polling_EN);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	461a      	mov	r2, r3
 800099a:	68b9      	ldr	r1, [r7, #8]
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f000 f86d 	bl	8000a7c <MCAL_USART_SendData>
				PTXBuffer++;
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
			while( *PTXBuffer != '#' )
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b23      	cmp	r3, #35	; 0x23
 80009ae:	d1f2      	bne.n	8000996 <MCAL_USART_Send_String+0x7e>
			}
		}
	}
}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40013800 	.word	0x40013800
 80009bc:	2000001c 	.word	0x2000001c
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40004800 	.word	0x40004800

080009c8 <MCAL_USART_Receive_String>:
* @param [out] 		-PRXBuffer: pointer to buffer to Receive data
* @retval 			-none
* Note				-send process terminates when # is reached
*/
void MCAL_USART_Receive_String( USART_TypeDef* USARTx , uint8_t* PRXBuffer , enum polling_mechanism polling_EN)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	4613      	mov	r3, r2
 80009d4:	71fb      	strb	r3, [r7, #7]
	//usart1
	if(  USARTx == USART1 )
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <MCAL_USART_Receive_String+0xa4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d113      	bne.n	8000a06 <MCAL_USART_Receive_String+0x3e>
	{

		if (g_USART_Config[0]->NUM_DATA_BIT == USART_NUM_DATA_BIT_8 )
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <MCAL_USART_Receive_String+0xa8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10e      	bne.n	8000a06 <MCAL_USART_Receive_String+0x3e>
		{
			while( *(PRXBuffer-1) != '#' )
 80009e8:	e008      	b.n	80009fc <MCAL_USART_Receive_String+0x34>
			{
				MCAL_USART_ReceiveData(USARTx, PRXBuffer, polling_EN);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	461a      	mov	r2, r3
 80009ee:	68b9      	ldr	r1, [r7, #8]
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f000 f87b 	bl	8000aec <MCAL_USART_ReceiveData>
				PRXBuffer++;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	3301      	adds	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
			while( *(PRXBuffer-1) != '#' )
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b23      	cmp	r3, #35	; 0x23
 8000a04:	d1f1      	bne.n	80009ea <MCAL_USART_Receive_String+0x22>
			}
		}
	}
	//usart2
	if(  USARTx == USART2 )
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <MCAL_USART_Receive_String+0xac>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d112      	bne.n	8000a34 <MCAL_USART_Receive_String+0x6c>
	{

		if (g_USART_Config[1]->NUM_DATA_BIT == USART_NUM_DATA_BIT_8 )
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MCAL_USART_Receive_String+0xa8>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	785b      	ldrb	r3, [r3, #1]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10d      	bne.n	8000a34 <MCAL_USART_Receive_String+0x6c>
		{
			while( *PRXBuffer != '#' )
 8000a18:	e008      	b.n	8000a2c <MCAL_USART_Receive_String+0x64>
			{
				MCAL_USART_ReceiveData(USARTx, PRXBuffer, polling_EN);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68b9      	ldr	r1, [r7, #8]
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f000 f863 	bl	8000aec <MCAL_USART_ReceiveData>
				PRXBuffer++;
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
			while( *PRXBuffer != '#' )
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b23      	cmp	r3, #35	; 0x23
 8000a32:	d1f2      	bne.n	8000a1a <MCAL_USART_Receive_String+0x52>
			}
		}
	}
	//usart3
	if(  USARTx == USART3 )
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <MCAL_USART_Receive_String+0xb0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d112      	bne.n	8000a62 <MCAL_USART_Receive_String+0x9a>
	{

		if (g_USART_Config[2]->NUM_DATA_BIT == USART_NUM_DATA_BIT_8 )
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MCAL_USART_Receive_String+0xa8>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	785b      	ldrb	r3, [r3, #1]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10d      	bne.n	8000a62 <MCAL_USART_Receive_String+0x9a>
		{
			while( *PRXBuffer != '#' )
 8000a46:	e008      	b.n	8000a5a <MCAL_USART_Receive_String+0x92>
			{
				MCAL_USART_ReceiveData(USARTx, PRXBuffer, polling_EN);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 f84c 	bl	8000aec <MCAL_USART_ReceiveData>
				PRXBuffer++;
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
			while( *PRXBuffer != '#' )
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b23      	cmp	r3, #35	; 0x23
 8000a60:	d1f2      	bne.n	8000a48 <MCAL_USART_Receive_String+0x80>
			}
		}
	}
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	2000001c 	.word	0x2000001c
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40004800 	.word	0x40004800

08000a7c <MCAL_USART_SendData>:
* @param [in] 		-PTXBuffer: pointer to buffer to send data
* @retval 			-none
* Note				-stm32f103c6 has USART (1---3 )
*/
void MCAL_USART_SendData( USART_TypeDef* USARTx , uint16_t* PTXBuffer , enum polling_mechanism polling_EN)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	4613      	mov	r3, r2
 8000a88:	71fb      	strb	r3, [r7, #7]
	if ( polling_EN == Enable )
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d106      	bne.n	8000a9e <MCAL_USART_SendData+0x22>
		while( ! ( USARTx->SR & 1<<7 ) ) ;
 8000a90:	bf00      	nop
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <MCAL_USART_SendData+0x16>

	if( USARTx == USART1 )
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <MCAL_USART_SendData+0x64>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d104      	bne.n	8000ab0 <MCAL_USART_SendData+0x34>
		{
			USARTx->DR = ( *PTXBuffer & (uint16_t)0x01FF ) ;
		}
		else
		{
			USARTx->DR = ( *PTXBuffer & (uint8_t)0xFF ) ;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	605a      	str	r2, [r3, #4]
		}
	}
	if( USARTx == USART2 )
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <MCAL_USART_SendData+0x68>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d104      	bne.n	8000ac2 <MCAL_USART_SendData+0x46>
		{
			USARTx->DR = ( *PTXBuffer & (uint16_t)0x01FF ) ;
		}
		else
		{
			USARTx->DR = ( *PTXBuffer & (uint8_t)0xFF ) ;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	605a      	str	r2, [r3, #4]
		}
	}
	if( USARTx == USART3 )
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <MCAL_USART_SendData+0x6c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d104      	bne.n	8000ad4 <MCAL_USART_SendData+0x58>
		{
			USARTx->DR = ( *PTXBuffer & (uint16_t)0x01FF ) ;
		}
		else
		{
			USARTx->DR = ( *PTXBuffer & (uint8_t)0xFF ) ;
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	605a      	str	r2, [r3, #4]
		}
	}

}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40013800 	.word	0x40013800
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40004800 	.word	0x40004800

08000aec <MCAL_USART_ReceiveData>:
* @param [out] 		-PRXBuffer: pointer to buffer to Receive data
* @retval 			-none
* Note				-stm32f103c6 has USART (1---3 )
*/
void MCAL_USART_ReceiveData( USART_TypeDef* USARTx , uint16_t* PRXBuffer , enum polling_mechanism polling_EN)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	4613      	mov	r3, r2
 8000af8:	71fb      	strb	r3, [r7, #7]
	// at parity is enable the MSB of data Replace whit parity bit
	if ( polling_EN == Enable )
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d106      	bne.n	8000b0e <MCAL_USART_ReceiveData+0x22>
		while( ! ( USARTx->SR & 1<<5 ) ) ;
 8000b00:	bf00      	nop
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0320 	and.w	r3, r3, #32
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0f9      	beq.n	8000b02 <MCAL_USART_ReceiveData+0x16>
	if( USARTx == USART1 )
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4a27      	ldr	r2, [pc, #156]	; (8000bb0 <MCAL_USART_ReceiveData+0xc4>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d114      	bne.n	8000b40 <MCAL_USART_ReceiveData+0x54>
				*((uint16_t*)PRXBuffer) = ( USARTx->DR & (uint8_t)0xff);
			}
		}
		else
		{
			if ( g_USART_Config[0]->PARITY == USART_PARITY_Disable )
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MCAL_USART_ReceiveData+0xc8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	7a1b      	ldrb	r3, [r3, #8]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d107      	bne.n	8000b30 <MCAL_USART_ReceiveData+0x44>
			{
				*((uint16_t*)PRXBuffer) = ( USARTx->DR & (uint8_t)0xff);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	801a      	strh	r2, [r3, #0]
 8000b2e:	e007      	b.n	8000b40 <MCAL_USART_ReceiveData+0x54>
			}
			else
			{
				*((uint16_t*)PRXBuffer) = ( USARTx->DR & (uint8_t)0x7f);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	if( USARTx == USART2 )
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <MCAL_USART_ReceiveData+0xcc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d114      	bne.n	8000b72 <MCAL_USART_ReceiveData+0x86>
				*((uint16_t*)PRXBuffer) = ( USARTx->DR & (uint8_t)0xff);
			}
		}
		else
		{
			if ( g_USART_Config[1]->PARITY == USART_PARITY_Disable )
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MCAL_USART_ReceiveData+0xc8>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	7a1b      	ldrb	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d107      	bne.n	8000b62 <MCAL_USART_ReceiveData+0x76>
			{
				*((uint16_t*)PRXBuffer) = ( USARTx->DR & (uint8_t)0xff);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	801a      	strh	r2, [r3, #0]
 8000b60:	e007      	b.n	8000b72 <MCAL_USART_ReceiveData+0x86>
			}
			else
			{
				*((uint16_t*)PRXBuffer) = ( USARTx->DR & (uint8_t)0x7f);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	if( USARTx == USART3 )
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <MCAL_USART_ReceiveData+0xd0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d114      	bne.n	8000ba4 <MCAL_USART_ReceiveData+0xb8>
				*((uint16_t*)PRXBuffer) = ( USARTx->DR & (uint8_t)0xff);
			}
		}
		else
		{
			if ( g_USART_Config[2]->PARITY == USART_PARITY_Disable )
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MCAL_USART_ReceiveData+0xc8>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	7a1b      	ldrb	r3, [r3, #8]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d107      	bne.n	8000b94 <MCAL_USART_ReceiveData+0xa8>
			{
				*((uint16_t*)PRXBuffer) = ( USARTx->DR & (uint8_t)0xff);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	801a      	strh	r2, [r3, #0]
				*((uint16_t*)PRXBuffer) = ( USARTx->DR & (uint8_t)0x7f);
			}
		}
	}

}
 8000b92:	e007      	b.n	8000ba4 <MCAL_USART_ReceiveData+0xb8>
				*((uint16_t*)PRXBuffer) = ( USARTx->DR & (uint8_t)0x7f);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	801a      	strh	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40013800 	.word	0x40013800
 8000bb4:	2000001c 	.word	0x2000001c
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40004800 	.word	0x40004800

08000bc0 <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <USART1_IRQHandler+0x10>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	4798      	blx	r3
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000001c 	.word	0x2000001c

08000bd4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <USART2_IRQHandler+0x10>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	4798      	blx	r3
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000001c 	.word	0x2000001c

08000be8 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <USART3_IRQHandler+0x10>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	4798      	blx	r3
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000001c 	.word	0x2000001c

08000bfc <__libc_init_array>:
 8000bfc:	b570      	push	{r4, r5, r6, lr}
 8000bfe:	2500      	movs	r5, #0
 8000c00:	4e0c      	ldr	r6, [pc, #48]	; (8000c34 <__libc_init_array+0x38>)
 8000c02:	4c0d      	ldr	r4, [pc, #52]	; (8000c38 <__libc_init_array+0x3c>)
 8000c04:	1ba4      	subs	r4, r4, r6
 8000c06:	10a4      	asrs	r4, r4, #2
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	d109      	bne.n	8000c20 <__libc_init_array+0x24>
 8000c0c:	f000 f81a 	bl	8000c44 <_init>
 8000c10:	2500      	movs	r5, #0
 8000c12:	4e0a      	ldr	r6, [pc, #40]	; (8000c3c <__libc_init_array+0x40>)
 8000c14:	4c0a      	ldr	r4, [pc, #40]	; (8000c40 <__libc_init_array+0x44>)
 8000c16:	1ba4      	subs	r4, r4, r6
 8000c18:	10a4      	asrs	r4, r4, #2
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	d105      	bne.n	8000c2a <__libc_init_array+0x2e>
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
 8000c20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c24:	4798      	blx	r3
 8000c26:	3501      	adds	r5, #1
 8000c28:	e7ee      	b.n	8000c08 <__libc_init_array+0xc>
 8000c2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c2e:	4798      	blx	r3
 8000c30:	3501      	adds	r5, #1
 8000c32:	e7f2      	b.n	8000c1a <__libc_init_array+0x1e>
 8000c34:	08000c64 	.word	0x08000c64
 8000c38:	08000c64 	.word	0x08000c64
 8000c3c:	08000c64 	.word	0x08000c64
 8000c40:	08000c68 	.word	0x08000c68

08000c44 <_init>:
 8000c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c46:	bf00      	nop
 8000c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c4a:	bc08      	pop	{r3}
 8000c4c:	469e      	mov	lr, r3
 8000c4e:	4770      	bx	lr

08000c50 <_fini>:
 8000c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c52:	bf00      	nop
 8000c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c56:	bc08      	pop	{r3}
 8000c58:	469e      	mov	lr, r3
 8000c5a:	4770      	bx	lr
