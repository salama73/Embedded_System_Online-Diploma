
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000de4  00000e78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080006a  0080006a  00000e82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c36  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf9  00000000  00000000  00002c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001018  00000000  00000000  00003887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a4  00000000  00000000  000048a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000719  00000000  00000000  00004d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f1f  00000000  00000000  0000545d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000637c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
   c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_13>
  38:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__vector_14>
  3c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c9 04 	call	0x992	; 0x992 <main>
  8a:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
 */


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[0]();
  b4:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <GP_IRQ_CALL>
  b8:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <GP_IRQ_CALL+0x1>
  bc:	09 95       	icall
}
  be:	ff 91       	pop	r31
  c0:	ef 91       	pop	r30
  c2:	bf 91       	pop	r27
  c4:	af 91       	pop	r26
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	7f 91       	pop	r23
  cc:	6f 91       	pop	r22
  ce:	5f 91       	pop	r21
  d0:	4f 91       	pop	r20
  d2:	3f 91       	pop	r19
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_2>:


void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[1]();
 102:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <GP_IRQ_CALL+0x2>
 106:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <GP_IRQ_CALL+0x3>
 10a:	09 95       	icall
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	bf 91       	pop	r27
 112:	af 91       	pop	r26
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	7f 91       	pop	r23
 11a:	6f 91       	pop	r22
 11c:	5f 91       	pop	r21
 11e:	4f 91       	pop	r20
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_3>:


void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[2]();
 150:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <GP_IRQ_CALL+0x4>
 154:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <GP_IRQ_CALL+0x5>
 158:	09 95       	icall
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <MCAL_GPIO_Init>:
uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef *GPIOx )
{
	uint8_t port_value;
	port_value= (uint8_t) (GPIOx->PIN);
	return port_value;
}
 17c:	fc 01       	movw	r30, r24
 17e:	db 01       	movw	r26, r22
 180:	11 96       	adiw	r26, 0x01	; 1
 182:	8c 91       	ld	r24, X
 184:	11 97       	sbiw	r26, 0x01	; 1
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	59 f4       	brne	.+22     	; 0x1a0 <MCAL_GPIO_Init+0x24>
 18a:	8c 91       	ld	r24, X
 18c:	80 95       	com	r24
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	89 23       	and	r24, r25
 192:	81 83       	std	Z+1, r24	; 0x01
 194:	8c 91       	ld	r24, X
 196:	80 95       	com	r24
 198:	92 81       	ldd	r25, Z+2	; 0x02
 19a:	89 23       	and	r24, r25
 19c:	82 83       	std	Z+2, r24	; 0x02
 19e:	08 95       	ret
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	51 f4       	brne	.+20     	; 0x1b8 <MCAL_GPIO_Init+0x3c>
 1a4:	8c 91       	ld	r24, X
 1a6:	80 95       	com	r24
 1a8:	91 81       	ldd	r25, Z+1	; 0x01
 1aa:	89 23       	and	r24, r25
 1ac:	81 83       	std	Z+1, r24	; 0x01
 1ae:	8c 91       	ld	r24, X
 1b0:	92 81       	ldd	r25, Z+2	; 0x02
 1b2:	89 2b       	or	r24, r25
 1b4:	82 83       	std	Z+2, r24	; 0x02
 1b6:	08 95       	ret
 1b8:	8c 91       	ld	r24, X
 1ba:	91 81       	ldd	r25, Z+1	; 0x01
 1bc:	89 2b       	or	r24, r25
 1be:	81 83       	std	Z+1, r24	; 0x01
 1c0:	8c 91       	ld	r24, X
 1c2:	80 95       	com	r24
 1c4:	92 81       	ldd	r25, Z+2	; 0x02
 1c6:	89 23       	and	r24, r25
 1c8:	82 83       	std	Z+2, r24	; 0x02
 1ca:	08 95       	ret

000001cc <MCAL_GPIO_WritePin>:
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx ,uint8_t pinNumber ,uint8_t value)
{
	if ( value == GPIO_PIN_SET )
 1cc:	41 30       	cpi	r20, 0x01	; 1
 1ce:	29 f4       	brne	.+10     	; 0x1da <MCAL_GPIO_WritePin+0xe>
	{
		GPIOx->PORT |= pinNumber ;
 1d0:	fc 01       	movw	r30, r24
 1d2:	22 81       	ldd	r18, Z+2	; 0x02
 1d4:	62 2b       	or	r22, r18
 1d6:	62 83       	std	Z+2, r22	; 0x02
 1d8:	08 95       	ret
	}
	else if(  value == GPIO_PIN_RESET)
 1da:	41 11       	cpse	r20, r1
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <MCAL_GPIO_WritePin+0x1c>
	{
		GPIOx->PORT &= ~( pinNumber ) ;
 1de:	60 95       	com	r22
 1e0:	fc 01       	movw	r30, r24
 1e2:	22 81       	ldd	r18, Z+2	; 0x02
 1e4:	62 23       	and	r22, r18
 1e6:	62 83       	std	Z+2, r22	; 0x02
 1e8:	08 95       	ret

000001ea <MCAL_GPIO_WritePort>:
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx ,uint8_t value)
{
	GPIOx->PORT=  value;
 1ea:	fc 01       	movw	r30, r24
 1ec:	62 83       	std	Z+2, r22	; 0x02
 1ee:	08 95       	ret

000001f0 <MCAL_USART_Init>:
	EXTI_GLOBAL_Disable()  ;
	USART->UBRRL = 0 ;
	USART->UCSRB = 0 ;
	UCSRC = 0b10000110;
	UBRRH = 0;
	USART->UCSRA &=~(1<<1)	;
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <MCAL_USART_Init+0xa>
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	8c 01       	movw	r16, r24
 200:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 204:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 208:	fc 01       	movw	r30, r24
 20a:	82 81       	ldd	r24, Z+2	; 0x02
 20c:	9e ef       	ldi	r25, 0xFE	; 254
 20e:	98 0f       	add	r25, r24
 210:	92 30       	cpi	r25, 0x02	; 2
 212:	b8 f5       	brcc	.+110    	; 0x282 <MCAL_USART_Init+0x92>
 214:	80 b5       	in	r24, 0x20	; 32
 216:	80 68       	ori	r24, 0x80	; 128
 218:	80 bd       	out	0x20, r24	; 32
 21a:	80 b5       	in	r24, 0x20	; 32
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	80 bd       	out	0x20, r24	; 32
 220:	81 81       	ldd	r24, Z+1	; 0x01
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	41 f4       	brne	.+16     	; 0x236 <MCAL_USART_Init+0x46>
 226:	80 b5       	in	r24, 0x20	; 32
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	80 bd       	out	0x20, r24	; 32
 22c:	90 b5       	in	r25, 0x20	; 32
 22e:	81 81       	ldd	r24, Z+1	; 0x01
 230:	89 2b       	or	r24, r25
 232:	80 bd       	out	0x20, r24	; 32
 234:	0a c0       	rjmp	.+20     	; 0x24a <MCAL_USART_Init+0x5a>
 236:	8e 3f       	cpi	r24, 0xFE	; 254
 238:	41 f4       	brne	.+16     	; 0x24a <MCAL_USART_Init+0x5a>
 23a:	80 b5       	in	r24, 0x20	; 32
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	80 bd       	out	0x20, r24	; 32
 240:	90 b5       	in	r25, 0x20	; 32
 242:	f8 01       	movw	r30, r16
 244:	81 81       	ldd	r24, Z+1	; 0x01
 246:	89 23       	and	r24, r25
 248:	80 bd       	out	0x20, r24	; 32
 24a:	f8 01       	movw	r30, r16
 24c:	65 81       	ldd	r22, Z+5	; 0x05
 24e:	76 81       	ldd	r23, Z+6	; 0x06
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 f5 05 	call	0xbea	; 0xbea <__floatunsisf>
 258:	9b 01       	movw	r18, r22
 25a:	ac 01       	movw	r20, r24
 25c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__addsf3>
 260:	9b 01       	movw	r18, r22
 262:	ac 01       	movw	r20, r24
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	74 e2       	ldi	r23, 0x24	; 36
 268:	84 ef       	ldi	r24, 0xF4	; 244
 26a:	9a e4       	ldi	r25, 0x4A	; 74
 26c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__divsf3>
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	5f e3       	ldi	r21, 0x3F	; 63
 278:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__subsf3>
 27c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__fixunssfsi>
 280:	4f c0       	rjmp	.+158    	; 0x320 <MCAL_USART_Init+0x130>
 282:	81 11       	cpse	r24, r1
 284:	27 c0       	rjmp	.+78     	; 0x2d4 <MCAL_USART_Init+0xe4>
 286:	80 b5       	in	r24, 0x20	; 32
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	80 bd       	out	0x20, r24	; 32
 28c:	80 b5       	in	r24, 0x20	; 32
 28e:	8f 7b       	andi	r24, 0xBF	; 191
 290:	80 bd       	out	0x20, r24	; 32
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	82 60       	ori	r24, 0x02	; 2
 296:	8b b9       	out	0x0b, r24	; 11
 298:	f8 01       	movw	r30, r16
 29a:	65 81       	ldd	r22, Z+5	; 0x05
 29c:	76 81       	ldd	r23, Z+6	; 0x06
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 f5 05 	call	0xbea	; 0xbea <__floatunsisf>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	51 e4       	ldi	r21, 0x41	; 65
 2ae:	0e 94 83 06 	call	0xd06	; 0xd06 <__mulsf3>
 2b2:	9b 01       	movw	r18, r22
 2b4:	ac 01       	movw	r20, r24
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	74 e2       	ldi	r23, 0x24	; 36
 2ba:	84 ef       	ldi	r24, 0xF4	; 244
 2bc:	9a e4       	ldi	r25, 0x4A	; 74
 2be:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__divsf3>
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	5f e3       	ldi	r21, 0x3F	; 63
 2ca:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__subsf3>
 2ce:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__fixunssfsi>
 2d2:	26 c0       	rjmp	.+76     	; 0x320 <MCAL_USART_Init+0x130>
 2d4:	80 b5       	in	r24, 0x20	; 32
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	80 bd       	out	0x20, r24	; 32
 2da:	80 b5       	in	r24, 0x20	; 32
 2dc:	8f 7b       	andi	r24, 0xBF	; 191
 2de:	80 bd       	out	0x20, r24	; 32
 2e0:	8b b1       	in	r24, 0x0b	; 11
 2e2:	8d 7f       	andi	r24, 0xFD	; 253
 2e4:	8b b9       	out	0x0b, r24	; 11
 2e6:	f8 01       	movw	r30, r16
 2e8:	65 81       	ldd	r22, Z+5	; 0x05
 2ea:	76 81       	ldd	r23, Z+6	; 0x06
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 f5 05 	call	0xbea	; 0xbea <__floatunsisf>
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	40 e8       	ldi	r20, 0x80	; 128
 2fa:	51 e4       	ldi	r21, 0x41	; 65
 2fc:	0e 94 83 06 	call	0xd06	; 0xd06 <__mulsf3>
 300:	9b 01       	movw	r18, r22
 302:	ac 01       	movw	r20, r24
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	74 e2       	ldi	r23, 0x24	; 36
 308:	84 ef       	ldi	r24, 0xF4	; 244
 30a:	9a e4       	ldi	r25, 0x4A	; 74
 30c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__divsf3>
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	5f e3       	ldi	r21, 0x3F	; 63
 318:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__subsf3>
 31c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__fixunssfsi>
 320:	f8 01       	movw	r30, r16
 322:	83 81       	ldd	r24, Z+3	; 0x03
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	11 f1       	breq	.+68     	; 0x36c <MCAL_USART_Init+0x17c>
 328:	28 f4       	brcc	.+10     	; 0x334 <MCAL_USART_Init+0x144>
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	41 f0       	breq	.+16     	; 0x33e <MCAL_USART_Init+0x14e>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	81 f0       	breq	.+32     	; 0x352 <MCAL_USART_Init+0x162>
 332:	3c c0       	rjmp	.+120    	; 0x3ac <MCAL_USART_Init+0x1bc>
 334:	84 30       	cpi	r24, 0x04	; 4
 336:	39 f1       	breq	.+78     	; 0x386 <MCAL_USART_Init+0x196>
 338:	85 30       	cpi	r24, 0x05	; 5
 33a:	79 f1       	breq	.+94     	; 0x39a <MCAL_USART_Init+0x1aa>
 33c:	37 c0       	rjmp	.+110    	; 0x3ac <MCAL_USART_Init+0x1bc>
 33e:	8a b1       	in	r24, 0x0a	; 10
 340:	8b 7f       	andi	r24, 0xFB	; 251
 342:	8a b9       	out	0x0a, r24	; 10
 344:	80 b5       	in	r24, 0x20	; 32
 346:	80 68       	ori	r24, 0x80	; 128
 348:	80 bd       	out	0x20, r24	; 32
 34a:	80 b5       	in	r24, 0x20	; 32
 34c:	89 7f       	andi	r24, 0xF9	; 249
 34e:	80 bd       	out	0x20, r24	; 32
 350:	2d c0       	rjmp	.+90     	; 0x3ac <MCAL_USART_Init+0x1bc>
 352:	8a b1       	in	r24, 0x0a	; 10
 354:	8b 7f       	andi	r24, 0xFB	; 251
 356:	8a b9       	out	0x0a, r24	; 10
 358:	80 b5       	in	r24, 0x20	; 32
 35a:	80 68       	ori	r24, 0x80	; 128
 35c:	80 bd       	out	0x20, r24	; 32
 35e:	80 b5       	in	r24, 0x20	; 32
 360:	89 7f       	andi	r24, 0xF9	; 249
 362:	80 bd       	out	0x20, r24	; 32
 364:	80 b5       	in	r24, 0x20	; 32
 366:	82 60       	ori	r24, 0x02	; 2
 368:	80 bd       	out	0x20, r24	; 32
 36a:	20 c0       	rjmp	.+64     	; 0x3ac <MCAL_USART_Init+0x1bc>
 36c:	8a b1       	in	r24, 0x0a	; 10
 36e:	8b 7f       	andi	r24, 0xFB	; 251
 370:	8a b9       	out	0x0a, r24	; 10
 372:	80 b5       	in	r24, 0x20	; 32
 374:	80 68       	ori	r24, 0x80	; 128
 376:	80 bd       	out	0x20, r24	; 32
 378:	80 b5       	in	r24, 0x20	; 32
 37a:	89 7f       	andi	r24, 0xF9	; 249
 37c:	80 bd       	out	0x20, r24	; 32
 37e:	80 b5       	in	r24, 0x20	; 32
 380:	84 60       	ori	r24, 0x04	; 4
 382:	80 bd       	out	0x20, r24	; 32
 384:	13 c0       	rjmp	.+38     	; 0x3ac <MCAL_USART_Init+0x1bc>
 386:	8a b1       	in	r24, 0x0a	; 10
 388:	8b 7f       	andi	r24, 0xFB	; 251
 38a:	8a b9       	out	0x0a, r24	; 10
 38c:	80 b5       	in	r24, 0x20	; 32
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	80 bd       	out	0x20, r24	; 32
 392:	80 b5       	in	r24, 0x20	; 32
 394:	86 60       	ori	r24, 0x06	; 6
 396:	80 bd       	out	0x20, r24	; 32
 398:	09 c0       	rjmp	.+18     	; 0x3ac <MCAL_USART_Init+0x1bc>
 39a:	8a b1       	in	r24, 0x0a	; 10
 39c:	84 60       	ori	r24, 0x04	; 4
 39e:	8a b9       	out	0x0a, r24	; 10
 3a0:	80 b5       	in	r24, 0x20	; 32
 3a2:	80 68       	ori	r24, 0x80	; 128
 3a4:	80 bd       	out	0x20, r24	; 32
 3a6:	80 b5       	in	r24, 0x20	; 32
 3a8:	86 60       	ori	r24, 0x06	; 6
 3aa:	80 bd       	out	0x20, r24	; 32
 3ac:	f8 01       	movw	r30, r16
 3ae:	84 81       	ldd	r24, Z+4	; 0x04
 3b0:	88 30       	cpi	r24, 0x08	; 8
 3b2:	51 f0       	breq	.+20     	; 0x3c8 <MCAL_USART_Init+0x1d8>
 3b4:	87 3f       	cpi	r24, 0xF7	; 247
 3b6:	81 f4       	brne	.+32     	; 0x3d8 <MCAL_USART_Init+0x1e8>
 3b8:	80 b5       	in	r24, 0x20	; 32
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	80 bd       	out	0x20, r24	; 32
 3be:	90 b5       	in	r25, 0x20	; 32
 3c0:	84 81       	ldd	r24, Z+4	; 0x04
 3c2:	89 23       	and	r24, r25
 3c4:	80 bd       	out	0x20, r24	; 32
 3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <MCAL_USART_Init+0x1e8>
 3c8:	80 b5       	in	r24, 0x20	; 32
 3ca:	80 68       	ori	r24, 0x80	; 128
 3cc:	80 bd       	out	0x20, r24	; 32
 3ce:	90 b5       	in	r25, 0x20	; 32
 3d0:	f8 01       	movw	r30, r16
 3d2:	84 81       	ldd	r24, Z+4	; 0x04
 3d4:	89 2b       	or	r24, r25
 3d6:	80 bd       	out	0x20, r24	; 32
 3d8:	f8 01       	movw	r30, r16
 3da:	87 81       	ldd	r24, Z+7	; 0x07
 3dc:	80 33       	cpi	r24, 0x30	; 48
 3de:	b9 f0       	breq	.+46     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3e0:	8f 3c       	cpi	r24, 0xCF	; 207
 3e2:	19 f0       	breq	.+6      	; 0x3ea <MCAL_USART_Init+0x1fa>
 3e4:	80 32       	cpi	r24, 0x20	; 32
 3e6:	d9 f4       	brne	.+54     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3e8:	09 c0       	rjmp	.+18     	; 0x3fc <MCAL_USART_Init+0x20c>
 3ea:	80 b5       	in	r24, 0x20	; 32
 3ec:	80 68       	ori	r24, 0x80	; 128
 3ee:	80 bd       	out	0x20, r24	; 32
 3f0:	90 b5       	in	r25, 0x20	; 32
 3f2:	f8 01       	movw	r30, r16
 3f4:	87 81       	ldd	r24, Z+7	; 0x07
 3f6:	89 23       	and	r24, r25
 3f8:	80 bd       	out	0x20, r24	; 32
 3fa:	11 c0       	rjmp	.+34     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3fc:	80 b5       	in	r24, 0x20	; 32
 3fe:	80 68       	ori	r24, 0x80	; 128
 400:	80 bd       	out	0x20, r24	; 32
 402:	90 b5       	in	r25, 0x20	; 32
 404:	f8 01       	movw	r30, r16
 406:	87 81       	ldd	r24, Z+7	; 0x07
 408:	89 2b       	or	r24, r25
 40a:	80 bd       	out	0x20, r24	; 32
 40c:	08 c0       	rjmp	.+16     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 40e:	80 b5       	in	r24, 0x20	; 32
 410:	80 68       	ori	r24, 0x80	; 128
 412:	80 bd       	out	0x20, r24	; 32
 414:	90 b5       	in	r25, 0x20	; 32
 416:	f8 01       	movw	r30, r16
 418:	87 81       	ldd	r24, Z+7	; 0x07
 41a:	89 2b       	or	r24, r25
 41c:	80 bd       	out	0x20, r24	; 32
 41e:	80 b5       	in	r24, 0x20	; 32
 420:	8f 77       	andi	r24, 0x7F	; 127
 422:	80 bd       	out	0x20, r24	; 32
 424:	70 bd       	out	0x20, r23	; 32
 426:	69 b9       	out	0x09, r22	; 9
 428:	f8 01       	movw	r30, r16
 42a:	80 85       	ldd	r24, Z+8	; 0x08
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	69 f0       	breq	.+26     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 430:	28 f0       	brcs	.+10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 432:	82 30       	cpi	r24, 0x02	; 2
 434:	c1 f0       	breq	.+48     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 436:	83 30       	cpi	r24, 0x03	; 3
 438:	21 f1       	breq	.+72     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 43a:	30 c0       	rjmp	.+96     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 43c:	8a b1       	in	r24, 0x0a	; 10
 43e:	8f 71       	andi	r24, 0x1F	; 31
 440:	8a b9       	out	0x0a, r24	; 10
 442:	8f b7       	in	r24, 0x3f	; 63
 444:	8f 77       	andi	r24, 0x7F	; 127
 446:	8f bf       	out	0x3f, r24	; 63
 448:	29 c0       	rjmp	.+82     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 44a:	f8 01       	movw	r30, r16
 44c:	81 85       	ldd	r24, Z+9	; 0x09
 44e:	92 85       	ldd	r25, Z+10	; 0x0a
 450:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <GPU_IRQ_CALL+0x1>
 454:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <GPU_IRQ_CALL>
 458:	8a b1       	in	r24, 0x0a	; 10
 45a:	80 64       	ori	r24, 0x40	; 64
 45c:	8a b9       	out	0x0a, r24	; 10
 45e:	8f b7       	in	r24, 0x3f	; 63
 460:	80 68       	ori	r24, 0x80	; 128
 462:	8f bf       	out	0x3f, r24	; 63
 464:	1b c0       	rjmp	.+54     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 466:	f8 01       	movw	r30, r16
 468:	81 85       	ldd	r24, Z+9	; 0x09
 46a:	92 85       	ldd	r25, Z+10	; 0x0a
 46c:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <GPU_IRQ_CALL+0x3>
 470:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <GPU_IRQ_CALL+0x2>
 474:	8a b1       	in	r24, 0x0a	; 10
 476:	80 62       	ori	r24, 0x20	; 32
 478:	8a b9       	out	0x0a, r24	; 10
 47a:	8f b7       	in	r24, 0x3f	; 63
 47c:	80 68       	ori	r24, 0x80	; 128
 47e:	8f bf       	out	0x3f, r24	; 63
 480:	0d c0       	rjmp	.+26     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 482:	f8 01       	movw	r30, r16
 484:	81 85       	ldd	r24, Z+9	; 0x09
 486:	92 85       	ldd	r25, Z+10	; 0x0a
 488:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <GPU_IRQ_CALL+0x5>
 48c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <GPU_IRQ_CALL+0x4>
 490:	8a b1       	in	r24, 0x0a	; 10
 492:	80 68       	ori	r24, 0x80	; 128
 494:	8a b9       	out	0x0a, r24	; 10
 496:	8f b7       	in	r24, 0x3f	; 63
 498:	80 68       	ori	r24, 0x80	; 128
 49a:	8f bf       	out	0x3f, r24	; 63
 49c:	f8 01       	movw	r30, r16
 49e:	80 81       	ld	r24, Z
 4a0:	9a b1       	in	r25, 0x0a	; 10
 4a2:	89 2b       	or	r24, r25
 4a4:	8a b9       	out	0x0a, r24	; 10
 4a6:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 4aa:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 4ae:	82 81       	ldd	r24, Z+2	; 0x02
 4b0:	82 30       	cpi	r24, 0x02	; 2
 4b2:	61 f4       	brne	.+24     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	89 83       	std	Y+1, r24	; 0x01
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	8a 83       	std	Y+2, r24	; 0x02
 4bc:	be 01       	movw	r22, r28
 4be:	6f 5f       	subi	r22, 0xFF	; 255
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	86 e3       	ldi	r24, 0x36	; 54
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
 4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4cc:	83 30       	cpi	r24, 0x03	; 3
 4ce:	59 f4       	brne	.+22     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	89 83       	std	Y+1, r24	; 0x01
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	8a 83       	std	Y+2, r24	; 0x02
 4d8:	be 01       	movw	r22, r28
 4da:	6f 5f       	subi	r22, 0xFF	; 255
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	86 e3       	ldi	r24, 0x36	; 54
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	08 95       	ret

000004f4 <MCAL_USART_ReceiveData>:
 4f4:	61 11       	cpse	r22, r1
 4f6:	15 c0       	rjmp	.+42     	; 0x522 <MCAL_USART_ReceiveData+0x2e>
 4f8:	5f 9b       	sbis	0x0b, 7	; 11
 4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <MCAL_USART_ReceiveData+0x4>
 4fc:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 500:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 504:	23 81       	ldd	r18, Z+3	; 0x03
 506:	25 30       	cpi	r18, 0x05	; 5
 508:	31 f4       	brne	.+12     	; 0x516 <MCAL_USART_ReceiveData+0x22>
 50a:	2a b1       	in	r18, 0x0a	; 10
 50c:	26 95       	lsr	r18
 50e:	21 70       	andi	r18, 0x01	; 1
 510:	fc 01       	movw	r30, r24
 512:	10 82       	st	Z, r1
 514:	21 83       	std	Z+1, r18	; 0x01
 516:	2c b1       	in	r18, 0x0c	; 12
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	fc 01       	movw	r30, r24
 51c:	31 83       	std	Z+1, r19	; 0x01
 51e:	20 83       	st	Z, r18
 520:	08 95       	ret
 522:	5f 9b       	sbis	0x0b, 7	; 11
 524:	12 c0       	rjmp	.+36     	; 0x54a <MCAL_USART_ReceiveData+0x56>
 526:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 52a:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 52e:	23 81       	ldd	r18, Z+3	; 0x03
 530:	25 30       	cpi	r18, 0x05	; 5
 532:	31 f4       	brne	.+12     	; 0x540 <MCAL_USART_ReceiveData+0x4c>
 534:	2a b1       	in	r18, 0x0a	; 10
 536:	26 95       	lsr	r18
 538:	21 70       	andi	r18, 0x01	; 1
 53a:	fc 01       	movw	r30, r24
 53c:	10 82       	st	Z, r1
 53e:	21 83       	std	Z+1, r18	; 0x01
 540:	2c b1       	in	r18, 0x0c	; 12
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	fc 01       	movw	r30, r24
 546:	31 83       	std	Z+1, r19	; 0x01
 548:	20 83       	st	Z, r18
 54a:	08 95       	ret

0000054c <__vector_13>:
 *
 * ===============================================================
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	2f 93       	push	r18
 558:	3f 93       	push	r19
 55a:	4f 93       	push	r20
 55c:	5f 93       	push	r21
 55e:	6f 93       	push	r22
 560:	7f 93       	push	r23
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	af 93       	push	r26
 568:	bf 93       	push	r27
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[2]();
 56e:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <GPU_IRQ_CALL+0x4>
 572:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <GPU_IRQ_CALL+0x5>
 576:	09 95       	icall
}
 578:	ff 91       	pop	r31
 57a:	ef 91       	pop	r30
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	7f 91       	pop	r23
 586:	6f 91       	pop	r22
 588:	5f 91       	pop	r21
 58a:	4f 91       	pop	r20
 58c:	3f 91       	pop	r19
 58e:	2f 91       	pop	r18
 590:	0f 90       	pop	r0
 592:	0f be       	out	0x3f, r0	; 63
 594:	0f 90       	pop	r0
 596:	1f 90       	pop	r1
 598:	18 95       	reti

0000059a <__vector_14>:

void __vector_14 (void) __attribute__((signal));
void __vector_14 (void)
{
 59a:	1f 92       	push	r1
 59c:	0f 92       	push	r0
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	0f 92       	push	r0
 5a2:	11 24       	eor	r1, r1
 5a4:	2f 93       	push	r18
 5a6:	3f 93       	push	r19
 5a8:	4f 93       	push	r20
 5aa:	5f 93       	push	r21
 5ac:	6f 93       	push	r22
 5ae:	7f 93       	push	r23
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
 5b4:	af 93       	push	r26
 5b6:	bf 93       	push	r27
 5b8:	ef 93       	push	r30
 5ba:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[1]();
 5bc:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <GPU_IRQ_CALL+0x2>
 5c0:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <GPU_IRQ_CALL+0x3>
 5c4:	09 95       	icall
}
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_15>:

void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[0]();
 60a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <GPU_IRQ_CALL>
 60e:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <GPU_IRQ_CALL+0x1>
 612:	09 95       	icall
}
 614:	ff 91       	pop	r31
 616:	ef 91       	pop	r30
 618:	bf 91       	pop	r27
 61a:	af 91       	pop	r26
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	7f 91       	pop	r23
 622:	6f 91       	pop	r22
 624:	5f 91       	pop	r21
 626:	4f 91       	pop	r20
 628:	3f 91       	pop	r19
 62a:	2f 91       	pop	r18
 62c:	0f 90       	pop	r0
 62e:	0f be       	out	0x3f, r0	; 63
 630:	0f 90       	pop	r0
 632:	1f 90       	pop	r1
 634:	18 95       	reti

00000636 <LCD_cmd>:
	_delay_ms(2);
#endif
}

void LCD_cmd( unsigned char cmd )
{
 636:	cf 93       	push	r28
 638:	c8 2f       	mov	r28, r24
	_delay_us(1);       
	MCAL_GPIO_WritePin( lcd_control_Port , en , GPIO_PIN_RESET ) ;               
	_delay_us(200);
#endif
#ifdef _4_bit_mode
	MCAL_GPIO_WritePort(lcd_Data_Port, (cmd & 0XF0));
 63a:	68 2f       	mov	r22, r24
 63c:	60 7f       	andi	r22, 0xF0	; 240
 63e:	89 e3       	ldi	r24, 0x39	; 57
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 f5 00 	call	0x1ea	; 0x1ea <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);            // rs=0 i.e select command reg
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	62 e0       	ldi	r22, 0x02	; 2
 64a:	86 e3       	ldi	r24, 0x36	; 54
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 652:	40 e0       	ldi	r20, 0x00	; 0
 654:	68 e0       	ldi	r22, 0x08	; 8
 656:	86 e3       	ldi	r24, 0x36	; 54
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 65e:	41 e0       	ldi	r20, 0x01	; 1
 660:	64 e0       	ldi	r22, 0x04	; 4
 662:	86 e3       	ldi	r24, 0x36	; 54
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66a:	82 e0       	ldi	r24, 0x02	; 2
 66c:	8a 95       	dec	r24
 66e:	f1 f7       	brne	.-4      	; 0x66c <LCD_cmd+0x36>
 670:	00 c0       	rjmp	.+0      	; 0x672 <LCD_cmd+0x3c>
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 672:	40 e0       	ldi	r20, 0x00	; 0
 674:	64 e0       	ldi	r22, 0x04	; 4
 676:	86 e3       	ldi	r24, 0x36	; 54
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
 67e:	8f e8       	ldi	r24, 0x8F	; 143
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <LCD_cmd+0x4c>
 686:	00 c0       	rjmp	.+0      	; 0x688 <LCD_cmd+0x52>
 688:	00 00       	nop
	_delay_us(200);
	MCAL_GPIO_WritePort(lcd_Data_Port, ( cmd & 0X0F) << 4);               //sending lower nibble of 8 bit 
 68a:	90 e1       	ldi	r25, 0x10	; 16
 68c:	c9 9f       	mul	r28, r25
 68e:	b0 01       	movw	r22, r0
 690:	11 24       	eor	r1, r1
 692:	89 e3       	ldi	r24, 0x39	; 57
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 f5 00 	call	0x1ea	; 0x1ea <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);            // rs=0 i.e select command reg
 69a:	40 e0       	ldi	r20, 0x00	; 0
 69c:	62 e0       	ldi	r22, 0x02	; 2
 69e:	86 e3       	ldi	r24, 0x36	; 54
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 6a6:	40 e0       	ldi	r20, 0x00	; 0
 6a8:	68 e0       	ldi	r22, 0x08	; 8
 6aa:	86 e3       	ldi	r24, 0x36	; 54
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 6b2:	41 e0       	ldi	r20, 0x01	; 1
 6b4:	64 e0       	ldi	r22, 0x04	; 4
 6b6:	86 e3       	ldi	r24, 0x36	; 54
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	8a 95       	dec	r24
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <LCD_cmd+0x8a>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <LCD_cmd+0x90>
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	64 e0       	ldi	r22, 0x04	; 4
 6ca:	86 e3       	ldi	r24, 0x36	; 54
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d2:	8f e9       	ldi	r24, 0x9F	; 159
 6d4:	9f e0       	ldi	r25, 0x0F	; 15
 6d6:	01 97       	sbiw	r24, 0x01	; 1
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCD_cmd+0xa0>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <LCD_cmd+0xa6>
 6dc:	00 00       	nop
	_delay_ms(2);
#endif
}
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <LCD_init>:
#include "LCD.h"

#define _4_bit_mode

void LCD_init(void)
{
 6e2:	ef 92       	push	r14
 6e4:	ff 92       	push	r15
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <LCD_init+0xe>
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
	GPIO_Pinconfig_t config ;
		
	// set port lcd_data as output
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 6f4:	13 e0       	ldi	r17, 0x03	; 3
 6f6:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_0 ;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 6fc:	be 01       	movw	r22, r28
 6fe:	6f 5f       	subi	r22, 0xFF	; 255
 700:	7f 4f       	sbci	r23, 0xFF	; 255
 702:	89 e3       	ldi	r24, 0x39	; 57
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
		
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 70a:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_1 ;
 70c:	68 94       	set
 70e:	ff 24       	eor	r15, r15
 710:	f1 f8       	bld	r15, 1
 712:	f9 82       	std	Y+1, r15	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 714:	be 01       	movw	r22, r28
 716:	6f 5f       	subi	r22, 0xFF	; 255
 718:	7f 4f       	sbci	r23, 0xFF	; 255
 71a:	89 e3       	ldi	r24, 0x39	; 57
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
				
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 722:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_2 ;
 724:	68 94       	set
 726:	ee 24       	eor	r14, r14
 728:	e2 f8       	bld	r14, 2
 72a:	e9 82       	std	Y+1, r14	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 72c:	be 01       	movw	r22, r28
 72e:	6f 5f       	subi	r22, 0xFF	; 255
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	89 e3       	ldi	r24, 0x39	; 57
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
						
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 73a:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_3 ;
 73c:	08 e0       	ldi	r16, 0x08	; 8
 73e:	09 83       	std	Y+1, r16	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 740:	be 01       	movw	r22, r28
 742:	6f 5f       	subi	r22, 0xFF	; 255
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	89 e3       	ldi	r24, 0x39	; 57
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
								
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 74e:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_4 ;
 750:	80 e1       	ldi	r24, 0x10	; 16
 752:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 754:	be 01       	movw	r22, r28
 756:	6f 5f       	subi	r22, 0xFF	; 255
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	89 e3       	ldi	r24, 0x39	; 57
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
										
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 762:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_5 ;
 764:	80 e2       	ldi	r24, 0x20	; 32
 766:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 768:	be 01       	movw	r22, r28
 76a:	6f 5f       	subi	r22, 0xFF	; 255
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	89 e3       	ldi	r24, 0x39	; 57
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
												
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 776:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_6 ;
 778:	80 e4       	ldi	r24, 0x40	; 64
 77a:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 77c:	be 01       	movw	r22, r28
 77e:	6f 5f       	subi	r22, 0xFF	; 255
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	89 e3       	ldi	r24, 0x39	; 57
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
														
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 78a:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_7 ;
 78c:	80 e8       	ldi	r24, 0x80	; 128
 78e:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 790:	be 01       	movw	r22, r28
 792:	6f 5f       	subi	r22, 0xFF	; 255
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	89 e3       	ldi	r24, 0x39	; 57
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
	
	// set en rs rw as outpit
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 79e:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = en ;
 7a0:	e9 82       	std	Y+1, r14	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
 7a2:	be 01       	movw	r22, r28
 7a4:	6f 5f       	subi	r22, 0xFF	; 255
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	86 e3       	ldi	r24, 0x36	; 54
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
	
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 7b0:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = rs ;
 7b2:	f9 82       	std	Y+1, r15	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
 7b4:	be 01       	movw	r22, r28
 7b6:	6f 5f       	subi	r22, 0xFF	; 255
 7b8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ba:	86 e3       	ldi	r24, 0x36	; 54
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
	
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 7c2:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = RW ;
 7c4:	09 83       	std	Y+1, r16	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
 7c6:	be 01       	movw	r22, r28
 7c8:	6f 5f       	subi	r22, 0xFF	; 255
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	86 e3       	ldi	r24, 0x36	; 54
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
 7d4:	8f e3       	ldi	r24, 0x3F	; 63
 7d6:	9c e9       	ldi	r25, 0x9C	; 156
 7d8:	01 97       	sbiw	r24, 0x01	; 1
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <LCD_init+0xf6>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <LCD_init+0xfc>
 7de:	00 00       	nop
	LCD_cmd(Entry_Mode);                        // take cursor to next position "shift cursor to right"
	LCD_cmd(Clear_Display);                    // Clear display screen
	_delay_ms(2);
#endif
#ifdef _4_bit_mode
	LCD_cmd(0x02);                // send for 4 bit initialization of LCD "shift cursor to left"
 7e0:	82 e0       	ldi	r24, 0x02	; 2
 7e2:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_cmd>
	LCD_cmd(_2L_4b);                              // 2 line 5*7 matrix in 4-bit mode
 7e6:	88 e2       	ldi	r24, 0x28	; 40
 7e8:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_cmd>
	LCD_cmd(Entry_Mode);                        // take cursor to next position "shift cursor to right"
 7ec:	86 e0       	ldi	r24, 0x06	; 6
 7ee:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_cmd>
	LCD_cmd(beginning_of_the_first_line);
 7f2:	80 e8       	ldi	r24, 0x80	; 128
 7f4:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_cmd>
	LCD_cmd(Display_on_Cursor_blinking);              // Display on cursor off
 7f8:	8f e0       	ldi	r24, 0x0F	; 15
 7fa:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_cmd>
	LCD_cmd(Clear_Display);                    // Clear display screen
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_cmd>
 804:	8f e9       	ldi	r24, 0x9F	; 159
 806:	9f e0       	ldi	r25, 0x0F	; 15
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80e:	00 00       	nop
	_delay_ms(2);
#endif
}
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	1f 91       	pop	r17
 81a:	0f 91       	pop	r16
 81c:	ff 90       	pop	r15
 81e:	ef 90       	pop	r14
 820:	08 95       	ret

00000822 <lcd_Clear>:
#endif
}

void lcd_Clear()
{
	LCD_cmd (0x01);                   // send hex 01 to Clear display
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_cmd>
 828:	8f e9       	ldi	r24, 0x9F	; 159
 82a:	9f e0       	ldi	r25, 0x0F	; 15
 82c:	01 97       	sbiw	r24, 0x01	; 1
 82e:	f1 f7       	brne	.-4      	; 0x82c <lcd_Clear+0xa>
 830:	00 c0       	rjmp	.+0      	; 0x832 <lcd_Clear+0x10>
 832:	00 00       	nop
	_delay_ms(2);
	LCD_cmd(0x80);                   // send hex 80 to Force Cursor to beginning of 1st line
 834:	80 e8       	ldi	r24, 0x80	; 128
 836:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_cmd>
 83a:	08 95       	ret

0000083c <GOTO_XY>:
}

void GOTO_XY(unsigned char line , unsigned char posision)
{
	if (line==0)
 83c:	81 11       	cpse	r24, r1
 83e:	07 c0       	rjmp	.+14     	; 0x84e <GOTO_XY+0x12>
	{
		if(posision>=0 && posision<16)
 840:	60 31       	cpi	r22, 0x10	; 16
 842:	68 f4       	brcc	.+26     	; 0x85e <GOTO_XY+0x22>
			LCD_cmd(0X80+posision);
 844:	80 e8       	ldi	r24, 0x80	; 128
 846:	86 0f       	add	r24, r22
 848:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_cmd>
 84c:	08 95       	ret
	}
	else if (line==1)
 84e:	81 30       	cpi	r24, 0x01	; 1
 850:	31 f4       	brne	.+12     	; 0x85e <GOTO_XY+0x22>
	{
		if(posision>=0 && posision<16)
 852:	60 31       	cpi	r22, 0x10	; 16
 854:	20 f4       	brcc	.+8      	; 0x85e <GOTO_XY+0x22>
			LCD_cmd(0XC0+posision);
 856:	80 ec       	ldi	r24, 0xC0	; 192
 858:	86 0f       	add	r24, r22
 85a:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_cmd>
 85e:	08 95       	ret

00000860 <LCD_Character>:
	}
}

void LCD_Character( unsigned char character )
{
 860:	cf 93       	push	r28
 862:	c8 2f       	mov	r28, r24
	_delay_us(1);
	MCAL_GPIO_WritePin( lcd_control_Port , en , GPIO_PIN_RESET ) ;
	_delay_ms(2);
#endif
#ifdef _4_bit_mode
	MCAL_GPIO_WritePort(lcd_Data_Port, (character & 0XF0));
 864:	68 2f       	mov	r22, r24
 866:	60 7f       	andi	r22, 0xF0	; 240
 868:	89 e3       	ldi	r24, 0x39	; 57
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_SET);            // rs=0 i.e select DATA reg
 870:	41 e0       	ldi	r20, 0x01	; 1
 872:	62 e0       	ldi	r22, 0x02	; 2
 874:	86 e3       	ldi	r24, 0x36	; 54
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	68 e0       	ldi	r22, 0x08	; 8
 880:	86 e3       	ldi	r24, 0x36	; 54
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 888:	41 e0       	ldi	r20, 0x01	; 1
 88a:	64 e0       	ldi	r22, 0x04	; 4
 88c:	86 e3       	ldi	r24, 0x36	; 54
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 894:	82 e0       	ldi	r24, 0x02	; 2
 896:	8a 95       	dec	r24
 898:	f1 f7       	brne	.-4      	; 0x896 <LCD_Character+0x36>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <LCD_Character+0x3c>
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 89c:	40 e0       	ldi	r20, 0x00	; 0
 89e:	64 e0       	ldi	r22, 0x04	; 4
 8a0:	86 e3       	ldi	r24, 0x36	; 54
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
 8a8:	8f e8       	ldi	r24, 0x8F	; 143
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	01 97       	sbiw	r24, 0x01	; 1
 8ae:	f1 f7       	brne	.-4      	; 0x8ac <LCD_Character+0x4c>
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <LCD_Character+0x52>
 8b2:	00 00       	nop
	_delay_us(200);
	MCAL_GPIO_WritePort(lcd_Data_Port, ( character & 0X0F) << 4);               //sending lower nibble of 8 bit i.e 1byte
 8b4:	90 e1       	ldi	r25, 0x10	; 16
 8b6:	c9 9f       	mul	r28, r25
 8b8:	b0 01       	movw	r22, r0
 8ba:	11 24       	eor	r1, r1
 8bc:	89 e3       	ldi	r24, 0x39	; 57
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_SET);            // rs=0 i.e select DATA reg
 8c4:	41 e0       	ldi	r20, 0x01	; 1
 8c6:	62 e0       	ldi	r22, 0x02	; 2
 8c8:	86 e3       	ldi	r24, 0x36	; 54
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 8d0:	40 e0       	ldi	r20, 0x00	; 0
 8d2:	68 e0       	ldi	r22, 0x08	; 8
 8d4:	86 e3       	ldi	r24, 0x36	; 54
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 8dc:	41 e0       	ldi	r20, 0x01	; 1
 8de:	64 e0       	ldi	r22, 0x04	; 4
 8e0:	86 e3       	ldi	r24, 0x36	; 54
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	8a 95       	dec	r24
 8ec:	f1 f7       	brne	.-4      	; 0x8ea <LCD_Character+0x8a>
 8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <LCD_Character+0x90>
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 8f0:	40 e0       	ldi	r20, 0x00	; 0
 8f2:	64 e0       	ldi	r22, 0x04	; 4
 8f4:	86 e3       	ldi	r24, 0x36	; 54
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8fc:	8f e9       	ldi	r24, 0x9F	; 159
 8fe:	9f e0       	ldi	r25, 0x0F	; 15
 900:	01 97       	sbiw	r24, 0x01	; 1
 902:	f1 f7       	brne	.-4      	; 0x900 <LCD_Character+0xa0>
 904:	00 c0       	rjmp	.+0      	; 0x906 <LCD_Character+0xa6>
 906:	00 00       	nop
	_delay_ms(2);
#endif
}
 908:	cf 91       	pop	r28
 90a:	08 95       	ret

0000090c <USART_CALL>:

 char DATA  ;

void USART_CALL(void)
{
	MCAL_USART_ReceiveData(&DATA , Disable) ;
 90c:	61 e0       	ldi	r22, 0x01	; 1
 90e:	88 e7       	ldi	r24, 0x78	; 120
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MCAL_USART_ReceiveData>
	GOTO_XY(1 , 0 ) ;
 916:	60 e0       	ldi	r22, 0x00	; 0
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	0e 94 1e 04 	call	0x83c	; 0x83c <GOTO_XY>
	LCD_Character( DATA ) ;
 91e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <DATA>
 922:	0e 94 30 04 	call	0x860	; 0x860 <LCD_Character>
 926:	2f ef       	ldi	r18, 0xFF	; 255
 928:	89 e6       	ldi	r24, 0x69	; 105
 92a:	98 e1       	ldi	r25, 0x18	; 24
 92c:	21 50       	subi	r18, 0x01	; 1
 92e:	80 40       	sbci	r24, 0x00	; 0
 930:	90 40       	sbci	r25, 0x00	; 0
 932:	e1 f7       	brne	.-8      	; 0x92c <USART_CALL+0x20>
 934:	00 c0       	rjmp	.+0      	; 0x936 <USART_CALL+0x2a>
 936:	00 00       	nop
	_delay_ms( 1000);
	lcd_Clear();
 938:	0e 94 11 04 	call	0x822	; 0x822 <lcd_Clear>
 93c:	08 95       	ret

0000093e <USART_init>:
}

void USART_init (void)
{
 93e:	cf 93       	push	r28
 940:	df 93       	push	r29
 942:	cd b7       	in	r28, 0x3d	; 61
 944:	de b7       	in	r29, 0x3e	; 62
 946:	2b 97       	sbiw	r28, 0x0b	; 11
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	f8 94       	cli
 94c:	de bf       	out	0x3e, r29	; 62
 94e:	0f be       	out	0x3f, r0	; 63
 950:	cd bf       	out	0x3d, r28	; 61
	USART_config_t config ;
	config.BAUDRATE = USART_BAUDRATE_9600 ;
 952:	80 e8       	ldi	r24, 0x80	; 128
 954:	95 e2       	ldi	r25, 0x25	; 37
 956:	9f 83       	std	Y+7, r25	; 0x07
 958:	8e 83       	std	Y+6, r24	; 0x06
	config.Communication_MODE = USART_Communication_MODE_Asynchronous_Double_Speed ;
 95a:	1b 82       	std	Y+3, r1	; 0x03
	config.IRQ_EN = USART_IRQ_ENABLE_RX ;
 95c:	83 e0       	ldi	r24, 0x03	; 3
 95e:	89 87       	std	Y+9, r24	; 0x09
	config.MODE = USART_MODE_TX_RX ;
 960:	88 e1       	ldi	r24, 0x18	; 24
 962:	89 83       	std	Y+1, r24	; 0x01
	config.NUM_DATA_BIT = USART_NUM_DATA_BIT_8 ;
 964:	84 e0       	ldi	r24, 0x04	; 4
 966:	8c 83       	std	Y+4, r24	; 0x04
	config.NUM_STOP_BIT = USART_NUM_STOP_BIT_1 ;
 968:	87 ef       	ldi	r24, 0xF7	; 247
 96a:	8d 83       	std	Y+5, r24	; 0x05
	config.P_IRQ_CALL = USART_CALL ;
 96c:	86 e8       	ldi	r24, 0x86	; 134
 96e:	94 e0       	ldi	r25, 0x04	; 4
 970:	9b 87       	std	Y+11, r25	; 0x0b
 972:	8a 87       	std	Y+10, r24	; 0x0a
	config.PARITY = USART_PARITY_Disable ;
 974:	8f ec       	ldi	r24, 0xCF	; 207
 976:	88 87       	std	Y+8, r24	; 0x08
	MCAL_USART_Init( &config ) ;
 978:	ce 01       	movw	r24, r28
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <MCAL_USART_Init>
}
 980:	2b 96       	adiw	r28, 0x0b	; 11
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	f8 94       	cli
 986:	de bf       	out	0x3e, r29	; 62
 988:	0f be       	out	0x3f, r0	; 63
 98a:	cd bf       	out	0x3d, r28	; 61
 98c:	df 91       	pop	r29
 98e:	cf 91       	pop	r28
 990:	08 95       	ret

00000992 <main>:

char number [10]={ '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' ,'8' , '9' } ;
int main(void)
{
	int i =0;
	LCD_init() ;
 992:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LCD_init>
	USART_init();
 996:	0e 94 9f 04 	call	0x93e	; 0x93e <USART_init>
}

char number [10]={ '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' ,'8' , '9' } ;
int main(void)
{
	int i =0;
 99a:	c0 e0       	ldi	r28, 0x00	; 0
 99c:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_init() ;
	USART_init();
    while (1) 
    {
		LCD_Character( number [i] ) ;
 99e:	fe 01       	movw	r30, r28
 9a0:	e0 5a       	subi	r30, 0xA0	; 160
 9a2:	ff 4f       	sbci	r31, 0xFF	; 255
 9a4:	80 81       	ld	r24, Z
 9a6:	0e 94 30 04 	call	0x860	; 0x860 <LCD_Character>
		i++ ;
 9aa:	21 96       	adiw	r28, 0x01	; 1
		if(i==10)
 9ac:	ca 30       	cpi	r28, 0x0A	; 10
 9ae:	d1 05       	cpc	r29, r1
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <main+0x24>
			i=0 ;
 9b2:	c0 e0       	ldi	r28, 0x00	; 0
 9b4:	d0 e0       	ldi	r29, 0x00	; 0
 9b6:	2f ef       	ldi	r18, 0xFF	; 255
 9b8:	84 e3       	ldi	r24, 0x34	; 52
 9ba:	9c e0       	ldi	r25, 0x0C	; 12
 9bc:	21 50       	subi	r18, 0x01	; 1
 9be:	80 40       	sbci	r24, 0x00	; 0
 9c0:	90 40       	sbci	r25, 0x00	; 0
 9c2:	e1 f7       	brne	.-8      	; 0x9bc <main+0x2a>
 9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <main+0x34>
 9c6:	00 00       	nop
		_delay_ms( 500) ;
		lcd_Clear();
 9c8:	0e 94 11 04 	call	0x822	; 0x822 <lcd_Clear>
    }
 9cc:	e8 cf       	rjmp	.-48     	; 0x99e <main+0xc>

000009ce <__subsf3>:
 9ce:	50 58       	subi	r21, 0x80	; 128

000009d0 <__addsf3>:
 9d0:	bb 27       	eor	r27, r27
 9d2:	aa 27       	eor	r26, r26
 9d4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__addsf3x>
 9d8:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_round>
 9dc:	0e 94 3b 06 	call	0xc76	; 0xc76 <__fp_pscA>
 9e0:	38 f0       	brcs	.+14     	; 0x9f0 <__addsf3+0x20>
 9e2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fp_pscB>
 9e6:	20 f0       	brcs	.+8      	; 0x9f0 <__addsf3+0x20>
 9e8:	39 f4       	brne	.+14     	; 0x9f8 <__addsf3+0x28>
 9ea:	9f 3f       	cpi	r25, 0xFF	; 255
 9ec:	19 f4       	brne	.+6      	; 0x9f4 <__addsf3+0x24>
 9ee:	26 f4       	brtc	.+8      	; 0x9f8 <__addsf3+0x28>
 9f0:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_nan>
 9f4:	0e f4       	brtc	.+2      	; 0x9f8 <__addsf3+0x28>
 9f6:	e0 95       	com	r30
 9f8:	e7 fb       	bst	r30, 7
 9fa:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_inf>

000009fe <__addsf3x>:
 9fe:	e9 2f       	mov	r30, r25
 a00:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_split3>
 a04:	58 f3       	brcs	.-42     	; 0x9dc <__addsf3+0xc>
 a06:	ba 17       	cp	r27, r26
 a08:	62 07       	cpc	r22, r18
 a0a:	73 07       	cpc	r23, r19
 a0c:	84 07       	cpc	r24, r20
 a0e:	95 07       	cpc	r25, r21
 a10:	20 f0       	brcs	.+8      	; 0xa1a <__addsf3x+0x1c>
 a12:	79 f4       	brne	.+30     	; 0xa32 <__addsf3x+0x34>
 a14:	a6 f5       	brtc	.+104    	; 0xa7e <__addsf3x+0x80>
 a16:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_zero>
 a1a:	0e f4       	brtc	.+2      	; 0xa1e <__addsf3x+0x20>
 a1c:	e0 95       	com	r30
 a1e:	0b 2e       	mov	r0, r27
 a20:	ba 2f       	mov	r27, r26
 a22:	a0 2d       	mov	r26, r0
 a24:	0b 01       	movw	r0, r22
 a26:	b9 01       	movw	r22, r18
 a28:	90 01       	movw	r18, r0
 a2a:	0c 01       	movw	r0, r24
 a2c:	ca 01       	movw	r24, r20
 a2e:	a0 01       	movw	r20, r0
 a30:	11 24       	eor	r1, r1
 a32:	ff 27       	eor	r31, r31
 a34:	59 1b       	sub	r21, r25
 a36:	99 f0       	breq	.+38     	; 0xa5e <__addsf3x+0x60>
 a38:	59 3f       	cpi	r21, 0xF9	; 249
 a3a:	50 f4       	brcc	.+20     	; 0xa50 <__addsf3x+0x52>
 a3c:	50 3e       	cpi	r21, 0xE0	; 224
 a3e:	68 f1       	brcs	.+90     	; 0xa9a <__addsf3x+0x9c>
 a40:	1a 16       	cp	r1, r26
 a42:	f0 40       	sbci	r31, 0x00	; 0
 a44:	a2 2f       	mov	r26, r18
 a46:	23 2f       	mov	r18, r19
 a48:	34 2f       	mov	r19, r20
 a4a:	44 27       	eor	r20, r20
 a4c:	58 5f       	subi	r21, 0xF8	; 248
 a4e:	f3 cf       	rjmp	.-26     	; 0xa36 <__addsf3x+0x38>
 a50:	46 95       	lsr	r20
 a52:	37 95       	ror	r19
 a54:	27 95       	ror	r18
 a56:	a7 95       	ror	r26
 a58:	f0 40       	sbci	r31, 0x00	; 0
 a5a:	53 95       	inc	r21
 a5c:	c9 f7       	brne	.-14     	; 0xa50 <__addsf3x+0x52>
 a5e:	7e f4       	brtc	.+30     	; 0xa7e <__addsf3x+0x80>
 a60:	1f 16       	cp	r1, r31
 a62:	ba 0b       	sbc	r27, r26
 a64:	62 0b       	sbc	r22, r18
 a66:	73 0b       	sbc	r23, r19
 a68:	84 0b       	sbc	r24, r20
 a6a:	ba f0       	brmi	.+46     	; 0xa9a <__addsf3x+0x9c>
 a6c:	91 50       	subi	r25, 0x01	; 1
 a6e:	a1 f0       	breq	.+40     	; 0xa98 <__addsf3x+0x9a>
 a70:	ff 0f       	add	r31, r31
 a72:	bb 1f       	adc	r27, r27
 a74:	66 1f       	adc	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	c2 f7       	brpl	.-16     	; 0xa6c <__addsf3x+0x6e>
 a7c:	0e c0       	rjmp	.+28     	; 0xa9a <__addsf3x+0x9c>
 a7e:	ba 0f       	add	r27, r26
 a80:	62 1f       	adc	r22, r18
 a82:	73 1f       	adc	r23, r19
 a84:	84 1f       	adc	r24, r20
 a86:	48 f4       	brcc	.+18     	; 0xa9a <__addsf3x+0x9c>
 a88:	87 95       	ror	r24
 a8a:	77 95       	ror	r23
 a8c:	67 95       	ror	r22
 a8e:	b7 95       	ror	r27
 a90:	f7 95       	ror	r31
 a92:	9e 3f       	cpi	r25, 0xFE	; 254
 a94:	08 f0       	brcs	.+2      	; 0xa98 <__addsf3x+0x9a>
 a96:	b0 cf       	rjmp	.-160    	; 0x9f8 <__addsf3+0x28>
 a98:	93 95       	inc	r25
 a9a:	88 0f       	add	r24, r24
 a9c:	08 f0       	brcs	.+2      	; 0xaa0 <__addsf3x+0xa2>
 a9e:	99 27       	eor	r25, r25
 aa0:	ee 0f       	add	r30, r30
 aa2:	97 95       	ror	r25
 aa4:	87 95       	ror	r24
 aa6:	08 95       	ret

00000aa8 <__divsf3>:
 aa8:	0e 94 68 05 	call	0xad0	; 0xad0 <__divsf3x>
 aac:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_round>
 ab0:	0e 94 42 06 	call	0xc84	; 0xc84 <__fp_pscB>
 ab4:	58 f0       	brcs	.+22     	; 0xacc <__divsf3+0x24>
 ab6:	0e 94 3b 06 	call	0xc76	; 0xc76 <__fp_pscA>
 aba:	40 f0       	brcs	.+16     	; 0xacc <__divsf3+0x24>
 abc:	29 f4       	brne	.+10     	; 0xac8 <__divsf3+0x20>
 abe:	5f 3f       	cpi	r21, 0xFF	; 255
 ac0:	29 f0       	breq	.+10     	; 0xacc <__divsf3+0x24>
 ac2:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_inf>
 ac6:	51 11       	cpse	r21, r1
 ac8:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__fp_szero>
 acc:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_nan>

00000ad0 <__divsf3x>:
 ad0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_split3>
 ad4:	68 f3       	brcs	.-38     	; 0xab0 <__divsf3+0x8>

00000ad6 <__divsf3_pse>:
 ad6:	99 23       	and	r25, r25
 ad8:	b1 f3       	breq	.-20     	; 0xac6 <__divsf3+0x1e>
 ada:	55 23       	and	r21, r21
 adc:	91 f3       	breq	.-28     	; 0xac2 <__divsf3+0x1a>
 ade:	95 1b       	sub	r25, r21
 ae0:	55 0b       	sbc	r21, r21
 ae2:	bb 27       	eor	r27, r27
 ae4:	aa 27       	eor	r26, r26
 ae6:	62 17       	cp	r22, r18
 ae8:	73 07       	cpc	r23, r19
 aea:	84 07       	cpc	r24, r20
 aec:	38 f0       	brcs	.+14     	; 0xafc <__divsf3_pse+0x26>
 aee:	9f 5f       	subi	r25, 0xFF	; 255
 af0:	5f 4f       	sbci	r21, 0xFF	; 255
 af2:	22 0f       	add	r18, r18
 af4:	33 1f       	adc	r19, r19
 af6:	44 1f       	adc	r20, r20
 af8:	aa 1f       	adc	r26, r26
 afa:	a9 f3       	breq	.-22     	; 0xae6 <__divsf3_pse+0x10>
 afc:	35 d0       	rcall	.+106    	; 0xb68 <__divsf3_pse+0x92>
 afe:	0e 2e       	mov	r0, r30
 b00:	3a f0       	brmi	.+14     	; 0xb10 <__divsf3_pse+0x3a>
 b02:	e0 e8       	ldi	r30, 0x80	; 128
 b04:	32 d0       	rcall	.+100    	; 0xb6a <__divsf3_pse+0x94>
 b06:	91 50       	subi	r25, 0x01	; 1
 b08:	50 40       	sbci	r21, 0x00	; 0
 b0a:	e6 95       	lsr	r30
 b0c:	00 1c       	adc	r0, r0
 b0e:	ca f7       	brpl	.-14     	; 0xb02 <__divsf3_pse+0x2c>
 b10:	2b d0       	rcall	.+86     	; 0xb68 <__divsf3_pse+0x92>
 b12:	fe 2f       	mov	r31, r30
 b14:	29 d0       	rcall	.+82     	; 0xb68 <__divsf3_pse+0x92>
 b16:	66 0f       	add	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	bb 1f       	adc	r27, r27
 b1e:	26 17       	cp	r18, r22
 b20:	37 07       	cpc	r19, r23
 b22:	48 07       	cpc	r20, r24
 b24:	ab 07       	cpc	r26, r27
 b26:	b0 e8       	ldi	r27, 0x80	; 128
 b28:	09 f0       	breq	.+2      	; 0xb2c <__divsf3_pse+0x56>
 b2a:	bb 0b       	sbc	r27, r27
 b2c:	80 2d       	mov	r24, r0
 b2e:	bf 01       	movw	r22, r30
 b30:	ff 27       	eor	r31, r31
 b32:	93 58       	subi	r25, 0x83	; 131
 b34:	5f 4f       	sbci	r21, 0xFF	; 255
 b36:	3a f0       	brmi	.+14     	; 0xb46 <__divsf3_pse+0x70>
 b38:	9e 3f       	cpi	r25, 0xFE	; 254
 b3a:	51 05       	cpc	r21, r1
 b3c:	78 f0       	brcs	.+30     	; 0xb5c <__divsf3_pse+0x86>
 b3e:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_inf>
 b42:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__fp_szero>
 b46:	5f 3f       	cpi	r21, 0xFF	; 255
 b48:	e4 f3       	brlt	.-8      	; 0xb42 <__divsf3_pse+0x6c>
 b4a:	98 3e       	cpi	r25, 0xE8	; 232
 b4c:	d4 f3       	brlt	.-12     	; 0xb42 <__divsf3_pse+0x6c>
 b4e:	86 95       	lsr	r24
 b50:	77 95       	ror	r23
 b52:	67 95       	ror	r22
 b54:	b7 95       	ror	r27
 b56:	f7 95       	ror	r31
 b58:	9f 5f       	subi	r25, 0xFF	; 255
 b5a:	c9 f7       	brne	.-14     	; 0xb4e <__divsf3_pse+0x78>
 b5c:	88 0f       	add	r24, r24
 b5e:	91 1d       	adc	r25, r1
 b60:	96 95       	lsr	r25
 b62:	87 95       	ror	r24
 b64:	97 f9       	bld	r25, 7
 b66:	08 95       	ret
 b68:	e1 e0       	ldi	r30, 0x01	; 1
 b6a:	66 0f       	add	r22, r22
 b6c:	77 1f       	adc	r23, r23
 b6e:	88 1f       	adc	r24, r24
 b70:	bb 1f       	adc	r27, r27
 b72:	62 17       	cp	r22, r18
 b74:	73 07       	cpc	r23, r19
 b76:	84 07       	cpc	r24, r20
 b78:	ba 07       	cpc	r27, r26
 b7a:	20 f0       	brcs	.+8      	; 0xb84 <__divsf3_pse+0xae>
 b7c:	62 1b       	sub	r22, r18
 b7e:	73 0b       	sbc	r23, r19
 b80:	84 0b       	sbc	r24, r20
 b82:	ba 0b       	sbc	r27, r26
 b84:	ee 1f       	adc	r30, r30
 b86:	88 f7       	brcc	.-30     	; 0xb6a <__divsf3_pse+0x94>
 b88:	e0 95       	com	r30
 b8a:	08 95       	ret

00000b8c <__fixunssfsi>:
 b8c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_splitA>
 b90:	88 f0       	brcs	.+34     	; 0xbb4 <__fixunssfsi+0x28>
 b92:	9f 57       	subi	r25, 0x7F	; 127
 b94:	98 f0       	brcs	.+38     	; 0xbbc <__fixunssfsi+0x30>
 b96:	b9 2f       	mov	r27, r25
 b98:	99 27       	eor	r25, r25
 b9a:	b7 51       	subi	r27, 0x17	; 23
 b9c:	b0 f0       	brcs	.+44     	; 0xbca <__fixunssfsi+0x3e>
 b9e:	e1 f0       	breq	.+56     	; 0xbd8 <__fixunssfsi+0x4c>
 ba0:	66 0f       	add	r22, r22
 ba2:	77 1f       	adc	r23, r23
 ba4:	88 1f       	adc	r24, r24
 ba6:	99 1f       	adc	r25, r25
 ba8:	1a f0       	brmi	.+6      	; 0xbb0 <__fixunssfsi+0x24>
 baa:	ba 95       	dec	r27
 bac:	c9 f7       	brne	.-14     	; 0xba0 <__fixunssfsi+0x14>
 bae:	14 c0       	rjmp	.+40     	; 0xbd8 <__fixunssfsi+0x4c>
 bb0:	b1 30       	cpi	r27, 0x01	; 1
 bb2:	91 f0       	breq	.+36     	; 0xbd8 <__fixunssfsi+0x4c>
 bb4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_zero>
 bb8:	b1 e0       	ldi	r27, 0x01	; 1
 bba:	08 95       	ret
 bbc:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_zero>
 bc0:	67 2f       	mov	r22, r23
 bc2:	78 2f       	mov	r23, r24
 bc4:	88 27       	eor	r24, r24
 bc6:	b8 5f       	subi	r27, 0xF8	; 248
 bc8:	39 f0       	breq	.+14     	; 0xbd8 <__fixunssfsi+0x4c>
 bca:	b9 3f       	cpi	r27, 0xF9	; 249
 bcc:	cc f3       	brlt	.-14     	; 0xbc0 <__fixunssfsi+0x34>
 bce:	86 95       	lsr	r24
 bd0:	77 95       	ror	r23
 bd2:	67 95       	ror	r22
 bd4:	b3 95       	inc	r27
 bd6:	d9 f7       	brne	.-10     	; 0xbce <__fixunssfsi+0x42>
 bd8:	3e f4       	brtc	.+14     	; 0xbe8 <__fixunssfsi+0x5c>
 bda:	90 95       	com	r25
 bdc:	80 95       	com	r24
 bde:	70 95       	com	r23
 be0:	61 95       	neg	r22
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	8f 4f       	sbci	r24, 0xFF	; 255
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	08 95       	ret

00000bea <__floatunsisf>:
 bea:	e8 94       	clt
 bec:	09 c0       	rjmp	.+18     	; 0xc00 <__floatsisf+0x12>

00000bee <__floatsisf>:
 bee:	97 fb       	bst	r25, 7
 bf0:	3e f4       	brtc	.+14     	; 0xc00 <__floatsisf+0x12>
 bf2:	90 95       	com	r25
 bf4:	80 95       	com	r24
 bf6:	70 95       	com	r23
 bf8:	61 95       	neg	r22
 bfa:	7f 4f       	sbci	r23, 0xFF	; 255
 bfc:	8f 4f       	sbci	r24, 0xFF	; 255
 bfe:	9f 4f       	sbci	r25, 0xFF	; 255
 c00:	99 23       	and	r25, r25
 c02:	a9 f0       	breq	.+42     	; 0xc2e <__floatsisf+0x40>
 c04:	f9 2f       	mov	r31, r25
 c06:	96 e9       	ldi	r25, 0x96	; 150
 c08:	bb 27       	eor	r27, r27
 c0a:	93 95       	inc	r25
 c0c:	f6 95       	lsr	r31
 c0e:	87 95       	ror	r24
 c10:	77 95       	ror	r23
 c12:	67 95       	ror	r22
 c14:	b7 95       	ror	r27
 c16:	f1 11       	cpse	r31, r1
 c18:	f8 cf       	rjmp	.-16     	; 0xc0a <__floatsisf+0x1c>
 c1a:	fa f4       	brpl	.+62     	; 0xc5a <__floatsisf+0x6c>
 c1c:	bb 0f       	add	r27, r27
 c1e:	11 f4       	brne	.+4      	; 0xc24 <__floatsisf+0x36>
 c20:	60 ff       	sbrs	r22, 0
 c22:	1b c0       	rjmp	.+54     	; 0xc5a <__floatsisf+0x6c>
 c24:	6f 5f       	subi	r22, 0xFF	; 255
 c26:	7f 4f       	sbci	r23, 0xFF	; 255
 c28:	8f 4f       	sbci	r24, 0xFF	; 255
 c2a:	9f 4f       	sbci	r25, 0xFF	; 255
 c2c:	16 c0       	rjmp	.+44     	; 0xc5a <__floatsisf+0x6c>
 c2e:	88 23       	and	r24, r24
 c30:	11 f0       	breq	.+4      	; 0xc36 <__floatsisf+0x48>
 c32:	96 e9       	ldi	r25, 0x96	; 150
 c34:	11 c0       	rjmp	.+34     	; 0xc58 <__floatsisf+0x6a>
 c36:	77 23       	and	r23, r23
 c38:	21 f0       	breq	.+8      	; 0xc42 <__floatsisf+0x54>
 c3a:	9e e8       	ldi	r25, 0x8E	; 142
 c3c:	87 2f       	mov	r24, r23
 c3e:	76 2f       	mov	r23, r22
 c40:	05 c0       	rjmp	.+10     	; 0xc4c <__floatsisf+0x5e>
 c42:	66 23       	and	r22, r22
 c44:	71 f0       	breq	.+28     	; 0xc62 <__floatsisf+0x74>
 c46:	96 e8       	ldi	r25, 0x86	; 134
 c48:	86 2f       	mov	r24, r22
 c4a:	70 e0       	ldi	r23, 0x00	; 0
 c4c:	60 e0       	ldi	r22, 0x00	; 0
 c4e:	2a f0       	brmi	.+10     	; 0xc5a <__floatsisf+0x6c>
 c50:	9a 95       	dec	r25
 c52:	66 0f       	add	r22, r22
 c54:	77 1f       	adc	r23, r23
 c56:	88 1f       	adc	r24, r24
 c58:	da f7       	brpl	.-10     	; 0xc50 <__floatsisf+0x62>
 c5a:	88 0f       	add	r24, r24
 c5c:	96 95       	lsr	r25
 c5e:	87 95       	ror	r24
 c60:	97 f9       	bld	r25, 7
 c62:	08 95       	ret

00000c64 <__fp_inf>:
 c64:	97 f9       	bld	r25, 7
 c66:	9f 67       	ori	r25, 0x7F	; 127
 c68:	80 e8       	ldi	r24, 0x80	; 128
 c6a:	70 e0       	ldi	r23, 0x00	; 0
 c6c:	60 e0       	ldi	r22, 0x00	; 0
 c6e:	08 95       	ret

00000c70 <__fp_nan>:
 c70:	9f ef       	ldi	r25, 0xFF	; 255
 c72:	80 ec       	ldi	r24, 0xC0	; 192
 c74:	08 95       	ret

00000c76 <__fp_pscA>:
 c76:	00 24       	eor	r0, r0
 c78:	0a 94       	dec	r0
 c7a:	16 16       	cp	r1, r22
 c7c:	17 06       	cpc	r1, r23
 c7e:	18 06       	cpc	r1, r24
 c80:	09 06       	cpc	r0, r25
 c82:	08 95       	ret

00000c84 <__fp_pscB>:
 c84:	00 24       	eor	r0, r0
 c86:	0a 94       	dec	r0
 c88:	12 16       	cp	r1, r18
 c8a:	13 06       	cpc	r1, r19
 c8c:	14 06       	cpc	r1, r20
 c8e:	05 06       	cpc	r0, r21
 c90:	08 95       	ret

00000c92 <__fp_round>:
 c92:	09 2e       	mov	r0, r25
 c94:	03 94       	inc	r0
 c96:	00 0c       	add	r0, r0
 c98:	11 f4       	brne	.+4      	; 0xc9e <__fp_round+0xc>
 c9a:	88 23       	and	r24, r24
 c9c:	52 f0       	brmi	.+20     	; 0xcb2 <__fp_round+0x20>
 c9e:	bb 0f       	add	r27, r27
 ca0:	40 f4       	brcc	.+16     	; 0xcb2 <__fp_round+0x20>
 ca2:	bf 2b       	or	r27, r31
 ca4:	11 f4       	brne	.+4      	; 0xcaa <__fp_round+0x18>
 ca6:	60 ff       	sbrs	r22, 0
 ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <__fp_round+0x20>
 caa:	6f 5f       	subi	r22, 0xFF	; 255
 cac:	7f 4f       	sbci	r23, 0xFF	; 255
 cae:	8f 4f       	sbci	r24, 0xFF	; 255
 cb0:	9f 4f       	sbci	r25, 0xFF	; 255
 cb2:	08 95       	ret

00000cb4 <__fp_split3>:
 cb4:	57 fd       	sbrc	r21, 7
 cb6:	90 58       	subi	r25, 0x80	; 128
 cb8:	44 0f       	add	r20, r20
 cba:	55 1f       	adc	r21, r21
 cbc:	59 f0       	breq	.+22     	; 0xcd4 <__fp_splitA+0x10>
 cbe:	5f 3f       	cpi	r21, 0xFF	; 255
 cc0:	71 f0       	breq	.+28     	; 0xcde <__fp_splitA+0x1a>
 cc2:	47 95       	ror	r20

00000cc4 <__fp_splitA>:
 cc4:	88 0f       	add	r24, r24
 cc6:	97 fb       	bst	r25, 7
 cc8:	99 1f       	adc	r25, r25
 cca:	61 f0       	breq	.+24     	; 0xce4 <__fp_splitA+0x20>
 ccc:	9f 3f       	cpi	r25, 0xFF	; 255
 cce:	79 f0       	breq	.+30     	; 0xcee <__fp_splitA+0x2a>
 cd0:	87 95       	ror	r24
 cd2:	08 95       	ret
 cd4:	12 16       	cp	r1, r18
 cd6:	13 06       	cpc	r1, r19
 cd8:	14 06       	cpc	r1, r20
 cda:	55 1f       	adc	r21, r21
 cdc:	f2 cf       	rjmp	.-28     	; 0xcc2 <__fp_split3+0xe>
 cde:	46 95       	lsr	r20
 ce0:	f1 df       	rcall	.-30     	; 0xcc4 <__fp_splitA>
 ce2:	08 c0       	rjmp	.+16     	; 0xcf4 <__fp_splitA+0x30>
 ce4:	16 16       	cp	r1, r22
 ce6:	17 06       	cpc	r1, r23
 ce8:	18 06       	cpc	r1, r24
 cea:	99 1f       	adc	r25, r25
 cec:	f1 cf       	rjmp	.-30     	; 0xcd0 <__fp_splitA+0xc>
 cee:	86 95       	lsr	r24
 cf0:	71 05       	cpc	r23, r1
 cf2:	61 05       	cpc	r22, r1
 cf4:	08 94       	sec
 cf6:	08 95       	ret

00000cf8 <__fp_zero>:
 cf8:	e8 94       	clt

00000cfa <__fp_szero>:
 cfa:	bb 27       	eor	r27, r27
 cfc:	66 27       	eor	r22, r22
 cfe:	77 27       	eor	r23, r23
 d00:	cb 01       	movw	r24, r22
 d02:	97 f9       	bld	r25, 7
 d04:	08 95       	ret

00000d06 <__mulsf3>:
 d06:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3x>
 d0a:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_round>
 d0e:	0e 94 3b 06 	call	0xc76	; 0xc76 <__fp_pscA>
 d12:	38 f0       	brcs	.+14     	; 0xd22 <__mulsf3+0x1c>
 d14:	0e 94 42 06 	call	0xc84	; 0xc84 <__fp_pscB>
 d18:	20 f0       	brcs	.+8      	; 0xd22 <__mulsf3+0x1c>
 d1a:	95 23       	and	r25, r21
 d1c:	11 f0       	breq	.+4      	; 0xd22 <__mulsf3+0x1c>
 d1e:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_inf>
 d22:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_nan>
 d26:	11 24       	eor	r1, r1
 d28:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__fp_szero>

00000d2c <__mulsf3x>:
 d2c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_split3>
 d30:	70 f3       	brcs	.-36     	; 0xd0e <__mulsf3+0x8>

00000d32 <__mulsf3_pse>:
 d32:	95 9f       	mul	r25, r21
 d34:	c1 f3       	breq	.-16     	; 0xd26 <__mulsf3+0x20>
 d36:	95 0f       	add	r25, r21
 d38:	50 e0       	ldi	r21, 0x00	; 0
 d3a:	55 1f       	adc	r21, r21
 d3c:	62 9f       	mul	r22, r18
 d3e:	f0 01       	movw	r30, r0
 d40:	72 9f       	mul	r23, r18
 d42:	bb 27       	eor	r27, r27
 d44:	f0 0d       	add	r31, r0
 d46:	b1 1d       	adc	r27, r1
 d48:	63 9f       	mul	r22, r19
 d4a:	aa 27       	eor	r26, r26
 d4c:	f0 0d       	add	r31, r0
 d4e:	b1 1d       	adc	r27, r1
 d50:	aa 1f       	adc	r26, r26
 d52:	64 9f       	mul	r22, r20
 d54:	66 27       	eor	r22, r22
 d56:	b0 0d       	add	r27, r0
 d58:	a1 1d       	adc	r26, r1
 d5a:	66 1f       	adc	r22, r22
 d5c:	82 9f       	mul	r24, r18
 d5e:	22 27       	eor	r18, r18
 d60:	b0 0d       	add	r27, r0
 d62:	a1 1d       	adc	r26, r1
 d64:	62 1f       	adc	r22, r18
 d66:	73 9f       	mul	r23, r19
 d68:	b0 0d       	add	r27, r0
 d6a:	a1 1d       	adc	r26, r1
 d6c:	62 1f       	adc	r22, r18
 d6e:	83 9f       	mul	r24, r19
 d70:	a0 0d       	add	r26, r0
 d72:	61 1d       	adc	r22, r1
 d74:	22 1f       	adc	r18, r18
 d76:	74 9f       	mul	r23, r20
 d78:	33 27       	eor	r19, r19
 d7a:	a0 0d       	add	r26, r0
 d7c:	61 1d       	adc	r22, r1
 d7e:	23 1f       	adc	r18, r19
 d80:	84 9f       	mul	r24, r20
 d82:	60 0d       	add	r22, r0
 d84:	21 1d       	adc	r18, r1
 d86:	82 2f       	mov	r24, r18
 d88:	76 2f       	mov	r23, r22
 d8a:	6a 2f       	mov	r22, r26
 d8c:	11 24       	eor	r1, r1
 d8e:	9f 57       	subi	r25, 0x7F	; 127
 d90:	50 40       	sbci	r21, 0x00	; 0
 d92:	9a f0       	brmi	.+38     	; 0xdba <__mulsf3_pse+0x88>
 d94:	f1 f0       	breq	.+60     	; 0xdd2 <__mulsf3_pse+0xa0>
 d96:	88 23       	and	r24, r24
 d98:	4a f0       	brmi	.+18     	; 0xdac <__mulsf3_pse+0x7a>
 d9a:	ee 0f       	add	r30, r30
 d9c:	ff 1f       	adc	r31, r31
 d9e:	bb 1f       	adc	r27, r27
 da0:	66 1f       	adc	r22, r22
 da2:	77 1f       	adc	r23, r23
 da4:	88 1f       	adc	r24, r24
 da6:	91 50       	subi	r25, 0x01	; 1
 da8:	50 40       	sbci	r21, 0x00	; 0
 daa:	a9 f7       	brne	.-22     	; 0xd96 <__mulsf3_pse+0x64>
 dac:	9e 3f       	cpi	r25, 0xFE	; 254
 dae:	51 05       	cpc	r21, r1
 db0:	80 f0       	brcs	.+32     	; 0xdd2 <__mulsf3_pse+0xa0>
 db2:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_inf>
 db6:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__fp_szero>
 dba:	5f 3f       	cpi	r21, 0xFF	; 255
 dbc:	e4 f3       	brlt	.-8      	; 0xdb6 <__mulsf3_pse+0x84>
 dbe:	98 3e       	cpi	r25, 0xE8	; 232
 dc0:	d4 f3       	brlt	.-12     	; 0xdb6 <__mulsf3_pse+0x84>
 dc2:	86 95       	lsr	r24
 dc4:	77 95       	ror	r23
 dc6:	67 95       	ror	r22
 dc8:	b7 95       	ror	r27
 dca:	f7 95       	ror	r31
 dcc:	e7 95       	ror	r30
 dce:	9f 5f       	subi	r25, 0xFF	; 255
 dd0:	c1 f7       	brne	.-16     	; 0xdc2 <__mulsf3_pse+0x90>
 dd2:	fe 2b       	or	r31, r30
 dd4:	88 0f       	add	r24, r24
 dd6:	91 1d       	adc	r25, r1
 dd8:	96 95       	lsr	r25
 dda:	87 95       	ror	r24
 ddc:	97 f9       	bld	r25, 7
 dde:	08 95       	ret

00000de0 <_exit>:
 de0:	f8 94       	cli

00000de2 <__stop_program>:
 de2:	ff cf       	rjmp	.-2      	; 0xde2 <__stop_program>
