
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e70  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000fa0  08000fa0  00010fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fa8  08000fa8  00010fb0  2**0
                  CONTENTS
  4 .ARM          00000000  08000fa8  08000fa8  00010fb0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fa8  08000fb0  00010fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000fb0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000fb0  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fb0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051de  00000000  00000000  00010fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cd1  00000000  00000000  000161b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e18  00000000  00000000  00016e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000240  00000000  00000000  00017ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  00017ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001113  00000000  00000000  000180b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000027ba  00000000  00000000  000191cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ab06  00000000  00000000  0001b985  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002648b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000748  00000000  00000000  00026508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f88 	.word	0x08000f88

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f88 	.word	0x08000f88

08000170 <Clock_INIT>:
#include "Keypad.h"

unsigned char DATA  ;
unsigned char DATA1;
void Clock_INIT(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//set on the clock for PORTA
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <Clock_INIT+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Clock_INIT+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//set on the clock for PORTB
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <Clock_INIT+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <Clock_INIT+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	//set on the clock for AFIO
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <Clock_INIT+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <Clock_INIT+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <SPI1_IRQ_Call>:

void SPI1_IRQ_Call (struct S_IRQ_SRC IRQ_SRC)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	7138      	strb	r0, [r7, #4]
	if( IRQ_SRC.RXNE)
 80001ac:	793b      	ldrb	r3, [r7, #4]
 80001ae:	f003 0302 	and.w	r3, r3, #2
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d00c      	beq.n	80001d2 <SPI1_IRQ_Call+0x2e>
	{
		DATA1=0XF;
 80001b8:	4b08      	ldr	r3, [pc, #32]	; (80001dc <SPI1_IRQ_Call+0x38>)
 80001ba:	220f      	movs	r2, #15
 80001bc:	701a      	strb	r2, [r3, #0]
		MCAL_SPI_Receive_Send_Data(SPI1, &DATA1, Enabled);
 80001be:	2200      	movs	r2, #0
 80001c0:	4906      	ldr	r1, [pc, #24]	; (80001dc <SPI1_IRQ_Call+0x38>)
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <SPI1_IRQ_Call+0x3c>)
 80001c4:	f000 fcb8 	bl	8000b38 <MCAL_SPI_Receive_Send_Data>
		MCAL_USART_SendData(USART1, &DATA1, Enable);
 80001c8:	2200      	movs	r2, #0
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <SPI1_IRQ_Call+0x38>)
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <SPI1_IRQ_Call+0x40>)
 80001ce:	f000 fe61 	bl	8000e94 <MCAL_USART_SendData>
	}
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000031 	.word	0x20000031
 80001e0:	40013000 	.word	0x40013000
 80001e4:	40013800 	.word	0x40013800

080001e8 <USART1_IRQ_Call>:

 void USART1_IRQ_Call (void)
 {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	MCAL_SPI_Receive_Send_Data(SPI1, &DATA, Enabled);
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
#endif

 }
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08c      	sub	sp, #48	; 0x30
 80001f8:	af00      	add	r7, sp, #0
	Clock_INIT();
 80001fa:	f7ff ffb9 	bl	8000170 <Clock_INIT>

	USART_config_t Config;
	Config.BAUDRATE=USART_BAUDRATE_115200 ;
 80001fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000202:	627b      	str	r3, [r7, #36]	; 0x24
	Config.HWFLOWCTL=USART_HWFLOWCTL_Disable;
 8000204:	2300      	movs	r3, #0
 8000206:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	Config.IRQ_EN=USART_IRQ_ENABLE_RXNE;
 800020a:	2320      	movs	r3, #32
 800020c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	Config.MODE=USART_MODE_TX_RX;
 8000210:	230c      	movs	r3, #12
 8000212:	f887 3020 	strb.w	r3, [r7, #32]
	Config.NUM_DATA_BIT=USART_NUM_DATA_BIT_8;
 8000216:	2300      	movs	r3, #0
 8000218:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	Config.NUM_STOP_BIT=USART_NUM_STOP_BIT_1;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	Config.PARITY=USART_PARITY_Disable;
 8000222:	2300      	movs	r3, #0
 8000224:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	Config.P_IRQ_CALL=USART1_IRQ_Call;
 8000228:	4b16      	ldr	r3, [pc, #88]	; (8000284 <main+0x90>)
 800022a:	62fb      	str	r3, [r7, #44]	; 0x2c
	MCAL_USART_Init(USART1, &Config);
 800022c:	f107 0320 	add.w	r3, r7, #32
 8000230:	4619      	mov	r1, r3
 8000232:	4815      	ldr	r0, [pc, #84]	; (8000288 <main+0x94>)
 8000234:	f000 fd06 	bl	8000c44 <MCAL_USART_Init>
	MCAL_USART_Set_Pin(USART1);
 8000238:	4813      	ldr	r0, [pc, #76]	; (8000288 <main+0x94>)
 800023a:	f000 fdc7 	bl	8000dcc <MCAL_USART_Set_Pin>

	SPI_config_t SPI_Config;
	SPI_Config.Data_Order=SPI_Data_Order_MSB_Transmitted_First;
 800023e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000242:	82fb      	strh	r3, [r7, #22]
	SPI_Config.MODE_Communication=SPI_MODE_Communication_Full_Duplex;
 8000244:	f647 33ff 	movw	r3, #31743	; 0x7bff
 8000248:	80fb      	strh	r3, [r7, #6]
	SPI_Config.NUM_DATA_BIT=SPI_NUM_DATA_BIT_8_Bit_Data_Frame;
 800024a:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800024e:	813b      	strh	r3, [r7, #8]
	SPI_Config.Phase=SPI_Phase_Data_Latched_On_Second_Clock;
 8000250:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000254:	82bb      	strh	r3, [r7, #20]
	SPI_Config.Polarity=SPI_Polarity_High_level_idle_state;
 8000256:	2302      	movs	r3, #2
 8000258:	827b      	strh	r3, [r7, #18]
	SPI_Config.BaudRate_Prescalers=SPI_BaudRate_Prescalers_8;
 800025a:	2310      	movs	r3, #16
 800025c:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
#endif

#ifdef SPI_ACT_AS_Slave

	SPI_Config.MODE=SPI_MODE_Slave;
 800025e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000262:	80bb      	strh	r3, [r7, #4]
	SPI_Config.IRQ_EN=SPI_IRQ_ENABLE_RX_Buffer_Not_Empty;
 8000264:	2340      	movs	r3, #64	; 0x40
 8000266:	763b      	strb	r3, [r7, #24]
	SPI_Config.NSS_Management=SPI_NSS_Management_Hard_Slave;
 8000268:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800026c:	823b      	strh	r3, [r7, #16]
	SPI_Config.P_IRQ_CALL=SPI1_IRQ_Call;
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <main+0x98>)
 8000270:	61fb      	str	r3, [r7, #28]
#endif
	MCAL_SPI_Init(SPI1, &SPI_Config);
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4619      	mov	r1, r3
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <main+0x9c>)
 8000278:	f000 fa68 	bl	800074c <MCAL_SPI_Init>
	MCAL_SPI_Set_Pin(SPI1);
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <main+0x9c>)
 800027e:	f000 fb41 	bl	8000904 <MCAL_SPI_Set_Pin>

	while (1)
 8000282:	e7fe      	b.n	8000282 <main+0x8e>
 8000284:	080001e9 	.word	0x080001e9
 8000288:	40013800 	.word	0x40013800
 800028c:	080001a5 	.word	0x080001a5
 8000290:	40013000 	.word	0x40013000

08000294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000296:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000298:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800029e:	490d      	ldr	r1, [pc, #52]	; (80002d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <LoopForever+0xe>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a4:	e002      	b.n	80002ac <LoopCopyDataInit>

080002a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002aa:	3304      	adds	r3, #4

080002ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b0:	d3f9      	bcc.n	80002a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b4:	4c0a      	ldr	r4, [pc, #40]	; (80002e0 <LoopForever+0x16>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b8:	e001      	b.n	80002be <LoopFillZerobss>

080002ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002bc:	3204      	adds	r2, #4

080002be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c0:	d3fb      	bcc.n	80002ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c2:	f000 fe3d 	bl	8000f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c6:	f7ff ff95 	bl	80001f4 <main>

080002ca <LoopForever>:

LoopForever:
    b LoopForever
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
  ldr   r0, =_estack
 80002cc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d8:	08000fb0 	.word	0x08000fb0
  ldr r2, =_sbss
 80002dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e0:	20000070 	.word	0x20000070

080002e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC1_2_IRQHandler>
	...

080002e8 <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <EXTI0_IRQHandler+0x1c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <EXTI0_IRQHandler+0x1c>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <EXTI0_IRQHandler+0x20>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4798      	blx	r3
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40010400 	.word	0x40010400
 8000308:	20000034 	.word	0x20000034

0800030c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <EXTI1_IRQHandler+0x1c>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <EXTI1_IRQHandler+0x1c>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <EXTI1_IRQHandler+0x20>)
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	4798      	blx	r3
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010400 	.word	0x40010400
 800032c:	20000034 	.word	0x20000034

08000330 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <EXTI2_IRQHandler+0x1c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <EXTI2_IRQHandler+0x1c>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <EXTI2_IRQHandler+0x20>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4798      	blx	r3
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40010400 	.word	0x40010400
 8000350:	20000034 	.word	0x20000034

08000354 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <EXTI3_IRQHandler+0x1c>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <EXTI3_IRQHandler+0x1c>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <EXTI3_IRQHandler+0x20>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4798      	blx	r3
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010400 	.word	0x40010400
 8000374:	20000034 	.word	0x20000034

08000378 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <EXTI4_IRQHandler+0x1c>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <EXTI4_IRQHandler+0x1c>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <EXTI4_IRQHandler+0x20>)
 800038a:	691b      	ldr	r3, [r3, #16]
 800038c:	4798      	blx	r3
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010400 	.word	0x40010400
 8000398:	20000034 	.word	0x20000034

0800039c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 80003a0:	4b26      	ldr	r3, [pc, #152]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d008      	beq.n	80003be <EXTI9_5_IRQHandler+0x22>
 80003ac:	4b23      	ldr	r3, [pc, #140]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a22      	ldr	r2, [pc, #136]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6153      	str	r3, [r2, #20]
 80003b8:	4b21      	ldr	r3, [pc, #132]	; (8000440 <EXTI9_5_IRQHandler+0xa4>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 80003be:	4b1f      	ldr	r3, [pc, #124]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <EXTI9_5_IRQHandler+0x40>
 80003ca:	4b1c      	ldr	r3, [pc, #112]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a1b      	ldr	r2, [pc, #108]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <EXTI9_5_IRQHandler+0xa4>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 80003dc:	4b17      	ldr	r3, [pc, #92]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <EXTI9_5_IRQHandler+0x5e>
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a13      	ldr	r2, [pc, #76]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f2:	6153      	str	r3, [r2, #20]
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <EXTI9_5_IRQHandler+0xa4>)
 80003f6:	69db      	ldr	r3, [r3, #28]
 80003f8:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000402:	2b00      	cmp	r3, #0
 8000404:	d008      	beq.n	8000418 <EXTI9_5_IRQHandler+0x7c>
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a0c      	ldr	r2, [pc, #48]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 800040c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <EXTI9_5_IRQHandler+0xa4>)
 8000414:	6a1b      	ldr	r3, [r3, #32]
 8000416:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000420:	2b00      	cmp	r3, #0
 8000422:	d008      	beq.n	8000436 <EXTI9_5_IRQHandler+0x9a>
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 800042a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042e:	6153      	str	r3, [r2, #20]
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <EXTI9_5_IRQHandler+0xa4>)
 8000432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000434:	4798      	blx	r3
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010400 	.word	0x40010400
 8000440:	20000034 	.word	0x20000034

08000444 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 8000448:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <EXTI15_10_IRQHandler+0x22>
 8000454:	4b2a      	ldr	r3, [pc, #168]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a29      	ldr	r2, [pc, #164]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 800045a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800045e:	6153      	str	r3, [r2, #20]
 8000460:	4b28      	ldr	r3, [pc, #160]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 8000462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000464:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <EXTI15_10_IRQHandler+0x40>
 8000472:	4b23      	ldr	r3, [pc, #140]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a22      	ldr	r2, [pc, #136]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b21      	ldr	r3, [pc, #132]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 8000480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000482:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 8000484:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI15_10_IRQHandler+0x5e>
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a1a      	ldr	r2, [pc, #104]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <EXTI15_10_IRQHandler+0x7c>
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a13      	ldr	r2, [pc, #76]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 80004bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004be:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d008      	beq.n	80004de <EXTI15_10_IRQHandler+0x9a>
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d6:	6153      	str	r3, [r2, #20]
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 80004da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004dc:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d008      	beq.n	80004fc <EXTI15_10_IRQHandler+0xb8>
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a04      	ldr	r2, [pc, #16]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b03      	ldr	r3, [pc, #12]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 80004f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004fa:	4798      	blx	r3
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010400 	.word	0x40010400
 8000504:	20000034 	.word	0x20000034

08000508 <get_position>:

#include"stm32_f103c6_GPIO.h"


uint8_t get_position(uint16_t pinNumber)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2b80      	cmp	r3, #128	; 0x80
 8000516:	d042      	beq.n	800059e <get_position+0x96>
 8000518:	2b80      	cmp	r3, #128	; 0x80
 800051a:	dc11      	bgt.n	8000540 <get_position+0x38>
 800051c:	2b08      	cmp	r3, #8
 800051e:	d036      	beq.n	800058e <get_position+0x86>
 8000520:	2b08      	cmp	r3, #8
 8000522:	dc06      	bgt.n	8000532 <get_position+0x2a>
 8000524:	2b02      	cmp	r3, #2
 8000526:	d02e      	beq.n	8000586 <get_position+0x7e>
 8000528:	2b04      	cmp	r3, #4
 800052a:	d02e      	beq.n	800058a <get_position+0x82>
 800052c:	2b01      	cmp	r3, #1
 800052e:	d028      	beq.n	8000582 <get_position+0x7a>
 8000530:	e047      	b.n	80005c2 <get_position+0xba>
 8000532:	2b20      	cmp	r3, #32
 8000534:	d02f      	beq.n	8000596 <get_position+0x8e>
 8000536:	2b40      	cmp	r3, #64	; 0x40
 8000538:	d02f      	beq.n	800059a <get_position+0x92>
 800053a:	2b10      	cmp	r3, #16
 800053c:	d029      	beq.n	8000592 <get_position+0x8a>
 800053e:	e040      	b.n	80005c2 <get_position+0xba>
 8000540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000544:	d033      	beq.n	80005ae <get_position+0xa6>
 8000546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800054a:	dc09      	bgt.n	8000560 <get_position+0x58>
 800054c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000550:	d029      	beq.n	80005a6 <get_position+0x9e>
 8000552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000556:	d028      	beq.n	80005aa <get_position+0xa2>
 8000558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800055c:	d021      	beq.n	80005a2 <get_position+0x9a>
 800055e:	e030      	b.n	80005c2 <get_position+0xba>
 8000560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000564:	d027      	beq.n	80005b6 <get_position+0xae>
 8000566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800056a:	dc03      	bgt.n	8000574 <get_position+0x6c>
 800056c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000570:	d01f      	beq.n	80005b2 <get_position+0xaa>
 8000572:	e026      	b.n	80005c2 <get_position+0xba>
 8000574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000578:	d01f      	beq.n	80005ba <get_position+0xb2>
 800057a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800057e:	d01e      	beq.n	80005be <get_position+0xb6>
 8000580:	e01f      	b.n	80005c2 <get_position+0xba>
	{
	case GPIO_PIN_0 :
		return 0;
 8000582:	2300      	movs	r3, #0
 8000584:	e01e      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 8000586:	2304      	movs	r3, #4
 8000588:	e01c      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 800058a:	2308      	movs	r3, #8
 800058c:	e01a      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 800058e:	230c      	movs	r3, #12
 8000590:	e018      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000592:	2310      	movs	r3, #16
 8000594:	e016      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 8000596:	2314      	movs	r3, #20
 8000598:	e014      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 800059a:	2318      	movs	r3, #24
 800059c:	e012      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 800059e:	231c      	movs	r3, #28
 80005a0:	e010      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_8 :
		return 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e00e      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 80005a6:	2304      	movs	r3, #4
 80005a8:	e00c      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 80005aa:	2308      	movs	r3, #8
 80005ac:	e00a      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 80005ae:	230c      	movs	r3, #12
 80005b0:	e008      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 80005b2:	2310      	movs	r3, #16
 80005b4:	e006      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 80005b6:	2314      	movs	r3, #20
 80005b8:	e004      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 80005ba:	2318      	movs	r3, #24
 80005bc:	e002      	b.n	80005c4 <get_position+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 80005be:	231c      	movs	r3, #28
 80005c0:	e000      	b.n	80005c4 <get_position+0xbc>
		break;
	default:
		return 0;
 80005c2:	2300      	movs	r3, #0
	}
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <MCAL_GPIO_Init>:
* @param [in] 		-pinconfig: configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 80005ce:	b590      	push	{r4, r7, lr}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	2bff      	cmp	r3, #255	; 0xff
 80005e6:	d801      	bhi.n	80005ec <MCAL_GPIO_Init+0x1e>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	e001      	b.n	80005f0 <MCAL_GPIO_Init+0x22>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3304      	adds	r3, #4
 80005f0:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff86 	bl	8000508 <get_position>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	230f      	movs	r3, #15
 8000602:	4093      	lsls	r3, r2
 8000604:	43da      	mvns	r2, r3
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	401a      	ands	r2, r3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	2b07      	cmp	r3, #7
 8000616:	d00b      	beq.n	8000630 <MCAL_GPIO_Init+0x62>
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	2b06      	cmp	r3, #6
 800061e:	d007      	beq.n	8000630 <MCAL_GPIO_Init+0x62>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	2b05      	cmp	r3, #5
 8000626:	d003      	beq.n	8000630 <MCAL_GPIO_Init+0x62>
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	2b04      	cmp	r3, #4
 800062e:	d10e      	bne.n	800064e <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	789b      	ldrb	r3, [r3, #2]
 8000634:	3b04      	subs	r3, #4
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	b25a      	sxtb	r2, r3
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	78db      	ldrb	r3, [r3, #3]
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b25b      	sxtb	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e02c      	b.n	80006a8 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	789b      	ldrb	r3, [r3, #2]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d003      	beq.n	800065e <MCAL_GPIO_Init+0x90>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d107      	bne.n	800066e <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	789b      	ldrb	r3, [r3, #2]
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	e01c      	b.n	80006a8 <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	789b      	ldrb	r3, [r3, #2]
 8000672:	2b08      	cmp	r3, #8
 8000674:	d102      	bne.n	800067c <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 8000676:	2304      	movs	r3, #4
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e015      	b.n	80006a8 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 800067c:	2308      	movs	r3, #8
 800067e:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	789b      	ldrb	r3, [r3, #2]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d107      	bne.n	8000698 <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	8812      	ldrh	r2, [r2, #0]
 8000690:	431a      	orrs	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	e007      	b.n	80006a8 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	8812      	ldrh	r2, [r2, #0]
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	401a      	ands	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 80006a8:	7bfc      	ldrb	r4, [r7, #15]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff2a 	bl	8000508 <get_position>
 80006b4:	4603      	mov	r3, r0
 80006b6:	fa04 f203 	lsl.w	r2, r4, r3
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	431a      	orrs	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	601a      	str	r2, [r3, #0]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd90      	pop	{r4, r7, pc}

080006cc <MCAL_Get_SYSCLC_FREQ>:
110: HCLK divided by 8
111: HCLK divided by 16
*/

uint32_t MCAL_Get_SYSCLC_FREQ(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	//00: HSI oscillator used as system clock
	//01: HSE oscillator used as system clock
	//10: PLL used as system clock
	//11: Not applicable

	switch(RCC->CFGR >> 2)
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MCAL_Get_SYSCLC_FREQ+0x24>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	089b      	lsrs	r3, r3, #2
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <MCAL_Get_SYSCLC_FREQ+0x14>
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d002      	beq.n	80006e4 <MCAL_Get_SYSCLC_FREQ+0x18>
 80006de:	e003      	b.n	80006e8 <MCAL_Get_SYSCLC_FREQ+0x1c>
	{
	case 0:
		return HSI_oscillator_clock ;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <MCAL_Get_SYSCLC_FREQ+0x28>)
 80006e2:	e001      	b.n	80006e8 <MCAL_Get_SYSCLC_FREQ+0x1c>
		break;
	case 1:
		return HSE_oscillator_clock ;
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <MCAL_Get_SYSCLC_FREQ+0x2c>)
 80006e6:	e7ff      	b.n	80006e8 <MCAL_Get_SYSCLC_FREQ+0x1c>
		break;
	}
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000
 80006f4:	007a1200 	.word	0x007a1200
 80006f8:	00f42400 	.word	0x00f42400

080006fc <MCAL_Get_PCLC1_FREQ>:
{
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return ( MCAL_Get_SYSCLC_FREQ() >> HPRE_table[ ( RCC->CFGR >> 4 ) & 0XF ] ) ;
}
uint32_t MCAL_Get_PCLC1_FREQ(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return ( MCAL_Get_SYSCLC_FREQ() >> PPRE1_table[ ( RCC->CFGR >> 8 ) & 0X11 ] ) ;
 8000700:	f7ff ffe4 	bl	80006cc <MCAL_Get_SYSCLC_FREQ>
 8000704:	4601      	mov	r1, r0
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <MCAL_Get_PCLC1_FREQ+0x20>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	0a1b      	lsrs	r3, r3, #8
 800070c:	f003 0311 	and.w	r3, r3, #17
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <MCAL_Get_PCLC1_FREQ+0x24>)
 8000712:	5cd3      	ldrb	r3, [r2, r3]
 8000714:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000718:	4618      	mov	r0, r3
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	08000fa0 	.word	0x08000fa0

08000724 <MCAL_Get_PCLC2_FREQ>:
uint32_t MCAL_Get_PCLC2_FREQ(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return ( MCAL_Get_SYSCLC_FREQ() >> PPRE1_table[ ( RCC->CFGR >> 11 ) & 0X11 ] ) ;
 8000728:	f7ff ffd0 	bl	80006cc <MCAL_Get_SYSCLC_FREQ>
 800072c:	4601      	mov	r1, r0
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MCAL_Get_PCLC2_FREQ+0x20>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	0adb      	lsrs	r3, r3, #11
 8000734:	f003 0311 	and.w	r3, r3, #17
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <MCAL_Get_PCLC2_FREQ+0x24>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000740:	4618      	mov	r0, r3
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	08000fa0 	.word	0x08000fa0

0800074c <MCAL_SPI_Init>:
* @param [in] 		-SPIx:  specified SPIx x=[ 1 : 2 ]
* @retval 			-none
* Note				-stm32f103c6 has SPI (1---2 )
*/
void MCAL_SPI_Init( SPI_TypeDef* SPIx , SPI_config_t* SPI_Config )
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	// Safety for register
	uint16_t Temp_CR1=0 , Temp_CR2=0 ;
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
 800075a:	2300      	movs	r3, #0
 800075c:	81bb      	strh	r3, [r7, #12]
	//Set mode
	if( SPI_Config->MODE == SPI_MODE_Master )
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d105      	bne.n	8000772 <MCAL_SPI_Init+0x26>
	{
		Temp_CR1 |=SPI_Config->MODE ;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	89fb      	ldrh	r3, [r7, #14]
 800076c:	4313      	orrs	r3, r2
 800076e:	81fb      	strh	r3, [r7, #14]
 8000770:	e004      	b.n	800077c <MCAL_SPI_Init+0x30>
	}
	else
	{
		Temp_CR1 &=SPI_Config->MODE ;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	881a      	ldrh	r2, [r3, #0]
 8000776:	89fb      	ldrh	r3, [r7, #14]
 8000778:	4013      	ands	r3, r2
 800077a:	81fb      	strh	r3, [r7, #14]
	}
	//set MODE_Communication
	if( SPI_Config->MODE_Communication == SPI_MODE_Communication_Full_Duplex )
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	885b      	ldrh	r3, [r3, #2]
 8000780:	f647 32ff 	movw	r2, #31743	; 0x7bff
 8000784:	4293      	cmp	r3, r2
 8000786:	d105      	bne.n	8000794 <MCAL_SPI_Init+0x48>
	{
		Temp_CR1 &= SPI_Config->MODE_Communication ;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	885a      	ldrh	r2, [r3, #2]
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	4013      	ands	r3, r2
 8000790:	81fb      	strh	r3, [r7, #14]
 8000792:	e004      	b.n	800079e <MCAL_SPI_Init+0x52>
	}
	else
	{
		Temp_CR1 |= SPI_Config->MODE_Communication ;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	885a      	ldrh	r2, [r3, #2]
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	4313      	orrs	r3, r2
 800079c:	81fb      	strh	r3, [r7, #14]
	}
	//set NUM_DATA_BIT
	if( SPI_Config->NUM_DATA_BIT == SPI_NUM_DATA_BIT_16_Bit_Data_Frame)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	889b      	ldrh	r3, [r3, #4]
 80007a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007a6:	d105      	bne.n	80007b4 <MCAL_SPI_Init+0x68>
	{
		Temp_CR1 |=SPI_Config->NUM_DATA_BIT ;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	889a      	ldrh	r2, [r3, #4]
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	81fb      	strh	r3, [r7, #14]
 80007b2:	e004      	b.n	80007be <MCAL_SPI_Init+0x72>
	}
	else
	{
		Temp_CR1 &=SPI_Config->NUM_DATA_BIT ;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	889a      	ldrh	r2, [r3, #4]
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	4013      	ands	r3, r2
 80007bc:	81fb      	strh	r3, [r7, #14]
	}
	//set BaudRate_Prescalers
	if( SPI_Config->BaudRate_Prescalers == SPI_BaudRate_Prescalers_2)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	891b      	ldrh	r3, [r3, #8]
 80007c2:	f64f 72c7 	movw	r2, #65479	; 0xffc7
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d105      	bne.n	80007d6 <MCAL_SPI_Init+0x8a>
	{
		Temp_CR1 &=SPI_Config->BaudRate_Prescalers ;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	891a      	ldrh	r2, [r3, #8]
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	4013      	ands	r3, r2
 80007d2:	81fb      	strh	r3, [r7, #14]
 80007d4:	e004      	b.n	80007e0 <MCAL_SPI_Init+0x94>
	}
	else
	{
		Temp_CR1 |=SPI_Config->BaudRate_Prescalers ;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	891a      	ldrh	r2, [r3, #8]
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	4313      	orrs	r3, r2
 80007de:	81fb      	strh	r3, [r7, #14]
	}
	//set NSS_Management
	if( SPI_Config->NSS_Management == SPI_NSS_Management_Hard_Master_Output_Enable || SPI_Config->NSS_Management == SPI_NSS_Management_Hard_Slave )
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	899b      	ldrh	r3, [r3, #12]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d005      	beq.n	80007f4 <MCAL_SPI_Init+0xa8>
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	899b      	ldrh	r3, [r3, #12]
 80007ec:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d105      	bne.n	8000800 <MCAL_SPI_Init+0xb4>
	{
		Temp_CR2 &=SPI_Config->NSS_Management ;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	899a      	ldrh	r2, [r3, #12]
 80007f8:	89bb      	ldrh	r3, [r7, #12]
 80007fa:	4013      	ands	r3, r2
 80007fc:	81bb      	strh	r3, [r7, #12]
 80007fe:	e00e      	b.n	800081e <MCAL_SPI_Init+0xd2>
	}
	else if ( SPI_Config->NSS_Management == SPI_NSS_Management_Hard_Master_Output_Enable )
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	899b      	ldrh	r3, [r3, #12]
 8000804:	2b04      	cmp	r3, #4
 8000806:	d105      	bne.n	8000814 <MCAL_SPI_Init+0xc8>
	{
		Temp_CR2 |=SPI_Config->NSS_Management ;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	899a      	ldrh	r2, [r3, #12]
 800080c:	89bb      	ldrh	r3, [r7, #12]
 800080e:	4313      	orrs	r3, r2
 8000810:	81bb      	strh	r3, [r7, #12]
 8000812:	e004      	b.n	800081e <MCAL_SPI_Init+0xd2>
	}
	else
	{
		Temp_CR1 |=SPI_Config->NSS_Management ;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	899a      	ldrh	r2, [r3, #12]
 8000818:	89fb      	ldrh	r3, [r7, #14]
 800081a:	4313      	orrs	r3, r2
 800081c:	81fb      	strh	r3, [r7, #14]
	}
	// set Polarity
	if( SPI_Config->Polarity == SPI_Polarity_High_level_idle_state)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	89db      	ldrh	r3, [r3, #14]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d105      	bne.n	8000832 <MCAL_SPI_Init+0xe6>
	{
		Temp_CR1 |=SPI_Config->Polarity ;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	89da      	ldrh	r2, [r3, #14]
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	4313      	orrs	r3, r2
 800082e:	81fb      	strh	r3, [r7, #14]
 8000830:	e004      	b.n	800083c <MCAL_SPI_Init+0xf0>
	}
	else
	{
		Temp_CR1 &=SPI_Config->Polarity ;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	89da      	ldrh	r2, [r3, #14]
 8000836:	89fb      	ldrh	r3, [r7, #14]
 8000838:	4013      	ands	r3, r2
 800083a:	81fb      	strh	r3, [r7, #14]
	}
	// set Phase
	if( SPI_Config->Phase == SPI_Phase_Data_Latched_On_First_Clock )
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	8a1b      	ldrh	r3, [r3, #16]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d105      	bne.n	8000850 <MCAL_SPI_Init+0x104>
	{
		Temp_CR1 |=SPI_Config->Phase ;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	8a1a      	ldrh	r2, [r3, #16]
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	4313      	orrs	r3, r2
 800084c:	81fb      	strh	r3, [r7, #14]
 800084e:	e004      	b.n	800085a <MCAL_SPI_Init+0x10e>
	}
	else
	{
		Temp_CR1 &=SPI_Config->Phase ;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	8a1a      	ldrh	r2, [r3, #16]
 8000854:	89fb      	ldrh	r3, [r7, #14]
 8000856:	4013      	ands	r3, r2
 8000858:	81fb      	strh	r3, [r7, #14]
	}
	//set Data_Order
	if( SPI_Config->Data_Order == SPI_Data_Order_LSB_Transmitted_First )
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	8a5b      	ldrh	r3, [r3, #18]
 800085e:	2b80      	cmp	r3, #128	; 0x80
 8000860:	d105      	bne.n	800086e <MCAL_SPI_Init+0x122>
	{
		Temp_CR1 |=SPI_Config->Data_Order ;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	8a5a      	ldrh	r2, [r3, #18]
 8000866:	89fb      	ldrh	r3, [r7, #14]
 8000868:	4313      	orrs	r3, r2
 800086a:	81fb      	strh	r3, [r7, #14]
 800086c:	e004      	b.n	8000878 <MCAL_SPI_Init+0x12c>
	}
	else
	{
		Temp_CR1 &=SPI_Config->Data_Order ;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	8a5a      	ldrh	r2, [r3, #18]
 8000872:	89fb      	ldrh	r3, [r7, #14]
 8000874:	4013      	ands	r3, r2
 8000876:	81fb      	strh	r3, [r7, #14]
	{
		Temp_CR2 &=SPI_Config->IRQ_EN ;
	}
	else
	{
		Temp_CR2 |=SPI_Config->IRQ_EN ;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	7d1b      	ldrb	r3, [r3, #20]
 800087c:	b29a      	uxth	r2, r3
 800087e:	89bb      	ldrh	r3, [r7, #12]
 8000880:	4313      	orrs	r3, r2
 8000882:	81bb      	strh	r3, [r7, #12]
	}
	//enable NVIC and RCC and store data about SPIx in global array
	if( SPIx == SPI1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a1a      	ldr	r2, [pc, #104]	; (80008f0 <MCAL_SPI_Init+0x1a4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d10f      	bne.n	80008ac <MCAL_SPI_Init+0x160>
	{
		g_SPI_Config[0]=SPI_Config;
 800088c:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <MCAL_SPI_Init+0x1a8>)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_Enable();
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MCAL_SPI_Init+0x1ac>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <MCAL_SPI_Init+0x1ac>)
 8000898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800089c:	6193      	str	r3, [r2, #24]
		NVIC_IRQ35_SPI1_Enable();
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MCAL_SPI_Init+0x1b0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <MCAL_SPI_Init+0x1b0>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	e012      	b.n	80008d2 <MCAL_SPI_Init+0x186>
	}
	else if( SPIx == SPI2 )
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <MCAL_SPI_Init+0x1b4>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d10e      	bne.n	80008d2 <MCAL_SPI_Init+0x186>
	{
		g_SPI_Config[1]=SPI_Config;
 80008b4:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <MCAL_SPI_Init+0x1a8>)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_Enable();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MCAL_SPI_Init+0x1ac>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <MCAL_SPI_Init+0x1ac>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	61d3      	str	r3, [r2, #28]
		NVIC_IRQ36_SPI2_Enable();
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MCAL_SPI_Init+0x1b0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <MCAL_SPI_Init+0x1b0>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6013      	str	r3, [r2, #0]
	}
	// Enable SPIx
	Temp_CR1 |=SPI_Enable();
 80008d2:	89fb      	ldrh	r3, [r7, #14]
 80008d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d8:	81fb      	strh	r3, [r7, #14]
	SPIx->CR1=Temp_CR1;
 80008da:	89fa      	ldrh	r2, [r7, #14]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
	SPIx->CR2=Temp_CR2;
 80008e0:	89ba      	ldrh	r2, [r7, #12]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	605a      	str	r2, [r3, #4]
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40013000 	.word	0x40013000
 80008f4:	2000001c 	.word	0x2000001c
 80008f8:	40021000 	.word	0x40021000
 80008fc:	e000e104 	.word	0xe000e104
 8000900:	40003800 	.word	0x40003800

08000904 <MCAL_SPI_Set_Pin>:
* @param [in] 		-SPIx:  specified SPIx x=[ 1 : 2 ]
* @retval 			-none
* Note				-none
*/
void MCAL_SPI_Set_Pin( SPI_TypeDef* SPIx )
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	GPIO_Pinconfig_t pinconfig ;
	if( SPIx == SPI1 )
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a85      	ldr	r2, [pc, #532]	; (8000b24 <MCAL_SPI_Set_Pin+0x220>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d17a      	bne.n	8000a0a <MCAL_SPI_Set_Pin+0x106>
	{
		//PA4--->NSS
		//PA5--->SCK
		//PA6--->MISO
		//PA7--->MOSI
		if( g_SPI_Config[0]->MODE == SPI_MODE_Master )
 8000914:	4b84      	ldr	r3, [pc, #528]	; (8000b28 <MCAL_SPI_Set_Pin+0x224>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	2b04      	cmp	r3, #4
 800091c:	d143      	bne.n	80009a6 <MCAL_SPI_Set_Pin+0xa2>
		{

			//PA4--->NSS
			switch( g_SPI_Config[0]->NSS_Management)
 800091e:	4b82      	ldr	r3, [pc, #520]	; (8000b28 <MCAL_SPI_Set_Pin+0x224>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	899b      	ldrh	r3, [r3, #12]
 8000924:	2b04      	cmp	r3, #4
 8000926:	d00e      	beq.n	8000946 <MCAL_SPI_Set_Pin+0x42>
 8000928:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800092c:	4293      	cmp	r3, r2
 800092e:	d117      	bne.n	8000960 <MCAL_SPI_Set_Pin+0x5c>
			{
			case SPI_NSS_Management_Hard_Master_Output_Disable:
				pinconfig.pinNumber = GPIO_PIN_4 ;
 8000930:	2310      	movs	r3, #16
 8000932:	81bb      	strh	r3, [r7, #12]
				pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000934:	2301      	movs	r3, #1
 8000936:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	487b      	ldr	r0, [pc, #492]	; (8000b2c <MCAL_SPI_Set_Pin+0x228>)
 8000940:	f7ff fe45 	bl	80005ce <MCAL_GPIO_Init>
				break ;
 8000944:	e00c      	b.n	8000960 <MCAL_SPI_Set_Pin+0x5c>

			case SPI_NSS_Management_Hard_Master_Output_Enable:
				pinconfig.pinNumber = GPIO_PIN_4 ;
 8000946:	2310      	movs	r3, #16
 8000948:	81bb      	strh	r3, [r7, #12]
				pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800094a:	2304      	movs	r3, #4
 800094c:	73bb      	strb	r3, [r7, #14]
				pinconfig.GPIO_OUTPUT_Speed= GPIO_speed_10M;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4619      	mov	r1, r3
 8000958:	4874      	ldr	r0, [pc, #464]	; (8000b2c <MCAL_SPI_Set_Pin+0x228>)
 800095a:	f7ff fe38 	bl	80005ce <MCAL_GPIO_Init>
				break ;
 800095e:	bf00      	nop
			}
			//PA5--->SCK
			pinconfig.pinNumber = GPIO_PIN_5 ;
 8000960:	2320      	movs	r3, #32
 8000962:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000964:	2306      	movs	r3, #6
 8000966:	73bb      	strb	r3, [r7, #14]
			pinconfig.GPIO_OUTPUT_Speed= GPIO_speed_10M;
 8000968:	2301      	movs	r3, #1
 800096a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	486e      	ldr	r0, [pc, #440]	; (8000b2c <MCAL_SPI_Set_Pin+0x228>)
 8000974:	f7ff fe2b 	bl	80005ce <MCAL_GPIO_Init>

			//PA6--->MISO
			pinconfig.pinNumber = GPIO_PIN_6 ;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 800097c:	2301      	movs	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	4869      	ldr	r0, [pc, #420]	; (8000b2c <MCAL_SPI_Set_Pin+0x228>)
 8000988:	f7ff fe21 	bl	80005ce <MCAL_GPIO_Init>

			//PA7--->MOSI
			pinconfig.pinNumber = GPIO_PIN_7 ;
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000990:	2306      	movs	r3, #6
 8000992:	73bb      	strb	r3, [r7, #14]
			pinconfig.GPIO_OUTPUT_Speed= GPIO_speed_10M;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4619      	mov	r1, r3
 800099e:	4863      	ldr	r0, [pc, #396]	; (8000b2c <MCAL_SPI_Set_Pin+0x228>)
 80009a0:	f7ff fe15 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.pinNumber = GPIO_PIN_15 ;
			pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
		}
	}
}
 80009a4:	e0b9      	b.n	8000b1a <MCAL_SPI_Set_Pin+0x216>
			if( g_SPI_Config[0]->NSS_Management == SPI_NSS_Management_Hard_Slave)
 80009a6:	4b60      	ldr	r3, [pc, #384]	; (8000b28 <MCAL_SPI_Set_Pin+0x224>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	899b      	ldrh	r3, [r3, #12]
 80009ac:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d109      	bne.n	80009c8 <MCAL_SPI_Set_Pin+0xc4>
				pinconfig.pinNumber = GPIO_PIN_4 ;
 80009b4:	2310      	movs	r3, #16
 80009b6:	81bb      	strh	r3, [r7, #12]
				pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 80009b8:	2301      	movs	r3, #1
 80009ba:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	485a      	ldr	r0, [pc, #360]	; (8000b2c <MCAL_SPI_Set_Pin+0x228>)
 80009c4:	f7ff fe03 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.pinNumber = GPIO_PIN_5 ;
 80009c8:	2320      	movs	r3, #32
 80009ca:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4855      	ldr	r0, [pc, #340]	; (8000b2c <MCAL_SPI_Set_Pin+0x228>)
 80009d8:	f7ff fdf9 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.pinNumber = GPIO_PIN_6 ;
 80009dc:	2340      	movs	r3, #64	; 0x40
 80009de:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 80009e0:	2306      	movs	r3, #6
 80009e2:	73bb      	strb	r3, [r7, #14]
			pinconfig.GPIO_OUTPUT_Speed= GPIO_speed_10M;
 80009e4:	2301      	movs	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	484f      	ldr	r0, [pc, #316]	; (8000b2c <MCAL_SPI_Set_Pin+0x228>)
 80009f0:	f7ff fded 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.pinNumber = GPIO_PIN_7 ;
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	484a      	ldr	r0, [pc, #296]	; (8000b2c <MCAL_SPI_Set_Pin+0x228>)
 8000a04:	f7ff fde3 	bl	80005ce <MCAL_GPIO_Init>
}
 8000a08:	e087      	b.n	8000b1a <MCAL_SPI_Set_Pin+0x216>
	else if( SPIx == SPI2 )
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a48      	ldr	r2, [pc, #288]	; (8000b30 <MCAL_SPI_Set_Pin+0x22c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	f040 8083 	bne.w	8000b1a <MCAL_SPI_Set_Pin+0x216>
		if( g_SPI_Config[1]->MODE == SPI_MODE_Master )
 8000a14:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <MCAL_SPI_Set_Pin+0x224>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d148      	bne.n	8000ab0 <MCAL_SPI_Set_Pin+0x1ac>
			switch( g_SPI_Config[1]->NSS_Management)
 8000a1e:	4b42      	ldr	r3, [pc, #264]	; (8000b28 <MCAL_SPI_Set_Pin+0x224>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	899b      	ldrh	r3, [r3, #12]
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d00f      	beq.n	8000a48 <MCAL_SPI_Set_Pin+0x144>
 8000a28:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d119      	bne.n	8000a64 <MCAL_SPI_Set_Pin+0x160>
				pinconfig.pinNumber = GPIO_PIN_12 ;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	81bb      	strh	r3, [r7, #12]
				pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	483c      	ldr	r0, [pc, #240]	; (8000b34 <MCAL_SPI_Set_Pin+0x230>)
 8000a42:	f7ff fdc4 	bl	80005ce <MCAL_GPIO_Init>
				break ;
 8000a46:	e00d      	b.n	8000a64 <MCAL_SPI_Set_Pin+0x160>
				pinconfig.pinNumber = GPIO_PIN_12 ;
 8000a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4c:	81bb      	strh	r3, [r7, #12]
				pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	73bb      	strb	r3, [r7, #14]
				pinconfig.GPIO_OUTPUT_Speed= GPIO_speed_10M;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4835      	ldr	r0, [pc, #212]	; (8000b34 <MCAL_SPI_Set_Pin+0x230>)
 8000a5e:	f7ff fdb6 	bl	80005ce <MCAL_GPIO_Init>
				break ;
 8000a62:	bf00      	nop
			pinconfig.pinNumber = GPIO_PIN_13 ;
 8000a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a68:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000a6a:	2306      	movs	r3, #6
 8000a6c:	73bb      	strb	r3, [r7, #14]
			pinconfig.GPIO_OUTPUT_Speed= GPIO_speed_10M;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	482e      	ldr	r0, [pc, #184]	; (8000b34 <MCAL_SPI_Set_Pin+0x230>)
 8000a7a:	f7ff fda8 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.pinNumber = GPIO_PIN_14 ;
 8000a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a82:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4829      	ldr	r0, [pc, #164]	; (8000b34 <MCAL_SPI_Set_Pin+0x230>)
 8000a90:	f7ff fd9d 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.pinNumber = GPIO_PIN_15 ;
 8000a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a98:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000a9a:	2306      	movs	r3, #6
 8000a9c:	73bb      	strb	r3, [r7, #14]
			pinconfig.GPIO_OUTPUT_Speed= GPIO_speed_10M;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4822      	ldr	r0, [pc, #136]	; (8000b34 <MCAL_SPI_Set_Pin+0x230>)
 8000aaa:	f7ff fd90 	bl	80005ce <MCAL_GPIO_Init>
}
 8000aae:	e034      	b.n	8000b1a <MCAL_SPI_Set_Pin+0x216>
			if( g_SPI_Config[1]->NSS_Management == SPI_NSS_Management_Hard_Slave)
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MCAL_SPI_Set_Pin+0x224>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	899b      	ldrh	r3, [r3, #12]
 8000ab6:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d10a      	bne.n	8000ad4 <MCAL_SPI_Set_Pin+0x1d0>
				pinconfig.pinNumber = GPIO_PIN_12 ;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	81bb      	strh	r3, [r7, #12]
				pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	4819      	ldr	r0, [pc, #100]	; (8000b34 <MCAL_SPI_Set_Pin+0x230>)
 8000ad0:	f7ff fd7d 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.pinNumber = GPIO_PIN_13 ;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MCAL_SPI_Set_Pin+0x230>)
 8000ae6:	f7ff fd72 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.pinNumber = GPIO_PIN_14 ;
 8000aea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aee:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000af0:	2306      	movs	r3, #6
 8000af2:	73bb      	strb	r3, [r7, #14]
			pinconfig.GPIO_OUTPUT_Speed= GPIO_speed_10M;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MCAL_SPI_Set_Pin+0x230>)
 8000b00:	f7ff fd65 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.pinNumber = GPIO_PIN_15 ;
 8000b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b08:	81bb      	strh	r3, [r7, #12]
			pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <MCAL_SPI_Set_Pin+0x230>)
 8000b16:	f7ff fd5a 	bl	80005ce <MCAL_GPIO_Init>
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40013000 	.word	0x40013000
 8000b28:	2000001c 	.word	0x2000001c
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	40003800 	.word	0x40003800
 8000b34:	40010c00 	.word	0x40010c00

08000b38 <MCAL_SPI_Receive_Send_Data>:
* @param [in] 		-PTXBuffer: pointer to buffer to send and Receive data
* @retval 			-none
* Note				-stm32f103c6 has SPI (1---2 )
*/
void MCAL_SPI_Receive_Send_Data( SPI_TypeDef* SPIx , uint16_t* PRXBuffer , enum SPI_polling_mechanism polling_EN)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	4613      	mov	r3, r2
 8000b44:	71fb      	strb	r3, [r7, #7]
	if( polling_EN == Enabled )
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <MCAL_SPI_Receive_Send_Data+0x22>
	{
		while( !( SPIx->SR & 1<<1 ));
 8000b4c:	bf00      	nop
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f9      	beq.n	8000b4e <MCAL_SPI_Receive_Send_Data+0x16>
	}
	SPIx->DR = *PRXBuffer ;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	60da      	str	r2, [r3, #12]

	if( polling_EN == Enabled )
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d106      	bne.n	8000b78 <MCAL_SPI_Receive_Send_Data+0x40>
	{
		while( !( SPIx->SR & 1<<0 ));
 8000b6a:	bf00      	nop
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0f9      	beq.n	8000b6c <MCAL_SPI_Receive_Send_Data+0x34>
	}
	*PRXBuffer = SPIx->DR ;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	801a      	strh	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <SPI1_IRQHandler>:
 *
 * ===============================================================
 */

void SPI1_IRQHandler ( void )
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI1->SR & 1<<1 ) >>1 )  ;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <SPI1_IRQHandler+0x54>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	085b      	lsrs	r3, r3, #1
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	793b      	ldrb	r3, [r7, #4]
 8000ba0:	f362 0300 	bfi	r3, r2, #0, #1
 8000ba4:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI1->SR & 1<<0 ) >>0 )  ;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <SPI1_IRQHandler+0x54>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	793b      	ldrb	r3, [r7, #4]
 8000bb2:	f362 0341 	bfi	r3, r2, #1, #1
 8000bb6:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI1->SR & 1<<4 ) >>4 )  ;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <SPI1_IRQHandler+0x54>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	793b      	ldrb	r3, [r7, #4]
 8000bc6:	f362 0382 	bfi	r3, r2, #2, #1
 8000bca:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[0]->P_IRQ_CALL ( IRQ_SRC ) ;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SPI1_IRQHandler+0x58>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	7938      	ldrb	r0, [r7, #4]
 8000bd4:	4798      	blx	r3
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40013000 	.word	0x40013000
 8000be4:	2000001c 	.word	0x2000001c

08000be8 <SPI2_IRQHandler>:

void SPI2_IRQHandler ( void )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI2->SR & 1<<1 ) >>1 )  ;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <SPI2_IRQHandler+0x54>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	085b      	lsrs	r3, r3, #1
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	793b      	ldrb	r3, [r7, #4]
 8000bfc:	f362 0300 	bfi	r3, r2, #0, #1
 8000c00:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI2->SR & 1<<0 ) >>0 )  ;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <SPI2_IRQHandler+0x54>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	793b      	ldrb	r3, [r7, #4]
 8000c0e:	f362 0341 	bfi	r3, r2, #1, #1
 8000c12:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI2->SR & 1<<4 ) >>4 )  ;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <SPI2_IRQHandler+0x54>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	091b      	lsrs	r3, r3, #4
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	793b      	ldrb	r3, [r7, #4]
 8000c22:	f362 0382 	bfi	r3, r2, #2, #1
 8000c26:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[1]->P_IRQ_CALL ( IRQ_SRC ) ;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SPI2_IRQHandler+0x58>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	7938      	ldrb	r0, [r7, #4]
 8000c30:	4798      	blx	r3
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40003800 	.word	0x40003800
 8000c40:	2000001c 	.word	0x2000001c

08000c44 <MCAL_USART_Init>:
* @param [in] 		-USARTx:  specified USARTx x=[ 1 : 3 ]
* @retval 			-none
* Note				-stm32f103c6 has USART (1---3 )
*/
void MCAL_USART_Init( USART_TypeDef* USARTx , USART_config_t* USART_Config )
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	uint32_t PCLK , BRR ;

	// Enable clock for usartx
	 if ( USARTx == USART1 )
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a58      	ldr	r2, [pc, #352]	; (8000db4 <MCAL_USART_Init+0x170>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d109      	bne.n	8000c6a <MCAL_USART_Init+0x26>
	 {
		 g_USART_Config[0] = USART_Config ;// configuration the USART1
 8000c56:	4a58      	ldr	r2, [pc, #352]	; (8000db8 <MCAL_USART_Init+0x174>)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	6013      	str	r3, [r2, #0]
		 RCC_USART1_CLK_Enable() ;
 8000c5c:	4b57      	ldr	r3, [pc, #348]	; (8000dbc <MCAL_USART_Init+0x178>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a56      	ldr	r2, [pc, #344]	; (8000dbc <MCAL_USART_Init+0x178>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	e01a      	b.n	8000ca0 <MCAL_USART_Init+0x5c>
	 }
	 else if ( USARTx == USART2 )
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <MCAL_USART_Init+0x17c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d109      	bne.n	8000c86 <MCAL_USART_Init+0x42>
	 {
		 g_USART_Config[1] = USART_Config ;// configuration the USART2
 8000c72:	4a51      	ldr	r2, [pc, #324]	; (8000db8 <MCAL_USART_Init+0x174>)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	6053      	str	r3, [r2, #4]
		 RCC_USART2_CLK_Enable() ;
 8000c78:	4b50      	ldr	r3, [pc, #320]	; (8000dbc <MCAL_USART_Init+0x178>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	4a4f      	ldr	r2, [pc, #316]	; (8000dbc <MCAL_USART_Init+0x178>)
 8000c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c82:	61d3      	str	r3, [r2, #28]
 8000c84:	e00c      	b.n	8000ca0 <MCAL_USART_Init+0x5c>
	 }
	 else if ( USARTx == USART3 )
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4e      	ldr	r2, [pc, #312]	; (8000dc4 <MCAL_USART_Init+0x180>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d108      	bne.n	8000ca0 <MCAL_USART_Init+0x5c>
	 {
		 g_USART_Config[2] = USART_Config ;// configuration the USART3
 8000c8e:	4a4a      	ldr	r2, [pc, #296]	; (8000db8 <MCAL_USART_Init+0x174>)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	6093      	str	r3, [r2, #8]
		 RCC_USART3_CLK_Enable() ;
 8000c94:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <MCAL_USART_Init+0x178>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	4a48      	ldr	r2, [pc, #288]	; (8000dbc <MCAL_USART_Init+0x178>)
 8000c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9e:	61d3      	str	r3, [r2, #28]
	 }

	 // Enable USARTx
	 USARTx->CR1 |= 1 << 13 ;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60da      	str	r2, [r3, #12]

	 //Enable mode
	 USARTx->CR1 |= USART_Config->MODE ;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	7812      	ldrb	r2, [r2, #0]
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60da      	str	r2, [r3, #12]

	 // number of data bit
	 USARTx->CR1 |= USART_Config->NUM_DATA_BIT ;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	7852      	ldrb	r2, [r2, #1]
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	60da      	str	r2, [r3, #12]

	 //set parity
	 USARTx->CR1 |= USART_Config->PARITY ;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	7a12      	ldrb	r2, [r2, #8]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60da      	str	r2, [r3, #12]

	 // number of  stop bit
	 USARTx->CR2 |= USART_Config->NUM_STOP_BIT ;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	7892      	ldrb	r2, [r2, #2]
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	611a      	str	r2, [r3, #16]

	 // hardware flow control
	 USARTx->CR3 |= USART_Config->HWFLOWCTL ;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	7a52      	ldrb	r2, [r2, #9]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	615a      	str	r2, [r3, #20]

	 // baudrate
	 if ( USARTx == USART1 )
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <MCAL_USART_Init+0x170>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d103      	bne.n	8000d02 <MCAL_USART_Init+0xbe>
	 {
		 PCLK = MCAL_Get_PCLC2_FREQ() ;
 8000cfa:	f7ff fd13 	bl	8000724 <MCAL_Get_PCLC2_FREQ>
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	e002      	b.n	8000d08 <MCAL_USART_Init+0xc4>
	 }
	 else
	 {
		 PCLK = MCAL_Get_PCLC1_FREQ() ;
 8000d02:	f7ff fcfb 	bl	80006fc <MCAL_Get_PCLC1_FREQ>
 8000d06:	60f8      	str	r0, [r7, #12]
	 }
	 BRR =  USART_BRR_Reg( PCLK , USART_Config->BAUDRATE ) ;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	011b      	lsls	r3, r3, #4
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d14:	0119      	lsls	r1, r3, #4
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	009a      	lsls	r2, r3, #2
 8000d20:	441a      	add	r2, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d38:	2064      	movs	r0, #100	; 0x64
 8000d3a:	fb00 f303 	mul.w	r3, r0, r3
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2264      	movs	r2, #100	; 0x64
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	60bb      	str	r3, [r7, #8]
	 USARTx->BRR = BRR ;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	609a      	str	r2, [r3, #8]

	 // Enable or Disable interrupt
	 if ( USART_Config->IRQ_EN != USART_IRQ_ENABLE_Disable )
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	7a9b      	ldrb	r3, [r3, #10]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d026      	beq.n	8000daa <MCAL_USART_Init+0x166>
	 {
		 USARTx->CR1 |= USART_Config->IRQ_EN ;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	7a92      	ldrb	r2, [r2, #10]
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60da      	str	r2, [r3, #12]

		 // en NVIC
		 if ( USARTx == USART1 )
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <MCAL_USART_Init+0x170>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d106      	bne.n	8000d80 <MCAL_USART_Init+0x13c>
		 {
			 NVIC_IRQ37_USART1_Enable() ;
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MCAL_USART_Init+0x184>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <MCAL_USART_Init+0x184>)
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	6013      	str	r3, [r2, #0]
		 else if ( USARTx == USART3 )
		 {
			 NVIC_IRQ39_USART3_Enable() ;
		 }
	 }
}
 8000d7e:	e014      	b.n	8000daa <MCAL_USART_Init+0x166>
		 else if ( USARTx == USART2 )
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <MCAL_USART_Init+0x17c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d106      	bne.n	8000d96 <MCAL_USART_Init+0x152>
			 NVIC_IRQ38_USART2_Enable() ;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MCAL_USART_Init+0x184>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <MCAL_USART_Init+0x184>)
 8000d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	e009      	b.n	8000daa <MCAL_USART_Init+0x166>
		 else if ( USARTx == USART3 )
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <MCAL_USART_Init+0x180>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d105      	bne.n	8000daa <MCAL_USART_Init+0x166>
			 NVIC_IRQ39_USART3_Enable() ;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MCAL_USART_Init+0x184>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <MCAL_USART_Init+0x184>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	6013      	str	r3, [r2, #0]
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40013800 	.word	0x40013800
 8000db8:	20000024 	.word	0x20000024
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40004400 	.word	0x40004400
 8000dc4:	40004800 	.word	0x40004800
 8000dc8:	e000e104 	.word	0xe000e104

08000dcc <MCAL_USART_Set_Pin>:
* @param [in] 		-USARTx:  specified USARTx x=[ 1 : 3 ]
* @retval 			-none
* Note				-none
*/
void MCAL_USART_Set_Pin( USART_TypeDef* USARTx )
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	GPIO_Pinconfig_t pinconfig ;
	if( USARTx == USART1 )
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a2a      	ldr	r2, [pc, #168]	; (8000e80 <MCAL_USART_Set_Pin+0xb4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d117      	bne.n	8000e0c <MCAL_USART_Set_Pin+0x40>
	{
		//PA9--->TX
		//PA10-->RX
		//PA11-->CTS
		//PA12-->RTS
		pinconfig.pinNumber = GPIO_PIN_9 ;
 8000ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de0:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8000de2:	2306      	movs	r3, #6
 8000de4:	73bb      	strb	r3, [r7, #14]
		pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4619      	mov	r1, r3
 8000df0:	4824      	ldr	r0, [pc, #144]	; (8000e84 <MCAL_USART_Set_Pin+0xb8>)
 8000df2:	f7ff fbec 	bl	80005ce <MCAL_GPIO_Init>

		pinconfig.pinNumber = GPIO_PIN_10 ;
 8000df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfa:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_INPUT_AF  ;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	481f      	ldr	r0, [pc, #124]	; (8000e84 <MCAL_USART_Set_Pin+0xb8>)
 8000e08:	f7ff fbe1 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
		}
	}

	if( USARTx == USART2 )
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <MCAL_USART_Set_Pin+0xbc>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d115      	bne.n	8000e40 <MCAL_USART_Set_Pin+0x74>
	{
		//PA2--->TX
		//PA3-->RX
		//PA0-->CTS
		//PA1-->RTS
		pinconfig.pinNumber = GPIO_PIN_2 ;
 8000e14:	2304      	movs	r3, #4
 8000e16:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8000e18:	2306      	movs	r3, #6
 8000e1a:	73bb      	strb	r3, [r7, #14]
		pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <MCAL_USART_Set_Pin+0xb8>)
 8000e28:	f7ff fbd1 	bl	80005ce <MCAL_GPIO_Init>

		pinconfig.pinNumber = GPIO_PIN_3 ;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_INPUT_AF  ;
 8000e30:	2308      	movs	r3, #8
 8000e32:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4812      	ldr	r0, [pc, #72]	; (8000e84 <MCAL_USART_Set_Pin+0xb8>)
 8000e3c:	f7ff fbc7 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
		}
	}

	if( USARTx == USART3 )
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MCAL_USART_Set_Pin+0xc0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d117      	bne.n	8000e78 <MCAL_USART_Set_Pin+0xac>
	{
		//PB10--->TX
		//PB11-->RX
		//PB13-->CTS
		//PB14-->RTS
		pinconfig.pinNumber = GPIO_PIN_10 ;
 8000e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4c:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8000e4e:	2306      	movs	r3, #6
 8000e50:	73bb      	strb	r3, [r7, #14]
		pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <MCAL_USART_Set_Pin+0xc4>)
 8000e5e:	f7ff fbb6 	bl	80005ce <MCAL_GPIO_Init>

		pinconfig.pinNumber = GPIO_PIN_11 ;
 8000e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e66:	81bb      	strh	r3, [r7, #12]
		pinconfig.GPIO_MODE = GPIO_MODE_INPUT_AF  ;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MCAL_USART_Set_Pin+0xc4>)
 8000e74:	f7ff fbab 	bl	80005ce <MCAL_GPIO_Init>
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
		}
	}
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	40004800 	.word	0x40004800
 8000e90:	40010c00 	.word	0x40010c00

08000e94 <MCAL_USART_SendData>:
* @param [in] 		-PTXBuffer: pointer to buffer to send data
* @retval 			-none
* Note				-stm32f103c6 has USART (1---3 )
*/
void MCAL_USART_SendData( USART_TypeDef* USARTx , uint16_t* PTXBuffer , enum polling_mechanism polling_EN)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if ( polling_EN == Enable )
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d106      	bne.n	8000eb6 <MCAL_USART_SendData+0x22>
		while( ! ( USARTx->SR & 1<<7 ) ) ;
 8000ea8:	bf00      	nop
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f9      	beq.n	8000eaa <MCAL_USART_SendData+0x16>

	if( USARTx == USART1 )
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <MCAL_USART_SendData+0x64>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d104      	bne.n	8000ec8 <MCAL_USART_SendData+0x34>
		{
			USARTx->DR = ( *PTXBuffer & (uint16_t)0x01FF ) ;
		}
		else
		{
			USARTx->DR = ( *PTXBuffer & (uint8_t)0xFF ) ;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	605a      	str	r2, [r3, #4]
		}
	}
	if( USARTx == USART2 )
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <MCAL_USART_SendData+0x68>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d104      	bne.n	8000eda <MCAL_USART_SendData+0x46>
		{
			USARTx->DR = ( *PTXBuffer & (uint16_t)0x01FF ) ;
		}
		else
		{
			USARTx->DR = ( *PTXBuffer & (uint8_t)0xFF ) ;
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	605a      	str	r2, [r3, #4]
		}
	}
	if( USARTx == USART3 )
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <MCAL_USART_SendData+0x6c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d104      	bne.n	8000eec <MCAL_USART_SendData+0x58>
		{
			USARTx->DR = ( *PTXBuffer & (uint16_t)0x01FF ) ;
		}
		else
		{
			USARTx->DR = ( *PTXBuffer & (uint8_t)0xFF ) ;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	605a      	str	r2, [r3, #4]
		}
	}

}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40004400 	.word	0x40004400
 8000f00:	40004800 	.word	0x40004800

08000f04 <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <USART1_IRQHandler+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	4798      	blx	r3
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000024 	.word	0x20000024

08000f18 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <USART2_IRQHandler+0x10>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	4798      	blx	r3
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000024 	.word	0x20000024

08000f2c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 8000f30:	4b02      	ldr	r3, [pc, #8]	; (8000f3c <USART3_IRQHandler+0x10>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	4798      	blx	r3
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000024 	.word	0x20000024

08000f40 <__libc_init_array>:
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	2500      	movs	r5, #0
 8000f44:	4e0c      	ldr	r6, [pc, #48]	; (8000f78 <__libc_init_array+0x38>)
 8000f46:	4c0d      	ldr	r4, [pc, #52]	; (8000f7c <__libc_init_array+0x3c>)
 8000f48:	1ba4      	subs	r4, r4, r6
 8000f4a:	10a4      	asrs	r4, r4, #2
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	d109      	bne.n	8000f64 <__libc_init_array+0x24>
 8000f50:	f000 f81a 	bl	8000f88 <_init>
 8000f54:	2500      	movs	r5, #0
 8000f56:	4e0a      	ldr	r6, [pc, #40]	; (8000f80 <__libc_init_array+0x40>)
 8000f58:	4c0a      	ldr	r4, [pc, #40]	; (8000f84 <__libc_init_array+0x44>)
 8000f5a:	1ba4      	subs	r4, r4, r6
 8000f5c:	10a4      	asrs	r4, r4, #2
 8000f5e:	42a5      	cmp	r5, r4
 8000f60:	d105      	bne.n	8000f6e <__libc_init_array+0x2e>
 8000f62:	bd70      	pop	{r4, r5, r6, pc}
 8000f64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f68:	4798      	blx	r3
 8000f6a:	3501      	adds	r5, #1
 8000f6c:	e7ee      	b.n	8000f4c <__libc_init_array+0xc>
 8000f6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f72:	4798      	blx	r3
 8000f74:	3501      	adds	r5, #1
 8000f76:	e7f2      	b.n	8000f5e <__libc_init_array+0x1e>
 8000f78:	08000fa8 	.word	0x08000fa8
 8000f7c:	08000fa8 	.word	0x08000fa8
 8000f80:	08000fa8 	.word	0x08000fa8
 8000f84:	08000fac 	.word	0x08000fac

08000f88 <_init>:
 8000f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8a:	bf00      	nop
 8000f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8e:	bc08      	pop	{r3}
 8000f90:	469e      	mov	lr, r3
 8000f92:	4770      	bx	lr

08000f94 <_fini>:
 8000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f96:	bf00      	nop
 8000f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9a:	bc08      	pop	{r3}
 8000f9c:	469e      	mov	lr, r3
 8000f9e:	4770      	bx	lr
