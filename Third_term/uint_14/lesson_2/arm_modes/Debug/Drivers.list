
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bfc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000d2c  08000d2c  00010d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d38  08000d38  00010d40  2**0
                  CONTENTS
  4 .ARM          00000000  08000d38  08000d38  00010d40  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d38  08000d40  00010d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d38  08000d38  00010d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d3c  08000d3c  00010d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000000  08000d40  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08000d40  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d40  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005665  00000000  00000000  00010d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d82  00000000  00000000  000163ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001140  00000000  00000000  00017150  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000280  00000000  00000000  00018290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000218  00000000  00000000  00018510  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000121e  00000000  00000000  00018728  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002970  00000000  00000000  00019946  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ccde  00000000  00000000  0001c2b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00028f94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008a0  00000000  00000000  00029010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d14 	.word	0x08000d14

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d14 	.word	0x08000d14

08000170 <Clock_INIT>:
#include "stm32_f103c6_ADC.h"



void Clock_INIT(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    //set on the clock for PORTA
    RCC_GPIOA_CLK_EN();
 8000174:	4b19      	ldr	r3, [pc, #100]	; (80001dc <Clock_INIT+0x6c>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a18      	ldr	r2, [pc, #96]	; (80001dc <Clock_INIT+0x6c>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
    //set on the clock for PORTB
    RCC_GPIOB_CLK_EN();
 8000180:	4b16      	ldr	r3, [pc, #88]	; (80001dc <Clock_INIT+0x6c>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a15      	ldr	r2, [pc, #84]	; (80001dc <Clock_INIT+0x6c>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
    //set on the clock for AFIO
    RCC_GPIOC_CLK_EN();
 800018c:	4b13      	ldr	r3, [pc, #76]	; (80001dc <Clock_INIT+0x6c>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a12      	ldr	r2, [pc, #72]	; (80001dc <Clock_INIT+0x6c>)
 8000192:	f043 0310 	orr.w	r3, r3, #16
 8000196:	6193      	str	r3, [r2, #24]
    RCC_AFIO_CLK_EN();
 8000198:	4b10      	ldr	r3, [pc, #64]	; (80001dc <Clock_INIT+0x6c>)
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	4a0f      	ldr	r2, [pc, #60]	; (80001dc <Clock_INIT+0x6c>)
 800019e:	f043 0301 	orr.w	r3, r3, #1
 80001a2:	6193      	str	r3, [r2, #24]
    RCC_TIM2_CLK_Enable();
 80001a4:	4b0d      	ldr	r3, [pc, #52]	; (80001dc <Clock_INIT+0x6c>)
 80001a6:	69db      	ldr	r3, [r3, #28]
 80001a8:	4a0c      	ldr	r2, [pc, #48]	; (80001dc <Clock_INIT+0x6c>)
 80001aa:	f043 0301 	orr.w	r3, r3, #1
 80001ae:	61d3      	str	r3, [r2, #28]
    RCC_TIM3_CLK_Enable();
 80001b0:	4b0a      	ldr	r3, [pc, #40]	; (80001dc <Clock_INIT+0x6c>)
 80001b2:	69db      	ldr	r3, [r3, #28]
 80001b4:	4a09      	ldr	r2, [pc, #36]	; (80001dc <Clock_INIT+0x6c>)
 80001b6:	f043 0302 	orr.w	r3, r3, #2
 80001ba:	61d3      	str	r3, [r2, #28]
    RCC_TIM4_CLK_Enable();
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <Clock_INIT+0x6c>)
 80001be:	69db      	ldr	r3, [r3, #28]
 80001c0:	4a06      	ldr	r2, [pc, #24]	; (80001dc <Clock_INIT+0x6c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	61d3      	str	r3, [r2, #28]
    RCC_ADC1_CLK_Enable();
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <Clock_INIT+0x6c>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	4a03      	ldr	r2, [pc, #12]	; (80001dc <Clock_INIT+0x6c>)
 80001ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001d2:	6193      	str	r3, [r2, #24]
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40021000 	.word	0x40021000

080001e0 <EXTI_9>:


void EXTI_9 (void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	MCAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80001e4:	2101      	movs	r1, #1
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <EXTI_9+0x10>)
 80001e8:	f000 fc04 	bl	80009f4 <MCAL_GPIO_TogglePin>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
	Clock_INIT();
 80001fa:	f7ff ffb9 	bl	8000170 <Clock_INIT>

	EXTI_PinConfig_t Config;
	Config.EXTI_Pin = EXTI9_PB9;
 80001fe:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <main+0x40>)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	ca07      	ldmia	r2, {r0, r1, r2}
 8000204:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Config.Trigger_case = EXTI_Trigger_Rising;
 8000208:	2300      	movs	r3, #0
 800020a:	743b      	strb	r3, [r7, #16]
	Config.P_IRQ_CALL = EXTI_9;
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <main+0x44>)
 800020e:	617b      	str	r3, [r7, #20]
	Config.IRQ_EN = EXTI_IRQ_Enable ;
 8000210:	2301      	movs	r3, #1
 8000212:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&Config);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f9ee 	bl	80005f8 <MCAL_EXTI_GPIO_Init>

	GPIO_Pinconfig_t pinconfig ;
	pinconfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800021c:	2304      	movs	r3, #4
 800021e:	70bb      	strb	r3, [r7, #2]
	pinconfig.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000220:	2301      	movs	r3, #1
 8000222:	70fb      	strb	r3, [r7, #3]
	pinconfig.pinNumber=GPIO_PIN_0;
 8000224:	2301      	movs	r3, #1
 8000226:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(GPIOA, &pinconfig);
 8000228:	463b      	mov	r3, r7
 800022a:	4619      	mov	r1, r3
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <main+0x48>)
 800022e:	f000 fb62 	bl	80008f6 <MCAL_GPIO_Init>


	while (1)
 8000232:	e7fe      	b.n	8000232 <main+0x3e>
 8000234:	08000d2c 	.word	0x08000d2c
 8000238:	080001e1 	.word	0x080001e1
 800023c:	40010800 	.word	0x40010800

08000240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000240:	480d      	ldr	r0, [pc, #52]	; (8000278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000242:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000244:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <LoopForever+0x6>)
  ldr r1, =_edata
 800024a:	490d      	ldr	r1, [pc, #52]	; (8000280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <LoopForever+0xe>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000260:	4c0a      	ldr	r4, [pc, #40]	; (800028c <LoopForever+0x16>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026e:	f000 fd2d 	bl	8000ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000272:	f7ff ffbf 	bl	80001f4 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   r0, =_estack
 8000278:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800027c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000280:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000284:	08000d40 	.word	0x08000d40
  ldr r2, =_sbss
 8000288:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800028c:	200000a4 	.word	0x200000a4

08000290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_2_IRQHandler>
	...

08000294 <Enable_NVIC>:
 *
 * ===============================================================
 */

void Enable_NVIC (uint16_t IRQ_Line)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ_Line)
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	2b0f      	cmp	r3, #15
 80002a2:	d854      	bhi.n	800034e <Enable_NVIC+0xba>
 80002a4:	a201      	add	r2, pc, #4	; (adr r2, 80002ac <Enable_NVIC+0x18>)
 80002a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002aa:	bf00      	nop
 80002ac:	080002ed 	.word	0x080002ed
 80002b0:	080002fb 	.word	0x080002fb
 80002b4:	08000309 	.word	0x08000309
 80002b8:	08000317 	.word	0x08000317
 80002bc:	08000325 	.word	0x08000325
 80002c0:	08000333 	.word	0x08000333
 80002c4:	08000333 	.word	0x08000333
 80002c8:	08000333 	.word	0x08000333
 80002cc:	08000333 	.word	0x08000333
 80002d0:	08000333 	.word	0x08000333
 80002d4:	08000341 	.word	0x08000341
 80002d8:	08000341 	.word	0x08000341
 80002dc:	08000341 	.word	0x08000341
 80002e0:	08000341 	.word	0x08000341
 80002e4:	08000341 	.word	0x08000341
 80002e8:	08000341 	.word	0x08000341
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable();
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <Enable_NVIC+0xc4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a19      	ldr	r2, [pc, #100]	; (8000358 <Enable_NVIC+0xc4>)
 80002f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f6:	6013      	str	r3, [r2, #0]
		break;
 80002f8:	e029      	b.n	800034e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable();
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <Enable_NVIC+0xc4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a16      	ldr	r2, [pc, #88]	; (8000358 <Enable_NVIC+0xc4>)
 8000300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000304:	6013      	str	r3, [r2, #0]
		break;
 8000306:	e022      	b.n	800034e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable();
 8000308:	4b13      	ldr	r3, [pc, #76]	; (8000358 <Enable_NVIC+0xc4>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a12      	ldr	r2, [pc, #72]	; (8000358 <Enable_NVIC+0xc4>)
 800030e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000312:	6013      	str	r3, [r2, #0]
		break;
 8000314:	e01b      	b.n	800034e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable();
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <Enable_NVIC+0xc4>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <Enable_NVIC+0xc4>)
 800031c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000320:	6013      	str	r3, [r2, #0]
		break;
 8000322:	e014      	b.n	800034e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable();
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <Enable_NVIC+0xc4>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <Enable_NVIC+0xc4>)
 800032a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800032e:	6013      	str	r3, [r2, #0]
		break;
 8000330:	e00d      	b.n	800034e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_to_EXTI9_Enable();
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <Enable_NVIC+0xc4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a08      	ldr	r2, [pc, #32]	; (8000358 <Enable_NVIC+0xc4>)
 8000338:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800033c:	6013      	str	r3, [r2, #0]
		break;
 800033e:	e006      	b.n	800034e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_to_EXTI15_Enable();
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <Enable_NVIC+0xc8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a05      	ldr	r2, [pc, #20]	; (800035c <Enable_NVIC+0xc8>)
 8000346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800034a:	6013      	str	r3, [r2, #0]
		break;
 800034c:	bf00      	nop
	}
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	e000e100 	.word	0xe000e100
 800035c:	e000e104 	.word	0xe000e104

08000360 <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ_Line)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	80fb      	strh	r3, [r7, #6]
	switch(IRQ_Line)
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	2b0f      	cmp	r3, #15
 800036e:	d854      	bhi.n	800041a <Disable_NVIC+0xba>
 8000370:	a201      	add	r2, pc, #4	; (adr r2, 8000378 <Disable_NVIC+0x18>)
 8000372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000376:	bf00      	nop
 8000378:	080003b9 	.word	0x080003b9
 800037c:	080003c7 	.word	0x080003c7
 8000380:	080003d5 	.word	0x080003d5
 8000384:	080003e3 	.word	0x080003e3
 8000388:	080003f1 	.word	0x080003f1
 800038c:	080003ff 	.word	0x080003ff
 8000390:	080003ff 	.word	0x080003ff
 8000394:	080003ff 	.word	0x080003ff
 8000398:	080003ff 	.word	0x080003ff
 800039c:	080003ff 	.word	0x080003ff
 80003a0:	0800040d 	.word	0x0800040d
 80003a4:	0800040d 	.word	0x0800040d
 80003a8:	0800040d 	.word	0x0800040d
 80003ac:	0800040d 	.word	0x0800040d
 80003b0:	0800040d 	.word	0x0800040d
 80003b4:	0800040d 	.word	0x0800040d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable();
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <Disable_NVIC+0xc4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a19      	ldr	r2, [pc, #100]	; (8000424 <Disable_NVIC+0xc4>)
 80003be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c2:	6013      	str	r3, [r2, #0]
		break;
 80003c4:	e029      	b.n	800041a <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable();
 80003c6:	4b17      	ldr	r3, [pc, #92]	; (8000424 <Disable_NVIC+0xc4>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a16      	ldr	r2, [pc, #88]	; (8000424 <Disable_NVIC+0xc4>)
 80003cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d0:	6013      	str	r3, [r2, #0]
		break;
 80003d2:	e022      	b.n	800041a <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable();
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <Disable_NVIC+0xc4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a12      	ldr	r2, [pc, #72]	; (8000424 <Disable_NVIC+0xc4>)
 80003da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003de:	6013      	str	r3, [r2, #0]
		break;
 80003e0:	e01b      	b.n	800041a <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable();
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <Disable_NVIC+0xc4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <Disable_NVIC+0xc4>)
 80003e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ec:	6013      	str	r3, [r2, #0]
		break;
 80003ee:	e014      	b.n	800041a <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable();
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <Disable_NVIC+0xc4>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <Disable_NVIC+0xc4>)
 80003f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003fa:	6013      	str	r3, [r2, #0]
		break;
 80003fc:	e00d      	b.n	800041a <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_to_EXTI9_Disable();
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <Disable_NVIC+0xc4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a08      	ldr	r2, [pc, #32]	; (8000424 <Disable_NVIC+0xc4>)
 8000404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000408:	6013      	str	r3, [r2, #0]
		break;
 800040a:	e006      	b.n	800041a <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_to_EXTI15_Disable();
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <Disable_NVIC+0xc8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a05      	ldr	r2, [pc, #20]	; (8000428 <Disable_NVIC+0xc8>)
 8000412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000416:	6013      	str	r3, [r2, #0]
		break;
 8000418:	bf00      	nop
	}
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	e000e180 	.word	0xe000e180
 8000428:	e000e184 	.word	0xe000e184

0800042c <Configuration_EXTI>:




void Configuration_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	//1 GPIO_Init
	GPIO_Pinconfig_t pinconfig;
	pinconfig.pinNumber=EXTI_Config->EXTI_Pin.GPIO_Pin;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	891b      	ldrh	r3, [r3, #8]
 8000438:	813b      	strh	r3, [r7, #8]
	pinconfig.GPIO_MODE=GPIO_MODE_INPUT_AF;
 800043a:	2308      	movs	r3, #8
 800043c:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_PORT, &pinconfig);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	f107 0208 	add.w	r2, r7, #8
 8000446:	4611      	mov	r1, r2
 8000448:	4618      	mov	r0, r3
 800044a:	f000 fa54 	bl	80008f6 <MCAL_GPIO_Init>

	//2 INIT AFIO
	uint8_t posation   = EXTI_Config->EXTI_Pin.ETI_LineNumber / 4;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	089b      	lsrs	r3, r3, #2
 8000454:	b29b      	uxth	r3, r3
 8000456:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_shift  = (EXTI_Config->EXTI_Pin.ETI_LineNumber % 4) * 4;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	b2db      	uxtb	r3, r3
 800045e:	f003 0303 	and.w	r3, r3, #3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	73bb      	strb	r3, [r7, #14]
	//Clear bits
	AFIO->EXTICR[posation] &=~(0XF<<bit_shift);
 8000468:	4a5d      	ldr	r2, [pc, #372]	; (80005e0 <Configuration_EXTI+0x1b4>)
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	3302      	adds	r3, #2
 800046e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000472:	7bbb      	ldrb	r3, [r7, #14]
 8000474:	210f      	movs	r1, #15
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	43db      	mvns	r3, r3
 800047c:	4618      	mov	r0, r3
 800047e:	4958      	ldr	r1, [pc, #352]	; (80005e0 <Configuration_EXTI+0x1b4>)
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	4002      	ands	r2, r0
 8000484:	3302      	adds	r3, #2
 8000486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Clear bits
	AFIO->EXTICR[posation] |= (AFIO_GPIO_MAP(EXTI_Config->EXTI_Pin.GPIO_PORT) << bit_shift);
 800048a:	4a55      	ldr	r2, [pc, #340]	; (80005e0 <Configuration_EXTI+0x1b4>)
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	3302      	adds	r3, #2
 8000490:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	4952      	ldr	r1, [pc, #328]	; (80005e4 <Configuration_EXTI+0x1b8>)
 800049a:	428b      	cmp	r3, r1
 800049c:	d016      	beq.n	80004cc <Configuration_EXTI+0xa0>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	4951      	ldr	r1, [pc, #324]	; (80005e8 <Configuration_EXTI+0x1bc>)
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d00f      	beq.n	80004c8 <Configuration_EXTI+0x9c>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	494f      	ldr	r1, [pc, #316]	; (80005ec <Configuration_EXTI+0x1c0>)
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d008      	beq.n	80004c4 <Configuration_EXTI+0x98>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	494b      	ldr	r1, [pc, #300]	; (80005e4 <Configuration_EXTI+0x1b8>)
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d101      	bne.n	80004c0 <Configuration_EXTI+0x94>
 80004bc:	2303      	movs	r3, #3
 80004be:	e006      	b.n	80004ce <Configuration_EXTI+0xa2>
 80004c0:	2300      	movs	r3, #0
 80004c2:	e004      	b.n	80004ce <Configuration_EXTI+0xa2>
 80004c4:	2302      	movs	r3, #2
 80004c6:	e002      	b.n	80004ce <Configuration_EXTI+0xa2>
 80004c8:	2301      	movs	r3, #1
 80004ca:	e000      	b.n	80004ce <Configuration_EXTI+0xa2>
 80004cc:	2300      	movs	r3, #0
 80004ce:	7bb9      	ldrb	r1, [r7, #14]
 80004d0:	408b      	lsls	r3, r1
 80004d2:	4618      	mov	r0, r3
 80004d4:	4942      	ldr	r1, [pc, #264]	; (80005e0 <Configuration_EXTI+0x1b4>)
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	4302      	orrs	r2, r0
 80004da:	3302      	adds	r3, #2
 80004dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// 3 Set Rising and Falling
	//Clear bits
	EXTI->RTSR &=~(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 80004e0:	4b43      	ldr	r3, [pc, #268]	; (80005f0 <Configuration_EXTI+0x1c4>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	8812      	ldrh	r2, [r2, #0]
 80004e8:	4611      	mov	r1, r2
 80004ea:	2201      	movs	r2, #1
 80004ec:	408a      	lsls	r2, r1
 80004ee:	43d2      	mvns	r2, r2
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a3f      	ldr	r2, [pc, #252]	; (80005f0 <Configuration_EXTI+0x1c4>)
 80004f4:	400b      	ands	r3, r1
 80004f6:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 80004f8:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <Configuration_EXTI+0x1c4>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	8812      	ldrh	r2, [r2, #0]
 8000500:	4611      	mov	r1, r2
 8000502:	2201      	movs	r2, #1
 8000504:	408a      	lsls	r2, r1
 8000506:	43d2      	mvns	r2, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4a39      	ldr	r2, [pc, #228]	; (80005f0 <Configuration_EXTI+0x1c4>)
 800050c:	400b      	ands	r3, r1
 800050e:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_case == EXTI_Trigger_Rising )
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	7b1b      	ldrb	r3, [r3, #12]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d10b      	bne.n	8000530 <Configuration_EXTI+0x104>
	{
		EXTI->RTSR |=(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 8000518:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <Configuration_EXTI+0x1c4>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	8812      	ldrh	r2, [r2, #0]
 8000520:	4611      	mov	r1, r2
 8000522:	2201      	movs	r2, #1
 8000524:	408a      	lsls	r2, r1
 8000526:	4611      	mov	r1, r2
 8000528:	4a31      	ldr	r2, [pc, #196]	; (80005f0 <Configuration_EXTI+0x1c4>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6093      	str	r3, [r2, #8]
 800052e:	e025      	b.n	800057c <Configuration_EXTI+0x150>
	}
	else if ( EXTI_Config->Trigger_case == EXTI_Trigger_Falling )
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	7b1b      	ldrb	r3, [r3, #12]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d10b      	bne.n	8000550 <Configuration_EXTI+0x124>
	{
		EXTI->FTSR |=(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 8000538:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <Configuration_EXTI+0x1c4>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	8812      	ldrh	r2, [r2, #0]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a29      	ldr	r2, [pc, #164]	; (80005f0 <Configuration_EXTI+0x1c4>)
 800054a:	430b      	orrs	r3, r1
 800054c:	60d3      	str	r3, [r2, #12]
 800054e:	e015      	b.n	800057c <Configuration_EXTI+0x150>
	}
	else
	{
		EXTI->RTSR |=(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <Configuration_EXTI+0x1c4>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	8812      	ldrh	r2, [r2, #0]
 8000558:	4611      	mov	r1, r2
 800055a:	2201      	movs	r2, #1
 800055c:	408a      	lsls	r2, r1
 800055e:	4611      	mov	r1, r2
 8000560:	4a23      	ldr	r2, [pc, #140]	; (80005f0 <Configuration_EXTI+0x1c4>)
 8000562:	430b      	orrs	r3, r1
 8000564:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |=(1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 8000566:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <Configuration_EXTI+0x1c4>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	8812      	ldrh	r2, [r2, #0]
 800056e:	4611      	mov	r1, r2
 8000570:	2201      	movs	r2, #1
 8000572:	408a      	lsls	r2, r1
 8000574:	4611      	mov	r1, r2
 8000576:	4a1e      	ldr	r2, [pc, #120]	; (80005f0 <Configuration_EXTI+0x1c4>)
 8000578:	430b      	orrs	r3, r1
 800057a:	60d3      	str	r3, [r2, #12]
	}

	//4 IRQ Function Coll
	GP_IRQ_CALL[EXTI_Config->EXTI_Pin.ETI_LineNumber] = EXTI_Config->P_IRQ_CALL ;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	691b      	ldr	r3, [r3, #16]
 8000586:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <Configuration_EXTI+0x1c8>)
 8000588:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//5 Enable VNIC and MASK

	if( EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7b5b      	ldrb	r3, [r3, #13]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d110      	bne.n	80005b6 <Configuration_EXTI+0x18a>
	{
		EXTI->IMR |=( 1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <Configuration_EXTI+0x1c4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	8812      	ldrh	r2, [r2, #0]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <Configuration_EXTI+0x1c4>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6013      	str	r3, [r2, #0]
		Enable_NVIC( EXTI_Config->EXTI_Pin.ETI_LineNumber );
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe70 	bl	8000294 <Enable_NVIC>
		EXTI->IMR &=~( 1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
		Disable_NVIC( EXTI_Config->EXTI_Pin.ETI_LineNumber );
	}


}
 80005b4:	e010      	b.n	80005d8 <Configuration_EXTI+0x1ac>
		EXTI->IMR &=~( 1 << EXTI_Config->EXTI_Pin.ETI_LineNumber );
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <Configuration_EXTI+0x1c4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	8812      	ldrh	r2, [r2, #0]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	43d2      	mvns	r2, r2
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <Configuration_EXTI+0x1c4>)
 80005ca:	400b      	ands	r3, r1
 80005cc:	6013      	str	r3, [r2, #0]
		Disable_NVIC( EXTI_Config->EXTI_Pin.ETI_LineNumber );
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fec4 	bl	8000360 <Disable_NVIC>
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40010000 	.word	0x40010000
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40010c00 	.word	0x40010c00
 80005ec:	40011000 	.word	0x40011000
 80005f0:	40010400 	.word	0x40010400
 80005f4:	20000068 	.word	0x20000068

080005f8 <MCAL_EXTI_GPIO_Init>:
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

	Configuration_EXTI(EXTI_Config);
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff ff13 	bl	800042c <Configuration_EXTI>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <EXTI0_IRQHandler+0x1c>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <EXTI0_IRQHandler+0x1c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <EXTI0_IRQHandler+0x20>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4798      	blx	r3
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010400 	.word	0x40010400
 8000630:	20000068 	.word	0x20000068

08000634 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <EXTI1_IRQHandler+0x1c>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <EXTI1_IRQHandler+0x1c>)
 800063e:	f043 0302 	orr.w	r3, r3, #2
 8000642:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <EXTI1_IRQHandler+0x20>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	4798      	blx	r3
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010400 	.word	0x40010400
 8000654:	20000068 	.word	0x20000068

08000658 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <EXTI2_IRQHandler+0x1c>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <EXTI2_IRQHandler+0x1c>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <EXTI2_IRQHandler+0x20>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	4798      	blx	r3
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010400 	.word	0x40010400
 8000678:	20000068 	.word	0x20000068

0800067c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <EXTI3_IRQHandler+0x1c>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <EXTI3_IRQHandler+0x1c>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <EXTI3_IRQHandler+0x20>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	4798      	blx	r3
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010400 	.word	0x40010400
 800069c:	20000068 	.word	0x20000068

080006a0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <EXTI4_IRQHandler+0x1c>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <EXTI4_IRQHandler+0x1c>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <EXTI4_IRQHandler+0x20>)
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	4798      	blx	r3
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010400 	.word	0x40010400
 80006c0:	20000068 	.word	0x20000068

080006c4 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f003 0320 	and.w	r3, r3, #32
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d008      	beq.n	80006e6 <EXTI9_5_IRQHandler+0x22>
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	6153      	str	r3, [r2, #20]
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <EXTI9_5_IRQHandler+0xa4>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d008      	beq.n	8000704 <EXTI9_5_IRQHandler+0x40>
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <EXTI9_5_IRQHandler+0xa4>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070c:	2b00      	cmp	r3, #0
 800070e:	d008      	beq.n	8000722 <EXTI9_5_IRQHandler+0x5e>
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	4a13      	ldr	r2, [pc, #76]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071a:	6153      	str	r3, [r2, #20]
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <EXTI9_5_IRQHandler+0xa4>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800072a:	2b00      	cmp	r3, #0
 800072c:	d008      	beq.n	8000740 <EXTI9_5_IRQHandler+0x7c>
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <EXTI9_5_IRQHandler+0xa4>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000748:	2b00      	cmp	r3, #0
 800074a:	d008      	beq.n	800075e <EXTI9_5_IRQHandler+0x9a>
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000756:	6153      	str	r3, [r2, #20]
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <EXTI9_5_IRQHandler+0xa4>)
 800075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075c:	4798      	blx	r3
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40010400 	.word	0x40010400
 8000768:	20000068 	.word	0x20000068

0800076c <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 8000770:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000778:	2b00      	cmp	r3, #0
 800077a:	d008      	beq.n	800078e <EXTI15_10_IRQHandler+0x22>
 800077c:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	4a29      	ldr	r2, [pc, #164]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000786:	6153      	str	r3, [r2, #20]
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 800078a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078c:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000796:	2b00      	cmp	r3, #0
 8000798:	d008      	beq.n	80007ac <EXTI15_10_IRQHandler+0x40>
 800079a:	4b23      	ldr	r3, [pc, #140]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a22      	ldr	r2, [pc, #136]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d008      	beq.n	80007ca <EXTI15_10_IRQHandler+0x5e>
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a1a      	ldr	r2, [pc, #104]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c2:	6153      	str	r3, [r2, #20]
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d008      	beq.n	80007e8 <EXTI15_10_IRQHandler+0x7c>
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d008      	beq.n	8000806 <EXTI15_10_IRQHandler+0x9a>
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6153      	str	r3, [r2, #20]
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 8000802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000804:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <EXTI15_10_IRQHandler+0xb8>
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b03      	ldr	r3, [pc, #12]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 8000820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000822:	4798      	blx	r3
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40010400 	.word	0x40010400
 800082c:	20000068 	.word	0x20000068

08000830 <get_position>:

#include"stm32_f103c6_GPIO.h"


uint8_t get_position(uint16_t pinNumber)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	2b80      	cmp	r3, #128	; 0x80
 800083e:	d042      	beq.n	80008c6 <get_position+0x96>
 8000840:	2b80      	cmp	r3, #128	; 0x80
 8000842:	dc11      	bgt.n	8000868 <get_position+0x38>
 8000844:	2b08      	cmp	r3, #8
 8000846:	d036      	beq.n	80008b6 <get_position+0x86>
 8000848:	2b08      	cmp	r3, #8
 800084a:	dc06      	bgt.n	800085a <get_position+0x2a>
 800084c:	2b02      	cmp	r3, #2
 800084e:	d02e      	beq.n	80008ae <get_position+0x7e>
 8000850:	2b04      	cmp	r3, #4
 8000852:	d02e      	beq.n	80008b2 <get_position+0x82>
 8000854:	2b01      	cmp	r3, #1
 8000856:	d028      	beq.n	80008aa <get_position+0x7a>
 8000858:	e047      	b.n	80008ea <get_position+0xba>
 800085a:	2b20      	cmp	r3, #32
 800085c:	d02f      	beq.n	80008be <get_position+0x8e>
 800085e:	2b40      	cmp	r3, #64	; 0x40
 8000860:	d02f      	beq.n	80008c2 <get_position+0x92>
 8000862:	2b10      	cmp	r3, #16
 8000864:	d029      	beq.n	80008ba <get_position+0x8a>
 8000866:	e040      	b.n	80008ea <get_position+0xba>
 8000868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800086c:	d033      	beq.n	80008d6 <get_position+0xa6>
 800086e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000872:	dc09      	bgt.n	8000888 <get_position+0x58>
 8000874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000878:	d029      	beq.n	80008ce <get_position+0x9e>
 800087a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800087e:	d028      	beq.n	80008d2 <get_position+0xa2>
 8000880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000884:	d021      	beq.n	80008ca <get_position+0x9a>
 8000886:	e030      	b.n	80008ea <get_position+0xba>
 8000888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800088c:	d027      	beq.n	80008de <get_position+0xae>
 800088e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000892:	dc03      	bgt.n	800089c <get_position+0x6c>
 8000894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000898:	d01f      	beq.n	80008da <get_position+0xaa>
 800089a:	e026      	b.n	80008ea <get_position+0xba>
 800089c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008a0:	d01f      	beq.n	80008e2 <get_position+0xb2>
 80008a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008a6:	d01e      	beq.n	80008e6 <get_position+0xb6>
 80008a8:	e01f      	b.n	80008ea <get_position+0xba>
	{
	case GPIO_PIN_0 :
		return 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e01e      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	e01c      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 80008b2:	2308      	movs	r3, #8
 80008b4:	e01a      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 80008b6:	230c      	movs	r3, #12
 80008b8:	e018      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 80008ba:	2310      	movs	r3, #16
 80008bc:	e016      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 80008be:	2314      	movs	r3, #20
 80008c0:	e014      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 80008c2:	2318      	movs	r3, #24
 80008c4:	e012      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 80008c6:	231c      	movs	r3, #28
 80008c8:	e010      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_8 :
		return 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e00e      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	e00c      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 80008d2:	2308      	movs	r3, #8
 80008d4:	e00a      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 80008d6:	230c      	movs	r3, #12
 80008d8:	e008      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 80008da:	2310      	movs	r3, #16
 80008dc:	e006      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 80008de:	2314      	movs	r3, #20
 80008e0:	e004      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 80008e2:	2318      	movs	r3, #24
 80008e4:	e002      	b.n	80008ec <get_position+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 80008e6:	231c      	movs	r3, #28
 80008e8:	e000      	b.n	80008ec <get_position+0xbc>
		break;
	default:
		return 0;
 80008ea:	2300      	movs	r3, #0
	}
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <MCAL_GPIO_Init>:
* @param [in] 		-pinconfig: configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 80008f6:	b590      	push	{r4, r7, lr}
 80008f8:	b085      	sub	sp, #20
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	2bff      	cmp	r3, #255	; 0xff
 800090e:	d801      	bhi.n	8000914 <MCAL_GPIO_Init+0x1e>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	e001      	b.n	8000918 <MCAL_GPIO_Init+0x22>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3304      	adds	r3, #4
 8000918:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff86 	bl	8000830 <get_position>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	230f      	movs	r3, #15
 800092a:	4093      	lsls	r3, r2
 800092c:	43da      	mvns	r2, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	401a      	ands	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	789b      	ldrb	r3, [r3, #2]
 800093c:	2b07      	cmp	r3, #7
 800093e:	d00b      	beq.n	8000958 <MCAL_GPIO_Init+0x62>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	789b      	ldrb	r3, [r3, #2]
 8000944:	2b06      	cmp	r3, #6
 8000946:	d007      	beq.n	8000958 <MCAL_GPIO_Init+0x62>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	2b05      	cmp	r3, #5
 800094e:	d003      	beq.n	8000958 <MCAL_GPIO_Init+0x62>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	2b04      	cmp	r3, #4
 8000956:	d10e      	bne.n	8000976 <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	789b      	ldrb	r3, [r3, #2]
 800095c:	3b04      	subs	r3, #4
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	b25a      	sxtb	r2, r3
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	78db      	ldrb	r3, [r3, #3]
 8000966:	b25b      	sxtb	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b25b      	sxtb	r3, r3
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	e02c      	b.n	80009d0 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d003      	beq.n	8000986 <MCAL_GPIO_Init+0x90>
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	789b      	ldrb	r3, [r3, #2]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d107      	bne.n	8000996 <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	73fb      	strb	r3, [r7, #15]
 8000994:	e01c      	b.n	80009d0 <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	789b      	ldrb	r3, [r3, #2]
 800099a:	2b08      	cmp	r3, #8
 800099c:	d102      	bne.n	80009a4 <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 800099e:	2304      	movs	r3, #4
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e015      	b.n	80009d0 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 80009a4:	2308      	movs	r3, #8
 80009a6:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	789b      	ldrb	r3, [r3, #2]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d107      	bne.n	80009c0 <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	8812      	ldrh	r2, [r2, #0]
 80009b8:	431a      	orrs	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	e007      	b.n	80009d0 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	8812      	ldrh	r2, [r2, #0]
 80009c8:	43d2      	mvns	r2, r2
 80009ca:	401a      	ands	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 80009d0:	7bfc      	ldrb	r4, [r7, #15]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff2a 	bl	8000830 <get_position>
 80009dc:	4603      	mov	r3, r0
 80009de:	fa04 f203 	lsl.w	r2, r4, r3
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	431a      	orrs	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}

080009f4 <MCAL_GPIO_TogglePin>:
* @param [in] 		-pinNumber: set pinNumber according to @ ref  GPIO_PINS_Define
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber )
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^=pinNumber;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	405a      	eors	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	60da      	str	r2, [r3, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
	...

08000a18 <Slave_Status>:
* @param [in] 		-I2Cx:  specified I2Cx x=[ 1 : 2 ]
* @retval 			-none
* Note				-this function jump to call_interrupt in main .
*/
void Slave_Status(I2C_TypeDef* I2Cx , Slave_State state)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
	uint8_t index =  I2Cx == I2C1 ? 0 : 1 ;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <Slave_Status+0xd0>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	73fb      	strb	r3, [r7, #15]

	switch(state)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d851      	bhi.n	8000ade <Slave_Status+0xc6>
 8000a3a:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <Slave_Status+0x28>)
 8000a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a40:	08000a51 	.word	0x08000a51
 8000a44:	08000a75 	.word	0x08000a75
 8000a48:	08000a8d 	.word	0x08000a8d
 8000a4c:	08000ab1 	.word	0x08000ab1
	{
	case I2C_EV_STOP :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d03b      	beq.n	8000ad4 <Slave_Status+0xbc>
		{
			//Stop condition is detected on the bus by the slave after an acknowledge
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_STOP);
 8000a5c:	7bfa      	ldrb	r2, [r7, #15]
 8000a5e:	4923      	ldr	r1, [pc, #140]	; (8000aec <Slave_Status+0xd4>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	1a9b      	subs	r3, r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	440b      	add	r3, r1
 8000a6a:	3318      	adds	r3, #24
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2000      	movs	r0, #0
 8000a70:	4798      	blx	r3
		}
		break;
 8000a72:	e02f      	b.n	8000ad4 <Slave_Status+0xbc>
	case I2C_EV_ADDR_Matched :
		//address matched with the OAR registers content or a general call
		g_I2C_Config[index].P_IRQ_CALL(I2C_EV_ADDR_Matched);
 8000a74:	7bfa      	ldrb	r2, [r7, #15]
 8000a76:	491d      	ldr	r1, [pc, #116]	; (8000aec <Slave_Status+0xd4>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	1a9b      	subs	r3, r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	440b      	add	r3, r1
 8000a82:	3318      	adds	r3, #24
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2001      	movs	r0, #1
 8000a88:	4798      	blx	r3
		break;
 8000a8a:	e028      	b.n	8000ade <Slave_Status+0xc6>
	case I2C_EV_DATA_REQ :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d01f      	beq.n	8000ad8 <Slave_Status+0xc0>
		{
			// the APP layer should send the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_REQ);
 8000a98:	7bfa      	ldrb	r2, [r7, #15]
 8000a9a:	4914      	ldr	r1, [pc, #80]	; (8000aec <Slave_Status+0xd4>)
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	1a9b      	subs	r3, r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	3318      	adds	r3, #24
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2002      	movs	r0, #2
 8000aac:	4798      	blx	r3
		}
		break;
 8000aae:	e013      	b.n	8000ad8 <Slave_Status+0xc0>
	case I2C_EV_DATA_RCV :
		// Make Sure the Slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10f      	bne.n	8000adc <Slave_Status+0xc4>
		{
			// the APP layer should read the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_RCV);
 8000abc:	7bfa      	ldrb	r2, [r7, #15]
 8000abe:	490b      	ldr	r1, [pc, #44]	; (8000aec <Slave_Status+0xd4>)
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	1a9b      	subs	r3, r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	3318      	adds	r3, #24
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2003      	movs	r0, #3
 8000ad0:	4798      	blx	r3
		}
		break;
 8000ad2:	e003      	b.n	8000adc <Slave_Status+0xc4>
		break;
 8000ad4:	bf00      	nop
 8000ad6:	e002      	b.n	8000ade <Slave_Status+0xc6>
		break;
 8000ad8:	bf00      	nop
 8000ada:	e000      	b.n	8000ade <Slave_Status+0xc6>
		break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	2000001c 	.word	0x2000001c

08000af0 <I2C1_EV_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void I2C1_EV_IRQHandler()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
	volatile uint32_t Dummy_Read = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]

	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));		// Stop detection (slave mode)
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	60fb      	str	r3, [r7, #12]
	Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN));	// Event interrupt enable
 8000b04:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b0c:	60bb      	str	r3, [r7, #8]
	Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN));	// Buffer interrupt enable
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b16:	607b      	str	r3, [r7, #4]
	//check Stop detection
	if(Temp_1 && Temp_3)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00a      	beq.n	8000b34 <I2C1_EV_IRQHandler+0x44>
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d007      	beq.n	8000b34 <I2C1_EV_IRQHandler+0x44>
	{
		//Cleared by software reading the SR1 register followed by a write in the CR1 register, or by hardware when PE=0
		I2C1->CR1 |= 0x0000;
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b26:	4a2b      	ldr	r2, [pc, #172]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6013      	str	r3, [r2, #0]
		Slave_Status(I2C1 , I2C_EV_STOP);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4829      	ldr	r0, [pc, #164]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b30:	f7ff ff72 	bl	8000a18 <Slave_Status>
	}
	// Check address matched.
	Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR));
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_3)
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d012      	beq.n	8000b6a <I2C1_EV_IRQHandler+0x7a>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00f      	beq.n	8000b6a <I2C1_EV_IRQHandler+0x7a>
	{
		// Note: In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set. Refer to Figure 272
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000b4a:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d109      	bne.n	8000b6a <I2C1_EV_IRQHandler+0x7a>
			// Master mode
		}
		else
		{
			// Slave mode
			Dummy_Read  = I2C1->SR1 ;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	603b      	str	r3, [r7, #0]
			Dummy_Read  = I2C1->SR2 ;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	603b      	str	r3, [r7, #0]
			Slave_Status(I2C1 , I2C_EV_ADDR_Matched) ;
 8000b62:	2101      	movs	r1, #1
 8000b64:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b66:	f7ff ff57 	bl	8000a18 <Slave_Status>
		}
	}
	// Data register empty at slave_transmitter
	Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE));
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b72:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d00f      	beq.n	8000b9a <I2C1_EV_IRQHandler+0xaa>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00c      	beq.n	8000b9a <I2C1_EV_IRQHandler+0xaa>
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d009      	beq.n	8000b9a <I2C1_EV_IRQHandler+0xaa>
	{
		//Cleared by software writing to the DR register or by hardware after a start or a stop condition or when PE=0
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <I2C1_EV_IRQHandler+0xaa>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_REQ);
 8000b92:	2102      	movs	r1, #2
 8000b94:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b96:	f7ff ff3f 	bl	8000a18 <Slave_Status>
		}
	}
	// Data register not empty at slave receive
	Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE));
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba2:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00f      	beq.n	8000bca <I2C1_EV_IRQHandler+0xda>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00c      	beq.n	8000bca <I2C1_EV_IRQHandler+0xda>
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d009      	beq.n	8000bca <I2C1_EV_IRQHandler+0xda>
	{
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <I2C1_EV_IRQHandler+0xda>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_RCV);
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <I2C1_EV_IRQHandler+0xe4>)
 8000bc6:	f7ff ff27 	bl	8000a18 <Slave_Status>
		}
	}
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40005400 	.word	0x40005400

08000bd8 <SPI1_IRQHandler>:
 *
 * ===============================================================
 */

void SPI1_IRQHandler ( void )
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI1->SR & 1<<1 ) >>1 )  ;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <SPI1_IRQHandler+0x54>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	085b      	lsrs	r3, r3, #1
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	793b      	ldrb	r3, [r7, #4]
 8000bec:	f362 0300 	bfi	r3, r2, #0, #1
 8000bf0:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI1->SR & 1<<0 ) >>0 )  ;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <SPI1_IRQHandler+0x54>)
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	793b      	ldrb	r3, [r7, #4]
 8000bfe:	f362 0341 	bfi	r3, r2, #1, #1
 8000c02:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI1->SR & 1<<4 ) >>4 )  ;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <SPI1_IRQHandler+0x54>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	091b      	lsrs	r3, r3, #4
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	793b      	ldrb	r3, [r7, #4]
 8000c12:	f362 0382 	bfi	r3, r2, #2, #1
 8000c16:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[0]->P_IRQ_CALL ( IRQ_SRC ) ;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SPI1_IRQHandler+0x58>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	7938      	ldrb	r0, [r7, #4]
 8000c20:	4798      	blx	r3
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	20000054 	.word	0x20000054

08000c34 <SPI2_IRQHandler>:

void SPI2_IRQHandler ( void )
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI2->SR & 1<<1 ) >>1 )  ;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <SPI2_IRQHandler+0x54>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	085b      	lsrs	r3, r3, #1
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	793b      	ldrb	r3, [r7, #4]
 8000c48:	f362 0300 	bfi	r3, r2, #0, #1
 8000c4c:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI2->SR & 1<<0 ) >>0 )  ;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <SPI2_IRQHandler+0x54>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	793b      	ldrb	r3, [r7, #4]
 8000c5a:	f362 0341 	bfi	r3, r2, #1, #1
 8000c5e:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI2->SR & 1<<4 ) >>4 )  ;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <SPI2_IRQHandler+0x54>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	091b      	lsrs	r3, r3, #4
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	793b      	ldrb	r3, [r7, #4]
 8000c6e:	f362 0382 	bfi	r3, r2, #2, #1
 8000c72:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[1]->P_IRQ_CALL ( IRQ_SRC ) ;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SPI2_IRQHandler+0x58>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	7938      	ldrb	r0, [r7, #4]
 8000c7c:	4798      	blx	r3
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40003800 	.word	0x40003800
 8000c8c:	20000054 	.word	0x20000054

08000c90 <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <USART1_IRQHandler+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	4798      	blx	r3
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000005c 	.word	0x2000005c

08000ca4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <USART2_IRQHandler+0x10>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	4798      	blx	r3
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000005c 	.word	0x2000005c

08000cb8 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 8000cbc:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <USART3_IRQHandler+0x10>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	4798      	blx	r3
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2000005c 	.word	0x2000005c

08000ccc <__libc_init_array>:
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	2500      	movs	r5, #0
 8000cd0:	4e0c      	ldr	r6, [pc, #48]	; (8000d04 <__libc_init_array+0x38>)
 8000cd2:	4c0d      	ldr	r4, [pc, #52]	; (8000d08 <__libc_init_array+0x3c>)
 8000cd4:	1ba4      	subs	r4, r4, r6
 8000cd6:	10a4      	asrs	r4, r4, #2
 8000cd8:	42a5      	cmp	r5, r4
 8000cda:	d109      	bne.n	8000cf0 <__libc_init_array+0x24>
 8000cdc:	f000 f81a 	bl	8000d14 <_init>
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	4e0a      	ldr	r6, [pc, #40]	; (8000d0c <__libc_init_array+0x40>)
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	; (8000d10 <__libc_init_array+0x44>)
 8000ce6:	1ba4      	subs	r4, r4, r6
 8000ce8:	10a4      	asrs	r4, r4, #2
 8000cea:	42a5      	cmp	r5, r4
 8000cec:	d105      	bne.n	8000cfa <__libc_init_array+0x2e>
 8000cee:	bd70      	pop	{r4, r5, r6, pc}
 8000cf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cf4:	4798      	blx	r3
 8000cf6:	3501      	adds	r5, #1
 8000cf8:	e7ee      	b.n	8000cd8 <__libc_init_array+0xc>
 8000cfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cfe:	4798      	blx	r3
 8000d00:	3501      	adds	r5, #1
 8000d02:	e7f2      	b.n	8000cea <__libc_init_array+0x1e>
 8000d04:	08000d38 	.word	0x08000d38
 8000d08:	08000d38 	.word	0x08000d38
 8000d0c:	08000d38 	.word	0x08000d38
 8000d10:	08000d3c 	.word	0x08000d3c

08000d14 <_init>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	bf00      	nop
 8000d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1a:	bc08      	pop	{r3}
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	4770      	bx	lr

08000d20 <_fini>:
 8000d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d22:	bf00      	nop
 8000d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d26:	bc08      	pop	{r3}
 8000d28:	469e      	mov	lr, r3
 8000d2a:	4770      	bx	lr
